# Clean out the deployment artifacts when a PR is closed.
# This deletes the PR artifacts created by the deploy-pr workflow.
name: Clean PR Deploy Artifacts

on:
  pull_request:
    types: [closed]

jobs:
  # Print variables for logging and debugging purposes
  checkEnv:
    name: Check Env variables
    runs-on: ubuntu-16.04
    if: ${{ contains(github.event.pull_request.labels.*.name, 'PR-DEPLOY') || contains(github.event.pull_request.title, 'PR-DEPLOY') }}
    env:
      GITHUB_CONTEXT: ${{ toJson(github) }}
    steps:
      - name: Print Env Vars
        run: |
          echo Git Base Ref: ${{ github.base_ref }}
          echo Git Change ID: ${{ github.event.number }}
          echo Git Pull Request Ref: ${{ github.event.pull_request.head.sha }}
          echo OC CLI Version: $(oc version)
          echo Git Context: "$GITHUB_CONTEXT"

  clean:
    name: Clean Build and Deployment Artifacts in the Dev and Tools OpenShift environments
    runs-on: ubuntu-16.04
    # Only clean if the PR that closed was marked as a PR-DEPLOY
    if: ${{ contains(github.event.pull_request.labels.*.name, 'PR-DEPLOY') || contains(github.event.pull_request.title, 'PR-DEPLOY') }}
    env:
      BUILD_ID: ${{ github.event.number }}
    steps:
      # Checkout the PR branch
      - name: Checkout Dev Branch - Contains the Pipeline Code
        uses: actions/checkout@v2

      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 10.16

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Clean the database build/deployment artifacts
      - name: Clean Database Artifacts
        working-directory: './database/.pipeline/'
        run: |
          # npm install
          npm ci
          DEBUG=* npm run clean -- --pr=$BUILD_ID --env=build
          DEBUG=* npm run clean -- --pr=$BUILD_ID --env=dev

      # Clean the api build/deployment artifacts
      - name: Clean API Artifacts
        working-directory: './api/.pipeline/'
        run: |
          # npm install
          npm ci
          DEBUG=* npm run clean -- --pr=$BUILD_ID --env=build
          DEBUG=* npm run clean -- --pr=$BUILD_ID --env=dev

      # Clean the app build/deployment artifacts
      - name: Clean APP Artifacts
        working-directory: './app/.pipeline/'
        run: |
          # npm install
          npm ci
          DEBUG=* npm run clean -- --pr=$BUILD_ID --env=build
          DEBUG=* npm run clean -- --pr=$BUILD_ID --env=dev
