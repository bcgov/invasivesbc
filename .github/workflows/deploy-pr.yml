# PR Deploy
# Builds and Deploys unmerged PR's to pods/services/routes/etc in the OpenShift.

# This workflow only runs if the PR has the 'PR-DEPLOY' label when it is first created.
# If the label is added after the PR has been opened, you will need to push a change to the PR to re-trigger the workflow.
# Manually re-running the workflow (via the 're-run jobs' button) won't work, as the git context won't have updated and the new label and/or title won't be present.
name: PR Deploy

on:
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - dev
      - test
      - prod

jobs:
  # Print variables for logging and debugging purposes
  checkEnv:
    name: Check Env variables
    runs-on: ubuntu-16.04
    if: ${{ contains(github.event.pull_request.labels.*.name, 'PR-DEPLOY') }}
    env:
      LABELS: ${{ toJson(github.event.pull_request.labels) }}
    steps:
      - name: Print Env Vars
        run: |
          echo OC CLI Version: $(oc version)
          echo Git Base Ref: ${{ github.base_ref }}
          echo Git Change ID: ${{ github.event.number }}
          echo Git Pull Request Ref: ${{ github.event.pull_request.head.sha }}
          echo GIt Event Name: ${{ github.event_name }}
          echo GIt Event Action: ${{ github.event.action }}
          echo Git Title: ${{ github.event.pull_request.title }}
          echo Git Labels: "$LABELS"

  # Build the Database image
  buildDatabase:
    name: Build Database Image
    runs-on: ubuntu-16.04
    if: ${{ contains(github.event.pull_request.labels.*.name, 'PR-DEPLOY') }}
    env:
      BUILD_ID: ${{ github.event.number }}
    steps:
      # Checkout the PR branch
      - name: Checkout Target Branch
        uses: actions/checkout@v2

      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 10.16

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Build the database image
      - name: Build Database Image
        working-directory: './database/.pipeline/'
        run: |
          npm ci
          DEBUG=* npm run db:build -- --pr=$BUILD_ID

  # Build the Database Setup image
  buildDatabaseSetup:
    name: Build Database Setup Image
    runs-on: ubuntu-16.04
    if: ${{ contains(github.event.pull_request.labels.*.name, 'PR-DEPLOY') }}
    env:
      BUILD_ID: ${{ github.event.number }}
    steps:
      # Checkout the PR branch
      - name: Checkout Target Branch
        uses: actions/checkout@v2

      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 10.16

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Build the database image
      - name: Build Database Setup Image
        working-directory: './database/.pipeline/'
        run: |
          npm ci
          DEBUG=* npm run db-setup:build -- --pr=$BUILD_ID

  # Build the API image
  buildAPI:
    name: Build API Image
    runs-on: ubuntu-16.04
    if: ${{ contains(github.event.pull_request.labels.*.name, 'PR-DEPLOY') }}
    env:
      BUILD_ID: ${{ github.event.number }}
    steps:
      # Checkout the PR branch
      - name: Checkout Target Branch
        uses: actions/checkout@v2

      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 10.16

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Build the api image
      - name: Build API Image
        working-directory: './api/.pipeline/'
        run: |
          npm ci
          DEBUG=* npm run build -- --pr=$BUILD_ID

  # Build the web frontend app image
  buildAPP:
    name: Build App Image
    runs-on: ubuntu-16.04
    if: ${{ contains(github.event.pull_request.labels.*.name, 'PR-DEPLOY') }}
    env:
      BUILD_ID: ${{ github.event.number }}
    steps:
      # Checkout the PR branch
      - name: Checkout Target Branch
        uses: actions/checkout@v2

      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 10.16

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Build the app image
      - name: Build APP Image
        working-directory: './app/.pipeline/'
        run: |
          npm ci
          DEBUG=* npm run build -- --pr=$BUILD_ID

  # Deploy Database image
  deployDatabase:
    name: Deploy Database Image
    runs-on: ubuntu-16.04
    if: ${{ contains(github.event.pull_request.labels.*.name, 'PR-DEPLOY') }}
    env:
      BUILD_ID: ${{ github.event.number }}
      BRANCH: ${{ github.base_ref }}
    needs:
      - buildDatabase
    steps:
      # Checkout the PR branch
      - name: Checkout Target Branch
        uses: actions/checkout@v2

      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 10.16

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Deploy the database image
      - name: Deploy Database Image
        working-directory: './database/.pipeline/'
        run: |
          npm ci
          DEBUG=* npm run db:deploy -- --pr=$BUILD_ID --env=$BRANCH

  # Deploy Database image
  deployDatabaseSetup:
    name: Deploy Database Setup Image
    runs-on: ubuntu-16.04
    if: ${{ contains(github.event.pull_request.labels.*.name, 'PR-DEPLOY') }}
    env:
      BUILD_ID: ${{ github.event.number }}
      BRANCH: ${{ github.base_ref }}
    needs:
      - buildDatabaseSetup
      - deployDatabase
    steps:
      # Checkout the PR branch
      - name: Checkout Target Branch
        uses: actions/checkout@v2

      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 10.16

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Deploy the database setup image
      - name: Deploy Database Setup Image
        working-directory: './database/.pipeline/'
        run: |
          npm ci
          DEBUG=* npm run db-setup:deploy -- --pr=$BUILD_ID --env=$BRANCH

  # Deploy API image
  deployAPI:
    name: Deploy API Image
    runs-on: ubuntu-16.04
    if: ${{ contains(github.event.pull_request.labels.*.name, 'PR-DEPLOY') }}
    env:
      BUILD_ID: ${{ github.event.number }}
      BRANCH: ${{ github.base_ref }}
    needs:
      - buildAPI
      - deployDatabase
    steps:
      # Checkout the PR branch
      - name: Checkout Target Branch
        uses: actions/checkout@v2

      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 10.16

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Deploy the api image
      - name: Deploy API Image
        working-directory: './api/.pipeline/'
        run: |
          npm ci
          DEBUG=* npm run deploy -- --pr=$BUILD_ID --env=$BRANCH

  # Deploy App image
  deployAPP:
    name: Deploy App Image
    runs-on: ubuntu-16.04
    if: ${{ contains(github.event.pull_request.labels.*.name, 'PR-DEPLOY') }}
    env:
      BUILD_ID: ${{ github.event.number }}
      BRANCH: ${{ github.base_ref }}
    needs:
      - buildAPP
    steps:
      # Checkout the PR branch
      - name: Checkout Target Branch
        uses: actions/checkout@v2

      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 10.16

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Deploy the app image
      - name: Deploy App Image
        working-directory: './app/.pipeline'
        run: |
          npm ci
          DEBUG=* npm run deploy -- --pr=$BUILD_ID --env=$BRANCH

  # Smoke Test the API (dev only, as this may create records with random test data)
  postmanAPITests:
    name: Postman API Tests (Dev only)
    runs-on: ubuntu-16.04
    if: |
      ${{ github.base_ref == 'dev' &&
        ( contains(github.event.pull_request.labels.*.name, 'PR-DEPLOY') ||
          contains(github.event.pull_request.title, 'PR-DEPLOY') ) }}
    needs:
      - deployDatabase
      - deployAPI
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      # Checkout the PR branch
      - name: Checkout Target Branch
        uses: actions/checkout@v2

      # Install Node - for `node` and `npm` commands
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Newman
        run: npm install -g newman

      # Run the postman tests via newman
      - name: RunTest
        working-directory: ./testing/integration/postman
        run: |
          sed -i "s/<postman pw>/${{ secrets.POSTMAN_PW }}/g" invasives_api_dev.environment.json
          sed -i "s/<location>/api-dev-invasivesbci/g" invasives_api_dev.environment.json
          newman run InvasivesBC-API-DEV.postman_collection.json -e invasives_api_dev.environment.json
