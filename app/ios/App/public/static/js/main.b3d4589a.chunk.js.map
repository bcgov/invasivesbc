{"version":3,"sources":["gifs/Plan Page.gif","../node_modules/@ionic/pwa-elements/dist/esm-es5 lazy /^/.//.*/.entry/.js$/ include: //.entry/.js$/ exclude: //.system/.entry/.js$/ groupOptions: {} namespace object","../node_modules/@ionic/core/dist/esm-es5 lazy /^/.//.*/.entry/.js$/ groupOptions: {} namespace object","../node_modules/ionicons/dist/esm lazy /^/.//.*/.entry/.js$/ include: //.entry/.js$/ exclude: //.system/.entry/.js$/ groupOptions: {} namespace object","InvasivesBC_Icon.svg","constants/roles.ts","contexts/DatabaseContext.tsx","contexts/DatabaseChangesContext.tsx","contexts/NetworkContext.tsx","themes/appTheme.ts","constants/activities.ts","constants/database.ts","hooks/useInvasivesApi.ts","utils/NotificationUtils.tsx","components/activities-list/ActivityListDate.tsx","constants/misc.ts","utils/errorHandling.ts","rjsf/business-rules/formDataCopyFields.ts","utils/addActivity.ts","components/map/MapContainer.tsx","components/common/WarningDialog.tsx","components/activities-list/ActivitiesList.tsx","features/home/activities/ActivitiesPage.tsx","rjsf/components/AddButton.tsx","rjsf/components/IconButton.tsx","rjsf/templates/ArrayFieldTemplate.tsx","rjsf/templates/WrapIfAdditional.tsx","rjsf/templates/FieldTemplate.tsx","rjsf/templates/ObjectFieldTemplate.tsx","rjsf/uiSchema/BaseUISchemaComponents.ts","rjsf/uiSchema/UISchemaComponents.ts","rjsf/uiSchema/RootUISchemas.ts","rjsf/widgets/MultiSelectAutoComplete.tsx","rjsf/widgets/SingleSelectAutoComplete.tsx","themes/rjsfTheme.ts","components/form/FormControlsComponent.tsx","components/form/FormContainer.tsx","components/spinner/Spinner.tsx","components/photo/PhotoContainer.tsx","components/activity/ActivityComponent.tsx","utils/FunctionUtils.ts","rjsf/business-rules/constants/herbicideApplicationRates.ts","rjsf/business-rules/customValidation.ts","rjsf/business-rules/populateCalculatedFields.ts","utils/saveRetrieveFormData.ts","utils/geometryHelpers.ts","features/home/activity/ActivityPage.tsx","rjsf/business-rules/customErrorTransformer.ts","components/Footer/Footer.tsx","hooks/useKeycloakWrapper.tsx","components/tabs/TabsContainer.tsx","features/home/HomeLayout.tsx","components/common/RecordTable.tsx","features/home/map/MapContextMenu.tsx","components/points-of-interest/IAPP/IAPP-Site.tsx","components/points-of-interest/ActivitiesPOI/ActivitiesPOI.tsx","components/trip/TripStepStatus.tsx","features/home/map/MapPage.tsx","components/activities-search-controls/ActivitiesFilter.tsx","components/search/MetabaseSearch.tsx","components/map-buddy-components/KMLUpload.tsx","components/point-of-interest-search/PointOfInterestFilter.tsx","components/trip/TripDataControls.tsx","components/trip/TripNamer.tsx","features/home/plan/PlanPageHelpers.tsx","features/home/plan/PlanPage.tsx","features/home/references/ReferencesActivityPage.tsx","components/activities-list/CachedRecordsList.tsx","features/home/references/ReferencesPage.tsx","hooks/useQuery.ts","utils/getActivity.ts","features/home/search/BulkEditActivitiesPage.tsx","interfaces/useInvasivesApi-interfaces.ts","components/activity/StepperComponent.tsx","features/home/activity/TreatmentCreationStepperPage.tsx","features/home/activity/ObservationCreationStepperPage.tsx","features/home/search/SearchActivityPage.tsx","features/home/landing/LandingPage.tsx","components/search/FilterControlsContainer.tsx","components/search/paginationUtils.ts","components/search/PaginationControlsContainer.tsx","components/activities-list/ActivityListItem.tsx","components/activities-list/SearchActivitiesList.tsx","components/search/SearchResultsList.tsx","features/home/search/SearchPage.tsx","utils/AppRoute.tsx","utils/PrivateRoute.tsx","features/home/HomeRouter.tsx","contexts/authStateContext.tsx","layouts/PublicLayout.tsx","utils/KeycloakEventHandler.ts","layouts/AuthLayout.tsx","pages/misc/AccessDenied.tsx","pages/misc/NotFoundPage.tsx","AppRouter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","Role","DB_SCHEMA","process","REACT_APP_DB_SCHEMA","DatabaseContext","React","createContext","database","resetDatabase","DatabaseContextProvider","props","useState","databaseContext","setDatabaseContext","setupDatabase","useCallback","a","db","PouchDB","plugin","PouchDBFind","PouchDBUpsert","window","require","adapter","iosDatabaseLocation","androidDatabaseProvider","default","createIndex","index","ddoc","fields","destroy","cleanupDatabase","close","useEffect","callCleanupDatabase","Provider","value","children","DatabaseChangesContext","DatabaseChangesContextProvider","useContext","databaseChanges","setDatabaseChanges","changesListener","setChangesListener","lastChangeTimestamp","setLastChangeTimestamp","buffer","setBuffer","bufferTimeout","setBufferTimeout","addChange","change","now","moment","valueOf","clearTimeout","setTimeout","setupDatabaseChanges","listener","changes","live","since","on","final","error","cleanupDatabaseChanges","cancel","NetworkContext","NetworkContextProvider","networkContext","setNetworkContext","Network","removeAllListeners","getStatus","status","addListener","appTheme","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","typography","fontFamily","join","overrides","MuiTypography","h1","fontSize","h2","h3","h4","h5","h6","MuiCircularProgress","root","position","top","left","height","width","marginLeft","marginTop","MuiContainer","maxWidth","margin","MuiTooltip","tooltip","color","backgroundColor","ActivityType","ActivitySubtype","ALL_ROLES","ADMIN","MANAGER","DATA_EDITOR","ActivityStatus","ActivitySyncStatus","FormValidationStatus","DocType","ActivityTypeIcon","Observation","Assignment","AnimalActivity","Transect","Treatment","Build","Monitoring","Visibility","Dispersal","API_HOST","REACT_APP_API_HOST","API_PORT","REACT_APP_API_PORT","API_URL","useInvasivesApi","api","keycloak","useKeycloak","useMemo","axios","create","headers","Authorization","token","baseURL","useApi","getActivities","activitiesSearchCriteria","post","data","deleteActivities","activityIds","delete","params","paramsSerializer","qs","stringify","undeleteActivities","getPointsOfInterest","pointsOfInterestSearchCriteria","getMetabaseQueryResults","metabaseQueriesSearchCriteria","get","metabaseQueryId","activity_ids","length","search_feature","activities","point_of_interest_ids","points_of_interest","console","log","rows","createMetabaseQuery","metabaseQueriesCreateCriteria","getMetabaseQueryOptions","options","getActivityById","activityId","getMedia","mediaKeys","key","createActivity","activity","updateActivity","put","getApiSpec","getCachedApiSpec","upsert","getSpeciesDetails","species","notifyError","message","_id","uuidv4","docType","NOTIFICATION","notificationType","text","acknowledged","dateCreated","Date","notifySuccess","notifyWarning","ActivityListDate","classes","Divider","flexItem","orientation","Grid","item","md","Typography","className","activitiyListItem_Typography","format","dateUpdated","getErrorMessages","errorCode","action","errorMessage","getFieldsToCopy","activityData","activitySubtypeData","activitySubtype","activityDataToCopy","activitySubtypeDataToCopy","activity_date_time","includes","invasive_plant_code","invasive_plants","latitude","longitude","reported_area","generateActivityPayload","formData","geometry","activityType","ACTIVITY","NEW","sync","ready","NOT_SYNCED","formStatus","NOT_VALIDATED","addNewActivityToDB","activity_data","doc","addClonedActivityToDB","clonedRecord","_rev","addLinkedActivityToDB","linkedRecord","activity_subtype_data","Treatment_ChemicalPlant","activity_id","activity_type_data","geoserver","WarningDialog","isOpen","heading","handleAgree","handleDisagree","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","onClick","autoFocus","useStyles","makeStyles","theme","newActivityButtonsRow","marginRight","marginBottom","syncSuccessful","success","syncFailed","activitiyListItem","display","flexDirection","border","borderColor","grey","borderRadius","activityListItem_Grid","breakpoints","down","formControl","minWidth","ActivityListItem","invasivesApi","setSpecies","getSpeciesFromActivity","speciesCode","codeResults","code_description","isDisabled","SYNC_SUCCESSFUL","container","spacing","Box","overflow","textOverflow","title","split","variant","Checkbox","disabled","checked","onChange","event","preventDefault","stopPropagation","isChecked","target","toggleActivitySyncReadyStatus","ActivityList","history","useHistory","databaseChangesContext","docs","setDocs","docToDelete","setDocToDelete","isWarningDialogOpen","setIsWarningDialogOpen","updateActivityList","find","selector","use_index","activityResult","removeActivity","remove","setActiveActivityAndNavigateToActivityPage","APPSTATE","appStateDoc","activeActivity","push","pathname","search","state","observation","sortedActivities","sort","b","List","workflowFunction","Paper","ListItem","button","ListItemIcon","SvgIcon","clsx","SYNC_FAILED","component","ListItemSecondaryAction","DeleteForever","ActivitiesList","syncing","setSyncing","setIsDisable","setWorkflowFunction","specialFunctions","label","type","Transect_FireMonitoring","Transect_Vegetation","Transect_BiocontrolEfficacy","syncActivities","VALID","$ne","errorMessages","created_timestamp","activity_type","activity_subtype","media","photos","photo","file_name","filepath","encoded_file","dataUrl","form_data","activityDoc","JSON","alert","response","forEach","err","mb","justifyContent","FormControl","InputLabel","Select","startIcon","Sync","Add","Observation_PlantTerrestrial","Observation_PlantAquatic","Activity_AnimalTerrestrial","Activity_AnimalAquatic","Activity_BiologicalDispersal","ActivitiesPage","Container","AddButton","mappings","plus","IconButton","icon","otherProps","size","isMultiSelect","utils","getDefaultRegistry","ArrayFieldTitle","TitleField","idSchema","required","$id","ArrayFieldDescription","DescriptionField","description","DefaultArrayItem","btnStyle","flex","paddingLeft","paddingRight","fontWeight","alignItems","xs","elevation","p","hasToolbar","hasMoveUp","hasMoveDown","tabIndex","style","readonly","onReorderClick","hasRemove","onDropIndexClick","DefaultFixedArrayFieldTemplate","uiSchema","schema","items","canAdd","onAddClick","DefaultNormalArrayFieldTemplate","direction","justify","mt","ArrayFieldTemplate","registry","rootSchema","ADDITIONAL_PROPERTY_FLAG","WrapIfAdditional","keyLabel","hasOwnProperty","fullWidth","Input","defaultValue","name","onBlur","undefined","onKeyChange","onDropPropertyClick","FieldTemplate","classNames","rawErrors","displayLabel","rawDescription","dense","disablePadding","i","disableGutters","FormHelperText","rawHelp","canExpand","ObjectFieldTemplate","properties","element","sm","lg","xl","content","Tooltip","enterTouchDelay","placement","float","FourColumnStyle","ThreeColumnStyle","TwoColumnStyle","Persons","person_name","WaterbodyData","waterbody_name_gazetted","waterbody_name_local","waterbody_type","waterbody_use","WaterQuality","water_sample_depth","secchi_depth","water_colour","TransectLine","transect_line_id","transect_comment","start_x_utm","start_y_utm","end_x_utm","end_y_utm","transect_length","transect_bearing","TransectData","utm_zone","transect_start_date_time","transect_end_date_time","project_number","surveyor1_name","surveyor2_name","field_recorder_name","research_trial_code","realm_code","site_aspect","site_aspect_variability","site_slope","site_slope_variability","site_elevation","cloud_cover_code","beaufort_wind_code","precipitation_code","burn_severity_code","ecological_moisture_regime_code","mesoslope_position_code","site_surface_shape_code","soil_properties_code","surface_substrate_code","site_activity_disturbance","disturbance_site_defunct","disturbance_condition_code","disturbance_type_code","invasive_plant_change_code","target_plant_change_code","treatment_seeded","density_count_type_code","trace_plants","growth_pattern","frame_size_code","biocontrol_noted_code","photoplot_start","photoplot_end","photoplot_aerials","photoplot_full_25m","plot_location","FireMonitoringTransectPoints","sample_point_id","offset_distance","utm_x","utm_y","veg_transect_sampler","veg_transect_recorder","veg_transect_native_forbs","veg_transect_grasses","veg_transect_bare_ground","veg_transect_shrubs","veg_transect_bryophytes","veg_transect_litter","FireMonitoringTransectLines","transect_line","fire_monitoring_transect_points","transect_data","fire_monitoring_transect_lines","VegetationTransectPoints","VegetationTransectSpeciesPercentCover","percent_covered","lumped_species","lumped_species_type","custom_species","custom_species_type","VegetationTransectSpeciesNumberPlants","number_plants","VegetationTransectSpeciesDaubenmire","daubenmire_classification","VegetationTransectPointsPercentCover","vegetation_transect_points","vegetation_transect_species","VegetationTransectPointsNumberPlants","VegetationTransectPointsDaubenmire","VegetationTransectLines","vegetation_transect_points_percent_cover","vegetation_transect_points_number_plants","vegetation_transect_points_daubenmire","vegetation_transect_lines","BiocontrolEfficacyTransectLines","biocontrol_efficacy_transect_points","veg_transect_target","veg_transect_other_ips","veg_total_percentage","transect_invasive_plants","invasive_plant_density_code","invasive_plant_distribution_code","soil_texture_code","linear_infestation","biological_agent_code","biocontrol_efficacy_transect_lines","observation_type_code","observation_persons","observation_plant_terrestrial_data","specific_use_code","slope_code","aspect_code","research_detection_ind","well_ind","special_care_ind","plant_life_stage_code","waterbody_data","water_level_management","substrate_type","tidal_influence","comment","project_data","surveyors","survey_type","terrain_characteristics","adjacent_land_use","inflow_permanent","inflow_other","outflow","shoreline_types","water_quality","provincial_edrr","plant_health_code","plant_seed_stage_code","voucher_specimen_collected","e_dna_sample","genetic_structure_collected","genetic_sample_id","negative_obs_ind","BaseUISchemaComponents","invasive_aquatic_animals","invasive_animal_code","early_detection_rapid_resp_ind","life_stage","sex","reproductive_maturity","length_method","weight","behaviour","condition","captured","disposed","specimen_id","sample_collected","sample_id","sample_type","age_analysis","genetic_analysis","site_information","reach_number","watershed_code","waterbody_id","additional_site_features","setting","aspect","hillslope_coupling","shoreline_type","cover","recreational_features","number_inlets","inlet_type","number_outlets","outlet_type","access","access_air","access_road","access_auto","access_off_road","access_off_road_distance","access_trail","access_trail_distance","access_closest_community","access_water_access","comments","aquatic_flora","emergent_vegetation","emergent_vegetation_dominant_species","submergent_vegetation","submergent_vegetation_dominant_species","floating_algae_present","lake_bathymetry","littoral_area","max_depth","benchmark","max_water_level","benchmark_type","water_sample","water_sample_requisition_number","surface_water_temperature","field_ph","turbidity","ice_depth","conductivity_profile","depth","dissolved_oxygen","temperature","conductivity","thermocline","survey_data","survey_design","survey_start_date_time","survey_end_date_time","survey_details","treatment_data","treatment_start_date_time","treatment_end_date_time","permit_number","monitoring_data","monitoring_start_date_time","monitoring_end_date_time","monitoring_results","net_trap_specifications","haul_number","date_time_in","date_time_out","net_trap_type","mesh_size","mesh_description","zone","habitat","electrofisher_specifications","passes","one_pass_time","enclosure","voltage","frequency","pulse","make","model","plankton_tow_sample","tows","date_time","plankton_tow_type","tow_depth_length","volume_sampled","containers","preserved_sample_ph","arrival_sample_ph","preservative_type","preservation_concentration","other_species","veliger_positive","buffered","substrate_sample","date_installed","date_monitored","waterbody","site_location","water_temperature","water_column_ph","location_description","microscopy_species","adult_suspected_presence","shoreline_surveys","target_species","weather_conditions","sampling_distance","sampling_location_lat","sampling_location_lng","species_present","density","diameter_largest_individual","other_species_found","edna","habitat_alteration","chemical","biological","Dispersal_BiologicalDispersal","monitoring_organization","biological_agent_presence_code","count_duration","plant_count","biological_agent_count","applicator1_name","applicator2_name","treatment_organization","phen_transect_sampler","phen_transect_recorder","phen_transect_seedlings","phen_transect_rosettes","phen_transect_bolting","phen_transect_flowering","phen_transect_seeds","phen_transect_senescent","phen_total_plants","phen_number_stems","phen_tallest_1","phen_tallest_2","phen_tallest_3","phen_tallest_4","phen_level_se","phen_level_ro","phen_level_bo","phen_level_fl","phen_level_sf","phen_level_sc","phen_total_percentage","treatment_location","treatment_persons","Treatment_MechanicalPlant","mechanical_method_code","mechanical_disposal_code","Treatment_MechanicalPlant_BulkEdit","Treatment_BiologicalPlant","treatment_issues_code","classified_area_code","release_quantity","mortality","agent_source","biological_agent_stage_code","bioagent_maturity_status_code","Treatment_BiologicalPlant_BulkEdit","observer_first_name","observer_last_name","efficacy_code","Monitoring_BiologicalTerrestrialPlant","agent_count","agent_destroyed_ind","legacy_presence_ind","foliar_feeding_damage_ind","root_feeding_damage_ind","oviposition_marks_ind","eggs_present_ind","larvae_present_ind","pupae_present_ind","adults_present_ind","tunnels_present_ind","biological_agent_spread","ProjectCode","Herbicide","liquid_herbicide_code","herbicide_amount","mix_delivery_rate","application_rate","dilution","specific_treatment_area","tank_volume","Jurisdictions","jurisdiction_code","applicator1_license","applicator2_license","pesticide_employer_code","pesticide_user_license_number","chemical_method_code","humidity","pest_management_plan","herbicide","wind_speed","wind_direction_code","pesticide_use_permit_PUP","signage_on_site","Treatment_ChemicalPlant_BulkEdit","Activity","invasive_species_agency_code","jurisdictions","general_comment","access_description","project_code","UISchemaComponents","MonitoringActivity","Activity_BulkEdit","RootUISchemas","Activity_Observation_PlantTerrestrial","Activity_Observation_PlantTerrestrial_BulkEdit","Activity_Observation_PlantAquatic","Activity_AnimalActivity_AnimalTerrestrial","Activity_AnimalActivity_AnimalAquatic","Activity_Transect_FireMonitoring","Activity_Transect_Vegetation","Activity_Transect_BiocontrolEfficacy","Activity_Dispersal_BiologicalDispersal","Activity_Treatment_ChemicalPlant","Activity_Treatment_ChemicalPlant_BulkEdit","Activity_Treatment_MechanicalPlant","Activity_Treatment_MechanicalPlant_BulkEdit","Activity_Treatment_BiologicalPlant","Activity_Treatment_BiologicalPlant_BulkEdit","Activity_Monitoring_ChemicalTerrestrialAquaticPlant","Activity_Monitoring_MechanicalTerrestrialAquaticPlant","Activity_Monitoring_BiologicalTerrestrialPlant","checkedIcon","MultiSelectAutoComplete","enumDisabled","enumOptions","Autocomplete","multiple","autoHighlight","filter","option","getOptionSelected","disableCloseOnSelect","filterOptions","createFilterOptions","limit","getOptionLabel","newValue","renderOption","selected","indexOf","renderInput","TextField","placeholder","SingleSelectAutoComplete","optionValueLabels","optionValues","values","startingValue","setValue","inputValue","setInputValue","autoComplete","autoSelect","blurOnSelect","openOnFocus","selectOnFocus","clearOnEscape","disableClearable","clearOnBlur","onLoad","reason","onInputChange","newInputValue","rjsfTheme","MuiTextField","FormControlsComponent","hideCheckFormForErrors","onSubmit","onCopy","sessionStorage","getItem","onPaste","FormContainer","schemas","setSchemas","formRef","setFormRef","components","CircularProgress","submit","copyFormData","pasteFormData","ThemeProvider","widgets","liveValidate","showErrorList","validate","customValidation","transformErrors","customErrorTransformer","ErrorList","onFormChange","onError","onFormSubmitError","onFormSubmitSuccess","ref","form","setParentFormRef","Fragment","Spinner","viewBox","cx","cy","r","fill","stroke","strokeWidth","strokeLinecap","getZIndex","coords","coordinates","zIndex","reduce","max","point","min","host","location","hostname","test","MapContainer","mapRef","useRef","layerRef","L","drawnItems","setDrawnItems","geoKeys","setGeoKeys","offlineing","setOfflineing","getSaveControl2","layerToSave","savetiles","zoomlevels","confirm","layer","successCallback","setMapBounds","extent","bounds","_northEast","lat","lng","_southWest","current","fitBounds","currentZoom","setCurrentZoom","initMap","mapId","zoomControl","setView","getZoom","contextMenuState","setContextMenuState","latlng","addControl","locate","flyTo","iconElementTag","showDrawControls","drawControlOptions","Draw","draw","marker","circle","edit","featureGroup","addDrawControls","esriBaseLayer","offline","maxZoom","maxNativeZoom","attribution","esriPlacenames","bcBaseLayer","useCache","cacheMaxAge","addTo","basemaps","nRDistricts","opacity","tms","motiDistricts","motiRegions","bec","wells","streams","wetlands","riso","ipma","uwr","nationalParks","aggregate","ownership","municipalities","regionalDistricts","rfi","ogma","wha","fsw","overlays","Placenames","Wells","Streams","Wetlands","Ownership","Municipalites","Biogeoclimatic","addLayer","esriBaseLayerControl","_map","baseLayerControlOptions","overlayControlOptions","bcBaseLayerControl","layers","getBounds","extentState","setExtent","feature","aGeo","toGeoJSON","layerType","radius","getRadius","isRectangle","convertLineStringToPoly","geometryState","setGeometry","prompt","turf","parseInt","units","steps","result","features","getLayers","_mRadius","geo","allGeosFeatureCollection","bboxCoords","setGeometryMapBounds","newGeoKeys","collection","markerStyle","pointToLayer","latLng","onEachFeature","interactiveGeometryState","interactiveGeometry","interactObj","recordDocID","hash","updated","popUpComponent","table","f","loc","center","uploadedSpatial","setLatLng","setContent","openOn","onClickCallback","_layers","removeLayer","updateMapOnGeometryChange","dropSpatial","setDropSpatial","addKML","file","replace","xmlstring","xml","dom","DOMParser","parseFromString","geojson","kml","bbox","corner1","corner2","flyToBounds","spatial","_","SPATIAL_UPLOADS","storeLayers","x1","getWest","y1","getSouth","x2","getEast","y2","getNorth","url","OFFLINE_DATA","control","_saveTiles","onDragEnter","dataTransfer","onDragOver","onDrop","files","padding","outline","outlineOffset","onDragLeave","cursor","src","transform","PhotoContainer","getPhoto","useCamera","takePhoto","resultType","CameraResultType","DataUrl","source","CameraSource","Camera","quality","cameraPhoto","fileName","getTime","photoState","setPhotos","deletePhotos","deletePhoto","reducedPhotos","Card","CardMedia","CardActions","AddAPhoto","ActivityComponent","useWatchPosition","watchPosition","currentPosition","startWatch","clearWatch","getPosition","useCurrentPosition","workingPolyline","setWorkingPolyline","startTrack","enableHighAccuracy","endTrack","line","polygon","newPolyline","userTrack","parse","from","to","distance","returnVal","fromAsPoint","toAsPoint","dir","isGreaterDistanceThan","cloneActivityButton","linkedActivity","Accordion","AccordionSummary","expandIcon","ExpandMore","aria-controls","AccordionDetails","formContainer","photoContainer","defaultExpanded","mapContainer","debounced","delay","fn","timerId","args","HerbicideApplicationRates","getCustomValidator","validators","errors","validator","getAreaValidator","areaLimit","Number","POSITIVE_INFINITY","__errors","addError","getDuplicateInvasivePlantsValidator","invasivePlants","plantCodeList","invasivePlant","Set","getTemperatureValidator","getWindValidator","getInvasivePlantsValidator","linkedActivityInvasivePlants","some","lip","getHerbicideApplicationRateValidator","getTransectOffsetDistanceValidator","transectLinesMatchingKeys","isVegetationTransect","transectLineObj","lineIndex","transectLineLength","transectPointsMatchingKeys","transectPoint","pointIndex","errorState","determineErrorStateOnTransectPoint","populateHerbicideDilutionAndArea","newSubtypeData","herbicides","updatedHerbicides","herbicideToUpdate","parseFloat","toFixed","populateTransectLineAndPointData","updatedActivitySubtypeData","isBiocontrolEfficacyTransect","isBiocontrolDispersal","transectLinesList","updatedTransectLinesList","transectLineObjToUpdate","transectLine","deltaX","deltaY","angle","Math","atan","PI","hypot","transectPointsList","updatedTransectPointsList","transectPointObj","transectPointToUpdate","vegetationTransectPoints","ratio","utmX","utmY","retrieveFormDataFromSession","newActivityData","calculateGeometryArea","totalArea","pow","calculateLatLng","geom","firstCoord","centerPoint","pxToRem","fontWeightRegular","ActivityPage","isLoading","setIsLoading","setLinkedActivity","isCloned","setIsCloned","setDoc","docId","getDefaultFormDataValues","saveGeometry","areaOfGeometry","updatedFormData","dbDoc","EDITED","saveExtent","newExtent","savePhotos","photosArr","setFormHasErrors","updatedFormValues","setState","schemaValidationErrors","schemaValidationErrorSchema","formDataToPaste","formDataToCopy","setItem","saveFormDataToSession","getActivityResultsFromDB","appStateResults","activityResults","setActiveActivity","updatedActivity","handleRecordLinking","updatedDoc","linkedRecordId","linkedRecordActivityResults","getActivityData","setObservation","totalPercent","jurisdiction","FileCopy","addedActivity","Footer","defaultConnectionStatusString","networkStatusString","setNetworkStatusString","tabs","connectionStatus","connected","connectionStatusString","connectionType","AppBar","Toolbar","Tabs","scrollButtons","tab","Tab","useKeycloakWrapper","userInfo","getRoles","resourceAccess","roles","obj","username","preferred_username","displayName","getDisplayName","firstName","given_name","getFirstName","lastName","family_name","getLastName","email","sub","hasRole","validRoles","Array","isArray","role","pointer","alignment","invbclogo","TabsContainer","tabConfig","setTabConfig","getActiveTab","activeTabNumber","path","childPaths","pathToMatch","activeTab","setActiveTab","tabsUserHasAccessTo","isMobileNoNetwork","Home","Search","Explore","Bookmarks","HomeWork","Map","flex-direction","alt","HomeLayout","setIsOpen","notification","setNotification","notificationCount","setNotificationCount","addNotificationsToPage","notifications","note","Collapse","timeout","in","Alert","severity","aria-label","Badge","badgeContent","MarkunreadMailbox","Close","bottom","right","bgcolor","snakeToPascal","string","spaces","snake","substr","charAt","toUpperCase","slice","visuallyHidden","clip","paper","textAlign","tableLayout","tableRow","verticalAlign","tableContainer","cell","whiteSpace","borderBottom","wideCell","missingValue","fontStyle","header","dropdown","paddingBottom","paddingTop","dropdownCol","openRow","closedRow","emptyTable","numberCell","align","dateCell","useToolbarStyles","highlight","lighten","toolbar","getValue","row","valueMap","numeric","RecordTableHead","onSelectAllClick","order","orderBy","numSelected","rowCount","onRequestSort","pageHasDropdown","enableSelection","enableTooltips","TableHead","TableRow","TableCell","indeterminate","inputProps","headCell","sortDirection","TableSortLabel","active","defaultOrder","property","arrow","contextMenuType","RecordTableToolbar","selectedRows","tableName","enableFiltering","actions","bulkActions","isValid","bulkCondition","displayInvalid","invalidError","FilterList","RecordTableCell","overrideProps","val","scope","String","trim","RecordTableRow","keyField","isExpanded","toggleExpanded","isSelected","toggleSelected","hasOverflow","actionStyle","renderedDropdown","labelId","rowActions","rowCondition","rowHasDropdown","hover","aria-checked","KeyboardArrowUp","KeyboardArrowDown","colSpan","RecordTable","startingOrder","dropdownLimit","onToggleExpandRow","overflowDropdown","overflowLimit","expandable","startExpanded","startingRowsPerPage","rowsPerPageOptions","pagination","densePadding","padEmptyRows","rowActionStyle","tableSchemaType","schemasLoaded","setSchemasLoaded","headerOverrides","headerSchema","anyOf","enum","enabled","selectedIds","activityIdsToEdit","Edit","bulkAction","rowAction","every","subtype","Delete","startingOrderBy","setOrder","setOrderBy","page","setPage","rowsPerPage","setRowsPerPage","expandedRows","setExpandedRows","setSelected","tableSchemaInput","apiSpecResponse","schemaTypeList","prevSchema","schemaType","matches","orderHeader","col","pageRows","ascending","valueIndexPairs","stableSort","renderedDropdowns","verboseOverflows","rendered","showPagination","handleRequestSort","handleSelectAllClick","newSelecteds","selectRow","prevSelected","selectedIndex","newSelected","concat","handleChangePage","newPage","handleChangeRowsPerPage","emptyRows","toggleExpandedRow","newExpandedRows","rowKey","CachedTableHead","loading","TableContainer","Table","TableBody","TablePagination","count","onChangePage","onChangeRowsPerPage","IAPPSite","record","point_of_interest_payload","site","point_of_interest_data","point_of_interest_type_data","surveys","mechanical_treatments","chemical_treatments","biological_treatments","biological_dispersals","ifApplicable","site_id","created_date_on_device","map_sheet","distribution","mechanical_method_code_title","mechanical_method","project_code_title","monitoring","monitor","j","treatment_id","ActivitiesPOI","containerProps","Transition","forwardRef","TransitionProps","Slide","TripStatusCode","appBar","contextMenuItem","contextMenuIcon","MenuItem","onSelectFunction","ListItemText","MapContextMenu","savePoint","POINT_OF_INTEREST","fullScreen","handleClose","TransitionComponent","edge","newPointAsGeo","mainGrid","mapGridItemExpanded","mapGridItemShrunk","popOutGridItemExpanded","popOutGridItemShrunk","popOutComponent","background","PointOfInterestPopUp","PopOutComponent","buttonCloseCallback","MapPage","setInteractiveGeometry","selectedInteractiveGeometry","setSelectedInteractiveGeometry","isReadyToLoadMap","setIsReadyToLoadMap","showPopOut","setShowPopOut","formActivityData","setFormActivityData","geoUpdateTimestamp","setGeoUpdateTimestamp","handleGeoClick","results","getEverythingWithAGeo","$in","REFERENCE_ACTIVITY","REFERENCE_POINT_OF_INTEREST","OFFLINE_EXTENT","geos","interactiveGeos","coordinatesString","recordDocType","selectedGeo","activityRecordsChoice","ActivityDataFilter","activityChoices","setActivityChoices","getActivityChoicesFromTrip","trip_ID","tripDoc","saveChoices","newActivityChoices","updateActivityChoice","updatedActivityChoices","DateFnsUtils","activityChoice","Switch","includePhotos","includeForms","autoOk","startDate","KeyboardButtonProps","endDate","copy","splice","deleteActivityChoice","newActivity","metabaseRecordsChoice","metabaseSearchField","metabaseFilter","metabaseAddButton","MetabaseSearch","metabaseChoices","setMetabaseChoices","metabaseOptions","setMetabaseOptions","getMetabaseChoicesFromTrip","metabaseQueryOptionsLastChecked","diff","metabaseQueryOptions","newMetabaseChoices","updateMetabaseChoice","updatedMetabase","updatedMetabaseChoices","metabaseChoice","metabaseQueryName","deleteMetabaseChoice","newMetabase","KMLUpload","aFile","setAFile","saveKML","input","xmlString","fileAsString","DOMFromXML","geoFromDOM","dropzoneText","pointOfInterestChoice","PointOfInterestDataFilter","pointOfInterestChoices","setPointOfInterestChoices","getPointOfInterestChoicesFromTrip","newPointOfInterestChoices","updatePointOfInterestChoice","updatedPointOfInterest","updatedPointOfInterestChoices","pointOfInterestType","deletePointOfInterestChoice","newPointOfInterest","controlsGrid","TripDataControls","trip","setTrip","fetching","setFetching","bulkUpsert","upserts","allDocs","include_docs","allDocsFetch","newUpserts","modifiedDocs","newDocs","resultDocs","bulkDocs","getPhotos","media_keys","getTrip","TRIP","fetchActivities","numberActivitiesFetched","setOfChoices","activitySearchCriteria","date_range_start","date_range_end","existingDoc","trip_IDs","activity_payload","fetchPointsOfInterest","numberPointsOfInterestFetched","pointOfInterestSearchCriteria","point_of_interest_type","point_of_interest_id","pointOfInterestSubtype","point_of_interest_subtype","fetchMetabaseQueries","countActivities","countPois","querySearchCriteria","metabaseQueryNames","responseRows","deleteTripAndFetch","all","finally","catch","TripStepStatus","statusCode","initial","TripNamer","setName","getNameFromTrip","saveInput","newName","persistenceStep","deleteTripRecords","$and","$elemMatch","$eq","toString","docsToDelete","docsToUpdate","isDocToDelete","_deleted","newTripIDs","accordionSummary","tripList","tripAccordionGridItem","layerPicker","activityRecordList","pointOfInterestList","activityRecordQueryParmsRow","tripStorageUsageBar","totalStorageUsageBar","tripGrid","tripAccordion","PlanPage","workingTripID","newTripID","setNewTripID","trips","setTrips","tripsLoaded","setTripsLoaded","getExtent","PLAN_PAGE_EXTENT","getTrips","trip_name","num_activities","num_POI","helperGetMaxTripID","trip_id","$gte","initialLoad","planPageExtentDoc","addTrip","newID","stepState","expanded","SingleTrip","setStepState","getStateFromTrip","saveState","newState","helperCloseOtherAccordions","stepNumber","expanded2","helperStepDoneOrSkip","TripStep","helpText","additionalText","tripStepDetailsClassName","stepStatus","stepAccordionOnChange","doneButtonCallBack","alignContent","m","alignSelf","mapMemo","trashTrip","tripName","random","buttons","ReferencesActivityPage","urlParams","useParams","activitiesContent","activityList","flexWrap","activityStandardMapping","output","substring","geoColors","reference_point_of_interest","selected_record","ObservationsTable","Activity_Observation_PlantTerrestial","create_treatment","observations","TreatmentsTable","create_monitoring","treatmentSubtype","Monitoring_ChemicalTerrestrialAquaticPlant","Monitoring_MechanicalTerrestrialAquaticPlant","MonitoringTable","Activity_Monitoring_ChemicalPlant","Activity_Monitoring_MechanicalPlant","Activity_Monitoring_BiologicalPlant","PointsOfInterestTable","CachedRecordsList","stateDocs","setLoading","metabaseQuerySubmitted","setMetabaseQuerySubmitted","toggleDocSelected","toggleSelectedFunction","wasPrevSelected","prevGeos","recordType","setSelectedPOIs","setSelectedObservations","setSelectedTreatments","setSelectedMonitorings","updateRecordList","deleted_timestamp","mapGeos","recordSubtype","docIdsWithinArea","iGeo","booleanIntersects","selectedObservations","treatments","selectedTreatments","monitorings","selectedMonitorings","pointsOfInterest","selectedPOIs","selectedActivities","selectedPoints","queryCreate","activity_query_id","activity_query_name","totalSelected","setSelectedGeneralized","setSelectedFunction","Check","ReferencesPage","useQuery","useLocation","getActivityByIdFromApi","getICreateOrUpdateActivity","SORT_DIRECTION","BulkEditActivitiesPage","setActivity","queryParams","parentFormRef","editActivityType","editActivitySubtype","setupActivityDataToEdit","updatedActivityFormData","Save","StepperComponent","activeStep","stepContent","Stepper","step","Step","StepLabel","buttonMarginRight","getStepContent","TreatmentCreationStepperPage","treatmentSubtypeToCreate","setTreatmentSubtypeToCreate","setActiveStep","prevStep","setPrevStep","observationGeos","setObservationGeos","observationSubtype","setObservationSubtype","formHasErrors","selectedObservationIds","oId","obsGeos","getGeometriesOfSelectedObservations","activityPayload","createNewObservation","handleTreatmentSubtypeClick","dropdownValue","setActiveActivityAndNavigate","ObservationCreationStepperPage","selectedObservationId","getObservation","SearchActivityPage","userInfoItemGrid","cardListItemGrid","cardWidth","LandingPage","setUserInfo","loadUserInfo","user","getCardData","subheading","footerText","CardContent","gutterBottom","planTripGIF","logout","FilterControlsContainer","handleStringArrayFilterChange","filterName","searchFilterCriteriaState","searchFilterCriteria","newSearchFilterCriteria","setSearchFilterCriteria","handleStringFilterChange","fieldset","FormLabel","FormGroup","mr","InputLabelProps","shrink","FormControlLabel","calculateTotalPages","totalItems","itemsPerPage","ceil","PaginationControlsContainer","currentPageState","currentPage","itemsPerPageState","formLabel","ToggleButtonGroup","exclusive","setItemsPerPage","handleLimitChange","ToggleButton","native","sortByState","sortBy","setSortBy","entries","sortByValues","entry","low","high","calculatePaginationLabel","Pagination","totalPages","defaultPage","showFirstButton","showLastButton","setCurrentPage","handlePaginationChange","multiSelect","flexBasis","SearchActivityListItem","dateReceived","SearchActivitiesList","edits","setEdits","navigateToSearchActivityPage","bulkEditIsDisabled","visibility","resultsBar","bulkButton","SearchResultsList","editsList","navigateToEditPage","go","SearchPage","speciesType","habitatType","setTotalItems","setTotalPages","searchResults","setSearchResults","setIsDisabled","handleSearch","startDateFilter","startOf","toISOString","endDateFilter","endOf","activityTypeFilter","sortColumn","sort_by","sort_direction","DESC","ASC","column_names","received_timestamp","AppRoute","Component","layout","keycloakConfig","rest","Layout","document","render","PrivateRoute","renderProps","authenticated","componentProps","referer","HomeRouter","getTitle","exact","AuthStateContext","AuthStateContextProvider","mainContent","PublicLayout","CssBaseline","Children","child","cloneElement","getKeycloakEventHandler","debug","AuthLayout","initConfig","LoadingComponent","onEvent","Consumer","context","warningIcon","emailLink","textDecoration","AccessDenied","emailSubject","encodeURIComponent","emailBody","emailHref","my","Warning","href","NotFoundPage","AppRouter","setLayout","setIsMobileNoNetwork","Capacitor","getPlatform","App","Keycloak","realm","clientId","flow","redirectUri","checkLoginIframe","appRouterProps","deviceInfo","Boolean","match","Device","Plugins","defineCustomElements","startApp","info","ReactDOM","getElementById","navigator","serviceWorker","registration","unregister","addEventListener","getInfo"],"mappings":"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","file":"static/js/main.b3d4589a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Plan Page.ad765c00.gif\";","var map = {\n\t\"./pwa-action-sheet.entry.js\": [\n\t\t908,\n\t\t59\n\t],\n\t\"./pwa-camera-modal-instance.entry.js\": [\n\t\t909,\n\t\t60\n\t],\n\t\"./pwa-camera-modal.entry.js\": [\n\t\t910,\n\t\t61\n\t],\n\t\"./pwa-camera.entry.js\": [\n\t\t911,\n\t\t62\n\t],\n\t\"./pwa-toast.entry.js\": [\n\t\t912,\n\t\t63\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 559;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./ion-action-sheet.entry.js\": [\n\t\t914,\n\t\t7\n\t],\n\t\"./ion-alert.entry.js\": [\n\t\t915,\n\t\t8\n\t],\n\t\"./ion-app_8.entry.js\": [\n\t\t916,\n\t\t9\n\t],\n\t\"./ion-avatar_3.entry.js\": [\n\t\t917,\n\t\t19\n\t],\n\t\"./ion-back-button.entry.js\": [\n\t\t918,\n\t\t20\n\t],\n\t\"./ion-backdrop.entry.js\": [\n\t\t919,\n\t\t45\n\t],\n\t\"./ion-button_2.entry.js\": [\n\t\t920,\n\t\t21\n\t],\n\t\"./ion-card_5.entry.js\": [\n\t\t921,\n\t\t22\n\t],\n\t\"./ion-checkbox.entry.js\": [\n\t\t922,\n\t\t23\n\t],\n\t\"./ion-chip.entry.js\": [\n\t\t923,\n\t\t24\n\t],\n\t\"./ion-col_3.entry.js\": [\n\t\t924,\n\t\t46\n\t],\n\t\"./ion-datetime_3.entry.js\": [\n\t\t925,\n\t\t12\n\t],\n\t\"./ion-fab_3.entry.js\": [\n\t\t926,\n\t\t25\n\t],\n\t\"./ion-img.entry.js\": [\n\t\t927,\n\t\t47\n\t],\n\t\"./ion-infinite-scroll_2.entry.js\": [\n\t\t928,\n\t\t48\n\t],\n\t\"./ion-input.entry.js\": [\n\t\t929,\n\t\t26\n\t],\n\t\"./ion-item-option_3.entry.js\": [\n\t\t930,\n\t\t27\n\t],\n\t\"./ion-item_8.entry.js\": [\n\t\t931,\n\t\t28\n\t],\n\t\"./ion-loading.entry.js\": [\n\t\t932,\n\t\t29\n\t],\n\t\"./ion-menu_3.entry.js\": [\n\t\t933,\n\t\t30\n\t],\n\t\"./ion-modal.entry.js\": [\n\t\t934,\n\t\t10\n\t],\n\t\"./ion-nav_2.entry.js\": [\n\t\t935,\n\t\t16\n\t],\n\t\"./ion-popover.entry.js\": [\n\t\t936,\n\t\t11\n\t],\n\t\"./ion-progress-bar.entry.js\": [\n\t\t937,\n\t\t31\n\t],\n\t\"./ion-radio_2.entry.js\": [\n\t\t938,\n\t\t32\n\t],\n\t\"./ion-range.entry.js\": [\n\t\t939,\n\t\t33\n\t],\n\t\"./ion-refresher_2.entry.js\": [\n\t\t940,\n\t\t13\n\t],\n\t\"./ion-reorder_2.entry.js\": [\n\t\t941,\n\t\t18\n\t],\n\t\"./ion-ripple-effect.entry.js\": [\n\t\t942,\n\t\t49\n\t],\n\t\"./ion-route_4.entry.js\": [\n\t\t943,\n\t\t34\n\t],\n\t\"./ion-searchbar.entry.js\": [\n\t\t944,\n\t\t35\n\t],\n\t\"./ion-segment_2.entry.js\": [\n\t\t945,\n\t\t36\n\t],\n\t\"./ion-select_3.entry.js\": [\n\t\t946,\n\t\t37\n\t],\n\t\"./ion-slide_2.entry.js\": [\n\t\t947,\n\t\t50\n\t],\n\t\"./ion-spinner.entry.js\": [\n\t\t948,\n\t\t15\n\t],\n\t\"./ion-split-pane.entry.js\": [\n\t\t949,\n\t\t51\n\t],\n\t\"./ion-tab-bar_2.entry.js\": [\n\t\t950,\n\t\t38\n\t],\n\t\"./ion-tab_2.entry.js\": [\n\t\t951,\n\t\t17\n\t],\n\t\"./ion-text.entry.js\": [\n\t\t952,\n\t\t39\n\t],\n\t\"./ion-textarea.entry.js\": [\n\t\t953,\n\t\t40\n\t],\n\t\"./ion-toast.entry.js\": [\n\t\t954,\n\t\t41\n\t],\n\t\"./ion-toggle.entry.js\": [\n\t\t955,\n\t\t14\n\t],\n\t\"./ion-virtual-scroll.entry.js\": [\n\t\t956,\n\t\t52\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 564;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./ion-icon.entry.js\": [\n\t\t957,\n\t\t67\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 566;\nmodule.exports = webpackAsyncContext;","module.exports = __webpack_public_path__ + \"static/media/InvasivesBC_Icon.26be79d8.svg\";","export enum Role {\n  ADMIN = 'admin',\n  MANAGER = 'manager',\n  DATA_EDITOR = 'data-editor'\n}\n\nexport const ALL_ROLES = [Role.ADMIN, Role.MANAGER, Role.DATA_EDITOR];\n","import PouchDB from 'pouchdb-core';\nimport PouchDBFind from 'pouchdb-find';\nimport PouchDBUpsert from 'pouchdb-upsert';\nimport React, { useEffect, useState, useCallback } from 'react';\n\nconst DB_SCHEMA = process.env.REACT_APP_DB_SCHEMA || 'invasivesbc';\n\nexport type IDatabaseContext = {\n  database: PouchDB.Database<any>;\n  resetDatabase: () => void;\n};\n\nexport const DatabaseContext = React.createContext<IDatabaseContext>({ database: null, resetDatabase: () => {} });\n\n/**\n * Provides access to the database and to related functions to manipulate the database instance.\n *\n * @param {*} props\n */\nexport const DatabaseContextProvider: React.FC = (props) => {\n  const [databaseContext, setDatabaseContext] = useState<IDatabaseContext>({ database: null, resetDatabase: () => {} });\n\n  /**\n   * Create the database using mobile plugins/settings.\n   */\n  const createMobileDatabase = (): PouchDB.Database<any> => {\n    PouchDB.plugin(require('pouchdb-adapter-cordova-sqlite')); // adds mobile adapter\n\n    return new PouchDB(DB_SCHEMA, {\n      adapter: 'cordova-sqlite',\n      // See https://www.npmjs.com/package/cordova-sqlite-storage for details on the below options\n      iosDatabaseLocation: 'default',\n      androidDatabaseProvider: 'system'\n    } as any);\n  };\n\n  /**\n   * Create the database using standard (non-mobile) plugins/settings.\n   */\n  const createDatabase = (): PouchDB.Database<any> => {\n    PouchDB.plugin(require('pouchdb-adapter-idb').default); // add sbrowser adapter\n\n    return new PouchDB(DB_SCHEMA, { adapter: 'idb' });\n  };\n\n  /**\n   * Create the database.\n   */\n  const setupDatabase = useCallback(async () => {\n    let db = databaseContext.database;\n\n    if (db) {\n      return;\n    }\n\n    PouchDB.plugin(PouchDBFind); // adds find query support\n    PouchDB.plugin(PouchDBUpsert); // adds upsert query support\n\n    if (window['cordova']) {\n      db = createMobileDatabase();\n    } else {\n      db = createDatabase();\n    }\n    db.createIndex({ index: { ddoc: 'notificationsIndex', fields: ['docType', 'acknowledged'] } });\n    db.createIndex({ index: { ddoc: 'activitiesIndex', fields: ['docType', 'activityType'] } });\n    db.createIndex({ index: { ddoc: 'formStatusIndex', fields: ['docType', 'formStatus', 'sync.ready'] } });\n    db.createIndex({ index: { ddoc: 'docTypeIndex', fields: ['docType', 'trip_ID'] } });\n    db.createIndex({ index: { ddoc: 'tripDocTypeIndex', fields: ['trip_ID', 'docType'] } });\n    db.createIndex({ index: { ddoc: 'tripIDIndex', fields: ['docType', 'trip_IDs'] } });\n\n    /**\n     * Destroy and re-create the database.\n     */\n    const resetDatabase = async (database) => {\n      if (!database) {\n        return;\n      }\n\n      await database.destroy();\n      await setupDatabase();\n    };\n\n    setDatabaseContext({ database: db, resetDatabase: () => resetDatabase(db) });\n  }, [databaseContext.database]);\n\n  /**\n   * Close the database.\n   *\n   * Note: This only closes any active connections/listeners, and does not destory the actual database or its content.\n   */\n  const cleanupDatabase = useCallback(async () => {\n    let db = databaseContext.database;\n\n    if (!db) {\n      return;\n    }\n\n    await db.close();\n  }, []);\n\n  useEffect(() => {\n    setupDatabase();\n\n    const callCleanupDatabase = async () => {\n      await cleanupDatabase();\n    };\n\n    callCleanupDatabase();\n  }, [setupDatabase, cleanupDatabase]);\n\n  return <DatabaseContext.Provider value={databaseContext}>{props.children}</DatabaseContext.Provider>;\n};\n","import React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { DatabaseContext } from './DatabaseContext';\nimport moment from 'moment';\n\nexport type IDatabaseChanges = PouchDB.Core.ChangesResponseChange<any> | PouchDB.Core.ChangesResponse<any> | any;\n\nexport const DatabaseChangesContext = React.createContext<IDatabaseChanges>(null);\n\n/**\n * Provides access to a database changes object, which contains information about the most recent database updates.\n *\n * @param {*} props\n * @return {*}\n */\nexport const DatabaseChangesContextProvider: React.FC = (props) => {\n  const databaseContext = useContext(DatabaseContext);\n\n  const [databaseChanges, setDatabaseChanges] = useState<IDatabaseChanges>(null);\n  const [changesListener, setChangesListener] = useState<PouchDB.Core.Changes<any>>(null);\n  const [lastChangeTimestamp, setLastChangeTimestamp] = useState(null);\n  const [buffer, setBuffer] = useState([]);\n  const [bufferTimeout, setBufferTimeout] = useState(null);\n\n  // speed limit for changes notifications:\n  const MIN_INTERVAL = 1000;\n\n  const addChange = useCallback(\n    async (change) => {\n      const now = moment().valueOf();\n      setLastChangeTimestamp(now);\n      if (!lastChangeTimestamp || now > lastChangeTimestamp + MIN_INTERVAL) {\n        setDatabaseChanges([...buffer, change]);\n        setBuffer([]);\n        setBufferTimeout(null);\n        clearTimeout(bufferTimeout);\n      } else {\n        // buffer changes until after the timeout\n        // any other changes within this time will wipe the timeout and display only the new change\n        setBuffer([...buffer, change]);\n        setBufferTimeout(\n          setTimeout(() => setDatabaseChanges([...buffer, change]), now - lastChangeTimestamp + MIN_INTERVAL)\n        );\n      }\n    },\n    [databaseChanges, lastChangeTimestamp, bufferTimeout, setBufferTimeout, setDatabaseChanges]\n  );\n\n  const setupDatabaseChanges = useCallback(async () => {\n    if (!changesListener || changesListener['isCancelled']) {\n      const listener = databaseContext.database\n        .changes({ live: true, since: 'now' })\n        .on('change', (change) => addChange(change))\n        .on('complete', (final) => () => addChange(final))\n        .on('error', (error) => () => addChange(error));\n\n      setChangesListener(listener);\n    }\n  }, [changesListener, databaseContext.database, addChange]);\n\n  const cleanupDatabaseChanges = useCallback(() => {\n    if (changesListener) {\n      changesListener.cancel();\n    }\n  }, [changesListener]);\n\n  useEffect(() => {\n    setupDatabaseChanges();\n\n    return () => {\n      cleanupDatabaseChanges();\n    };\n  }, [databaseContext, setupDatabaseChanges, cleanupDatabaseChanges]);\n\n  return <DatabaseChangesContext.Provider value={databaseChanges}>{props.children}</DatabaseChangesContext.Provider>;\n};\n","import { Network, NetworkStatus } from '@capacitor/core';\nimport React, { useEffect, useState } from 'react';\n\nexport const NetworkContext = React.createContext<NetworkStatus>(null);\n\n/**\n * Provides access to the database and to related functions to manipulate the database instance.\n *\n * @param {*} props\n */\nexport const NetworkContextProvider: React.FC = (props) => {\n  const [networkContext, setNetworkContext] = useState<NetworkStatus>(null);\n\n  useEffect(() => {\n    // Remove old listeners, if any\n    Network.removeAllListeners();\n    //grab on startup\n    Network.getStatus().then((status) => {\n      setNetworkContext(status);\n    });\n\n    // Add new listener\n    Network.addListener('networkStatusChange', (status) => {\n      setNetworkContext(status);\n    });\n\n    return () => {\n      Network.removeAllListeners();\n    };\n  }, []);\n\n  return <NetworkContext.Provider value={networkContext}>{props.children}</NetworkContext.Provider>;\n};\n","import { createMuiTheme } from '@material-ui/core';\nimport 'styles/fonts.scss';\n\nconst appTheme = createMuiTheme({\n  palette: {\n    // https://material-ui.com/customization/palette/\n    primary: {\n      light: '#5469a4',\n      main: '#223f75', // BC ID: corporate blue\n      dark: '#001949',\n      contrastText: '#ffffff'\n    },\n    secondary: {\n      light: '#ffd95e',\n      main: '#e3a82b', // BC ID: corporate gold\n      dark: '#ad7900',\n      contrastText: '#000000'\n    }\n  },\n  typography: {\n    fontFamily: ['BCSans', '\"Noto Sans\"', '\"Helvetica Neue\"', 'Arial', 'sans-serif'].join(',')\n  },\n  overrides: {\n    MuiTypography: {\n      // https://material-ui.com/api/typography/\n      h1: {\n        fontSize: '3rem'\n      },\n      h2: {\n        fontSize: '2.5rem'\n      },\n      h3: {\n        fontSize: '2rem'\n      },\n      h4: {\n        fontSize: '1.5rem'\n      },\n      h5: {\n        fontSize: '1.25rem'\n      },\n      h6: {\n        fontSize: '1rem'\n      }\n    },\n    MuiCircularProgress: {\n      // https://material-ui.com/api/circular-progress/\n      root: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        height: '60px !important',\n        width: '60px !important',\n        marginLeft: '-30px',\n        marginTop: '-30px'\n      }\n    },\n    MuiContainer: {\n      // https://material-ui.com/api/container/\n      root: {\n        maxWidth: 'xl',\n        margin: 'auto'\n      }\n    },\n    MuiTooltip: {\n      tooltip: {\n        fontSize: '1rem',\n        color: 'white',\n        backgroundColor: '#223F75'\n      }\n    }\n  }\n});\n\nexport default appTheme;\n","import { SvgIconComponent, Assignment, Build, Visibility } from '@material-ui/icons';\n\nexport enum ActivityType {\n  Observation = 'Observation',\n  AnimalActivity = 'AnimalActivity',\n  Dispersal = 'Dispersal',\n  Transect = 'Transect',\n  Treatment = 'Treatment',\n  Monitoring = 'Monitoring'\n}\n\nexport enum ActivitySubtype {\n  Observation_PlantTerrestrial = 'Activity_Observation_PlantTerrestrial',\n  Observation_PlantTerrestrial_BulkEdit = 'Activity_Observation_PlantTerrestrial_BulkEdit',\n  Observation_PlantAquatic = 'Activity_Observation_PlantAquatic',\n\n  Activity_AnimalTerrestrial = 'Activity_AnimalActivity_AnimalTerrestrial',\n  Activity_AnimalAquatic = 'Activity_AnimalActivity_AnimalAquatic',\n\n  Activity_BiologicalDispersal = 'Activity_Dispersal_BiologicalDispersal',\n\n  Transect_FireMonitoring = 'Activity_Transect_FireMonitoring',\n  Transect_Vegetation = 'Activity_Transect_Vegetation',\n  Transect_BiocontrolEfficacy = 'Activity_Transect_BiocontrolEfficacy',\n\n  Treatment_ChemicalPlant = 'Activity_Treatment_ChemicalPlant',\n  Treatment_ChemicalPlant_BulkEdit = 'Activity_Treatment_ChemicalPlant_BulkEdit',\n  Treatment_MechanicalPlant = 'Activity_Treatment_MechanicalPlant',\n  Treatment_MechanicalPlant_BulkEdit = 'Activity_Treatment_MechanicalPlant_BulkEdit',\n  Treatment_BiologicalPlant = 'Activity_Treatment_BiologicalPlant',\n  Treatment_BiologicalPlant_BulkEdit = 'Activity_Treatment_BiologicalPlant_BulkEdit',\n\n  Monitoring_ChemicalTerrestrialAquaticPlant = 'Activity_Monitoring_ChemicalTerrestrialAquaticPlant',\n  Monitoring_MechanicalTerrestrialAquaticPlant = 'Activity_Monitoring_MechanicalTerrestrialAquaticPlant',\n  Monitoring_BiologicalTerrestrialPlant = 'Activity_Monitoring_BiologicalTerrestrialPlant'\n}\n\nexport const ActivityTypeIcon: { [key: string]: SvgIconComponent } = {\n  [ActivityType.Observation]: Assignment,\n  [ActivityType.AnimalActivity]: Assignment,\n  [ActivityType.Transect]: Assignment,\n  [ActivityType.Treatment]: Build,\n  [ActivityType.Monitoring]: Visibility,\n  [ActivityType.Dispersal]: Visibility\n};\n\nexport enum ActivityStatus {\n  NEW = 'New',\n  EDITED = 'Edited'\n}\n\nexport enum ActivitySyncStatus {\n  NOT_SYNCED = 'Not Synced',\n  SYNC_SUCCESSFUL = 'Sync Successful',\n  SYNC_FAILED = 'Sync Failed'\n}\n\nexport enum FormValidationStatus {\n  NOT_VALIDATED = 'Not Validated',\n  INVALID = 'Invalid',\n  VALID = 'Valid'\n}\n","export enum DocType {\n  APPSTATE = 'appstate',\n  ACTIVITY = 'activity',\n  TRIP = 'trip',\n  REFERENCE_ACTIVITY = 'reference_activity',\n  REFERENCE_POINT_OF_INTEREST = 'reference_point_of_interest',\n  POINT_OF_INTEREST = 'point_of_interest',\n  NOTIFICATION = 'notification',\n  SPATIAL_UPLOADS = 'spatial_uploads',\n  OFFLINE_EXTENT = 'offline_extent',\n  OFFLINE_DATA = 'offline_data',\n  PLAN_PAGE_EXTENT = 'plan_page_extent'\n}\n","import { useKeycloak } from '@react-keycloak/web';\nimport axios from 'axios';\nimport { DatabaseContext } from 'contexts/DatabaseContext';\nimport {\n  IActivitySearchCriteria,\n  ICreateOrUpdateActivity,\n  IMetabaseQuerySearchCriteria,\n  ICreateMetabaseQuery\n} from 'interfaces/useInvasivesApi-interfaces';\nimport { IPointOfInterestSearchCriteria } from 'interfaces/useInvasivesApi-interfaces';\nimport qs from 'qs';\nimport { useContext, useMemo } from 'react';\n\nconst API_HOST = process.env.REACT_APP_API_HOST;\nconst API_PORT = process.env.REACT_APP_API_PORT;\n\nconst API_URL =\n  (API_PORT && `${API_HOST}:${API_PORT}`) || API_HOST || 'https://api-dev-invasivesbci.apps.silver.devops.gov.bc.ca';\n\n/**\n * Returns an instance of axios with baseURL and authorization headers set.\n *\n * @return {*}\n */\nconst useApi = () => {\n  const { keycloak } = useKeycloak();\n  const instance = useMemo(() => {\n    return axios.create({\n      headers: {\n        // 'Access-Control-Allow-Origin': '*',\n        Authorization: `Bearer ${keycloak?.token}`\n      },\n      baseURL: API_URL\n    });\n  }, [keycloak]);\n\n  return instance;\n};\n\n/**\n * Returns a set of supported api methods.\n *\n * @return {object} object whose properties are supported api methods.\n */\nexport const useInvasivesApi = () => {\n  const api = useApi();\n\n  const databaseContext = useContext(DatabaseContext);\n\n  /**\n   * Fetch*\n activities by search criteria.\n      * @param {activitiesSearchCriteria} activitiesSearchCriteria\n   * @return {*}  {Promise<any>}\n   */\n  const getActivities = async (activitiesSearchCriteria: IActivitySearchCriteria): Promise<any> => {\n    const { data } = await api.post(`/api/activities/`, activitiesSearchCriteria);\n\n    return data;\n  };\n\n  /**\n   * Delete activities by ids.\n   *\n   * @param {string[]} activityIds\n   * @return {*}  {Promise<any>}\n   */\n  const deleteActivities = async (activityIds: string[]): Promise<any> => {\n    const { data } = await api.delete(`/api/activities`, {\n      params: { id: activityIds },\n      paramsSerializer: (params) => {\n        return qs.stringify(params);\n      }\n    });\n\n    return data;\n  };\n\n  /**\n   * Undelete activities by ids.\n   *\n   * @param {string[]} activityIds\n   * @return {*}  {Promise<any>}\n   */\n  const undeleteActivities = async (activityIds: string[]): Promise<any> => {\n    const { data } = await api.post(`/api/deleted/activities`, {\n      params: { id: activityIds },\n      paramsSerializer: (params) => {\n        return qs.stringify(params);\n      }\n    });\n\n    return data;\n  };\n\n  /**\n   * Fetch points of interest by search criteria.\n   *\n   * @param {pointsOfInterestSearchCriteria} pointsOfInterestSearchCriteria\n   * @return {*}  {Promise<any>}\n   */\n  const getPointsOfInterest = async (pointsOfInterestSearchCriteria: IPointOfInterestSearchCriteria): Promise<any> => {\n    const { data } = await api.post(`/api/points-of-interest/`, pointsOfInterestSearchCriteria);\n\n    return data;\n  };\n\n  /**\n   * Fetch activities or points of interest returned by Metabase queries corresponding to an id.\n   *\n   * @param {metabaseQueriesSearchCriteria} metabaseQueriesSearchCriteria\n   * @return {*}  {Promise<any>}\n   */\n  const getMetabaseQueryResults = async (metabaseQueriesSearchCriteria: IMetabaseQuerySearchCriteria): Promise<any> => {\n    let activities, points_of_interest;\n    try {\n      const { data } = await api.get(`/api/metabase-query/${metabaseQueriesSearchCriteria.metabaseQueryId}`);\n      if (data?.activity_ids?.length)\n        activities = await getActivities({\n          activity_ids: data.activity_ids,\n          search_feature: metabaseQueriesSearchCriteria.search_feature\n        });\n      if (data?.point_of_interest_ids?.length)\n        points_of_interest = await getPointsOfInterest({\n          point_of_interest_ids: data.point_of_interest_ids,\n          search_feature: metabaseQueriesSearchCriteria.search_feature\n        });\n    } catch {\n      console.log('Metabase API call failed.');\n    }\n\n    return {\n      // TODO Note: api code smell that activities and points-of-interest dont have same response format\n      activities: activities?.rows?.length ? activities.rows : [],\n      points_of_interest: points_of_interest?.length ? points_of_interest : []\n    };\n  };\n\n  /**\n   * Create Metabase Query from a list of activity ids and point of interest ids\n   *\n   * @param {metabaseQueriesCreateCriteria} ICreateMetabaseQuery\n   * @return {*}  {Promise<any>}\n   */\n  const createMetabaseQuery = async (metabaseQueriesCreateCriteria: ICreateMetabaseQuery): Promise<any> => {\n    const { data } = await api.post(`/api/metabase-query`, metabaseQueriesCreateCriteria);\n\n    return data;\n  };\n\n  /**\n   * Fetch list of all Metabase query options (collections/questions/cards) to present to the user dropdown\n   *\n   * @return {*}  {Promise<any>}\n   */\n  const getMetabaseQueryOptions = async (): Promise<any> => {\n    const { data } = await api.get('/api/metabase-query');\n\n    return data.options;\n  };\n\n  /**\n   * Fetch a signle activity by its id.\n   *\n   * @param {string} activityId\n   * @return {*}  {Promise<any>}\n   */\n  const getActivityById = async (activityId: string): Promise<any> => {\n    const { data } = await api.get(`/api/activity/${activityId}`);\n\n    return data;\n  };\n\n  /**\n   * Fetch media items.\n   *\n   * @param {string[]} mediaKeys\n   * @return {*}  {Promise<any>}\n   */\n  const getMedia = async (mediaKeys: string[]): Promise<any> => {\n    const { data } = await api.get('/api/media/', {\n      params: { key: mediaKeys },\n      paramsSerializer: (params) => {\n        return qs.stringify(params);\n      }\n    });\n\n    return data;\n  };\n\n  /**\n   * Create a new activity record.\n   *\n   * @param {ICreateOrUpdateActivity} activity\n   * @return {*}  {Promise<any>}\n   */\n  const createActivity = async (activity: ICreateOrUpdateActivity): Promise<any> => {\n    const { data } = await api.post('/api/activity', activity);\n\n    return data;\n  };\n\n  /**\n   * Update an existing activity record.\n   *\n   * @param {ICreateOrUpdateActivity} activity\n   * @return {*}  {Promise<any>}\n   */\n  const updateActivity = async (activity: ICreateOrUpdateActivity): Promise<any> => {\n    const { data } = await api.put('/api/activity', activity);\n\n    return data;\n  };\n\n  /**\n   * Fetch the api json-schema spec.\n   *\n   * @return {*}  {Promise<any>}\n   */\n  const getApiSpec = async (): Promise<any> => {\n    const { data } = await api.get('/api/api-docs/');\n\n    return data;\n  };\n\n  /**\n   * Fetch the api json-schema spec and save it in the local database.\n   * If the request fails (due to lack of internet connection, etc), then return the cached copy of the api spec.\n   *\n   * @return {*}  {Promise<any>}\n   */\n  const getCachedApiSpec = async (): Promise<any> => {\n    try {\n      const data = await getApiSpec();\n\n      await databaseContext.database.upsert('ApiSpec', () => {\n        return data;\n      });\n\n      return data;\n    } catch (error) {\n      const data = await databaseContext.database.get('ApiSpec');\n\n      return data;\n    }\n  };\n\n  /**\n   * Fetch species details.\n   *\n   * @param {string[]} species\n   * @return {*}  {Promise<any>}\n   */\n  const getSpeciesDetails = async (species: string[]): Promise<any> => {\n    const { data } = await api.get('/api/species', {\n      params: { key: species },\n      paramsSerializer: (params) => {\n        return qs.stringify(params);\n      }\n    });\n\n    return data;\n  };\n\n  return {\n    getMedia,\n    getSpeciesDetails,\n    getActivities,\n    deleteActivities,\n    undeleteActivities,\n    getActivityById,\n    createActivity,\n    updateActivity,\n    getApiSpec,\n    getCachedApiSpec,\n    getPointsOfInterest,\n    getMetabaseQueryResults,\n    getMetabaseQueryOptions,\n    createMetabaseQuery\n  };\n};\n","import { DocType } from 'constants/database';\nimport { IDatabaseContext } from 'contexts/DatabaseContext';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const notifyError = async (databaseContext: IDatabaseContext, message: string) => {\n  await databaseContext.database.put({\n    _id: uuidv4(),\n    docType: DocType.NOTIFICATION,\n    notificationType: 'error',\n    text: message,\n    acknowledged: false,\n    dateCreated: new Date()\n  });\n};\n\nexport const notifySuccess = async (databaseContext: IDatabaseContext, message: string) => {\n  await databaseContext.database.put({\n    _id: uuidv4(),\n    docType: DocType.NOTIFICATION,\n    notificationType: 'success',\n    text: message,\n    acknowledged: false,\n    dateCreated: new Date()\n  });\n};\n\nexport const notifyWarning = async (databaseContext: IDatabaseContext, message: string) => {\n  await databaseContext.database.put({\n    _id: uuidv4(),\n    docType: DocType.NOTIFICATION,\n    notificationType: 'warning',\n    text: message,\n    acknowledged: false,\n    dateCreated: new Date()\n  });\n};\n","import { Divider, Grid, Typography } from '@material-ui/core';\nimport { MediumDateFormat } from 'constants/misc';\nimport moment from 'moment';\nimport React from 'react';\n\ninterface IActivityListDate {\n  classes: any;\n  activity: any;\n}\n\nconst ActivityListDate: React.FC<IActivityListDate> = (props) => {\n  const { activity, classes } = props;\n\n  return (\n    <>\n      <Divider flexItem={true} orientation=\"vertical\" />\n      <Grid item md={2}>\n        <Typography className={classes.activitiyListItem_Typography}>Created</Typography>\n        {moment(activity.dateCreated).format(MediumDateFormat)}\n      </Grid>\n      <Divider flexItem={true} orientation=\"vertical\" />\n      <Grid item md={2}>\n        <Typography className={classes.activitiyListItem_Typography}>Last Updated</Typography>\n        {(activity.dateUpdated && moment(activity.dateUpdated).format(MediumDateFormat)) || 'n/a'}\n      </Grid>\n    </>\n  );\n};\n\nexport default ActivityListDate;\n","// See BC Gov standards: https://www2.gov.bc.ca/gov/content/governments/services-for-government/policies-procedures/web-content-development-guides/writing-for-the-web/web-style-guide/numbers\n\nexport const ShortDateFormat = 'YYYY-MM-DD'; //2020-01-05\n\nexport const ShortDateTimeFormat = 'YYYY-MM-DD, H:mm a'; //2020-01-05, 3:30 pm\n\nexport const MediumDateFormat = 'MMMM D, YYYY'; //January 5, 2020\n\nexport const MediumDateTimeFormat = 'MMMM D, YYYY, H:mm a'; //January 5, 2020, 3:30 pm\n\nexport const LongDateFormat = 'dddd, MMMM D, YYYY, H:mm a'; //Monday, January 5, 2020, 3:30 pm\n\nexport const LongDateTimeFormat = 'dddd, MMMM D, YYYY, H:mm a'; //Monday, January 5, 2020, 3:30 pm\n","/*\n  Utility function to generate a custom error message for our app based on the status code\n  and also where this function is being called from (ie; what action is being performed)\n*/\nexport function getErrorMessages(errorCode: number, action: string): string {\n  let errorMessage = 'There has been an error. Please try again.';\n\n  if (action === 'formSync') {\n    switch (errorCode) {\n      case 400:\n        errorMessage = 'There seems to be an issue with your form, please check your form for errors and try again.';\n        break;\n      case 500:\n        errorMessage = 'Our system experienced an issue. Please try again.';\n        break;\n    }\n  }\n\n  return errorMessage;\n}\n","/*\n  Function to determine which fields to copy from provided activity_data/activity_type_data/activity_subtype_data\n  and apply some filters based on the type of data \n*/\nexport function getFieldsToCopy(activityData: any, activitySubtypeData: any, activitySubtype?: string) {\n  /*\n    These fields are not being included because they are either read-only fields that are generated\n    based on the geometry or editable fields that get autopopulated based on when the activity\n    was created\n\n    However, for monitorings, we do copy these fields over as well because they are identical to\n    the treatment record they are referencing\n  */\n  const activityDataToCopy = { ...activityData };\n  let activitySubtypeDataToCopy = {};\n\n  delete activityDataToCopy.activity_date_time;\n\n  if (activitySubtype) {\n    if (activitySubtype.includes('Treatment')) {\n      return activityDataToCopy;\n    }\n\n    /*\n      When creating a treatment linked to a plant observation, we copy the invasive plant\n      species from the subtype data to prevent/reduce data entry errors\n    */\n    if (activitySubtype.includes('Observation_Plant')) {\n      activitySubtypeDataToCopy = { invasive_plant_code: activitySubtypeData.invasive_plants[0].invasive_plant_code };\n    }\n  }\n\n  delete activityDataToCopy.latitude;\n  delete activityDataToCopy.longitude;\n  delete activityDataToCopy.reported_area;\n\n  return { activityData: activityDataToCopy, activitySubtypeData: activitySubtypeDataToCopy };\n}\n","import { v4 as uuidv4 } from 'uuid';\nimport moment from 'moment';\nimport {\n  ActivityStatus,\n  ActivitySyncStatus,\n  FormValidationStatus,\n  ActivitySubtype,\n  ActivityType\n} from 'constants/activities';\nimport { Feature } from 'geojson';\nimport { DocType } from 'constants/database';\nimport { IActivity } from 'interfaces/activity-interfaces';\nimport { getFieldsToCopy } from 'rjsf/business-rules/formDataCopyFields';\n\n/*\n  Function to generate activity payload for a new activity\n*/\nexport function generateActivityPayload(\n  formData: any,\n  geometry: Feature[],\n  activityType: ActivityType,\n  activitySubtype: ActivitySubtype\n): IActivity {\n  const id = uuidv4();\n\n  return {\n    _id: id,\n    activityId: id,\n    docType: DocType.ACTIVITY,\n    activityType,\n    activitySubtype,\n    status: ActivityStatus.NEW,\n    sync: {\n      ready: false,\n      status: ActivitySyncStatus.NOT_SYNCED,\n      error: null\n    },\n    dateCreated: new Date(),\n    dateUpdated: null,\n    formData,\n    formStatus: FormValidationStatus.NOT_VALIDATED,\n    geometry\n  };\n}\n\n/*\n  Function to create a brand new activity and save it to the DB\n*/\nexport async function addNewActivityToDB(\n  databaseContext: any,\n  activityType: ActivityType,\n  activitySubtype: ActivitySubtype\n): Promise<IActivity> {\n  const formData = {\n    activity_data: {\n      activity_date_time: moment(new Date()).format()\n    }\n  };\n  const doc: IActivity = generateActivityPayload(formData, null, activityType, activitySubtype);\n\n  await databaseContext.database.put(doc);\n\n  return doc;\n}\n\n/*\n  Function to create a cloned activity and save it to DB\n*/\nexport async function addClonedActivityToDB(databaseContext: any, clonedRecord: any) {\n  const id = uuidv4();\n\n  // Used to avoid pouch DB conflict\n  delete clonedRecord._rev;\n\n  const doc: any = {\n    ...clonedRecord,\n    _id: id,\n    dateCreated: new Date(),\n    dateUpdated: null,\n    status: ActivityStatus.NEW,\n    activityId: id\n  };\n\n  await databaseContext.database.put(doc);\n\n  return await databaseContext.database.get(doc._id);\n}\n\n/*\n  Function to create a linked activity and save it to DB\n  The activity_id field which is present in the form data is populated to reference the linked activity record's id\n  Also, the activity_data is populated based on business logic rules which specify which fields to copy\n*/\nexport async function addLinkedActivityToDB(\n  databaseContext: any,\n  activityType: ActivityType,\n  activitySubtype: ActivitySubtype,\n  linkedRecord: any\n): Promise<IActivity> {\n  const { activityData, activitySubtypeData } = getFieldsToCopy(\n    linkedRecord.formData.activity_data,\n    linkedRecord.formData.activity_subtype_data,\n    linkedRecord.activitySubtype\n  );\n\n  let formData: any = {\n    activity_data: {\n      ...activityData,\n      activity_date_time: moment(new Date()).format()\n    },\n    activity_subtype_data: {\n      ...activitySubtypeData\n    }\n  };\n  const geometry = linkedRecord.geometry;\n\n  /*\n    Since chemical plant treatments are different and do not have activity_type_data\n    the linked record activity id field is present in the activity_subtype_data\n  */\n  if (activitySubtype === ActivitySubtype.Treatment_ChemicalPlant) {\n    formData.activity_subtype_data = {\n      ...formData.activity_subtype_data,\n      activity_id: linkedRecord._id\n    };\n  } else {\n    formData.activity_type_data = { activity_id: linkedRecord._id };\n  }\n\n  const doc: IActivity = generateActivityPayload(formData, geometry, activityType, activitySubtype);\n\n  await databaseContext.database.put(doc);\n\n  return doc;\n}\n","import { DatabaseContext } from 'contexts/DatabaseContext';\nimport { MapContextMenuData } from 'features/home/map/MapContextMenu';\nimport { Feature } from 'geojson';\nimport * as L from 'leaflet';\nimport axios from 'axios';\nimport 'leaflet-draw';\nimport 'leaflet-draw/dist/leaflet.draw.css';\nimport 'leaflet.locatecontrol';\nimport 'leaflet.locatecontrol/dist/L.Control.Locate.css';\nimport 'leaflet.locatecontrol/dist/L.Control.Locate.mapbox.css';\nimport 'leaflet.offline';\nimport 'leaflet/dist/leaflet.css';\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport { notifySuccess } from 'utils/NotificationUtils';\nimport Spinner from 'components/spinner/Spinner';\nimport { interactiveGeoInputData } from './GeoMeta';\nimport './MapContainer.css';\nimport * as turf from '@turf/turf';\nimport { kml } from '@tmcw/togeojson';\nimport { DocType } from 'constants/database';\n\nexport type MapControl = (map: any, ...args: any) => void;\n\nexport const getZIndex = (doc) => {\n  const coords = doc.geometry[0]?.geometry.coordinates;\n  let zIndex = 100000;\n  if (doc.geometry[0].geometry.type === 'Polygon' && coords?.[0]) {\n    let highestLat = coords[0].reduce((max, point) => {\n      if (point[1] > max) return point[1];\n      return max;\n    }, 0);\n    let lowestLat = coords[0].reduce((min, point) => {\n      if (point[1] < min) return point[1];\n      return min;\n    }, zIndex);\n\n    zIndex = zIndex / (highestLat - lowestLat);\n  }\n  return zIndex;\n};\n\nexport interface IMapContainerProps {\n  classes?: any;\n  mapId: string;\n  showDrawControls: boolean;\n  geometryState: { geometry: any[]; setGeometry: (geometry: Feature[]) => void };\n  interactiveGeometryState?: {\n    interactiveGeometry: any[];\n    setInteractiveGeometry: (interactiveGeometry: interactiveGeoInputData[]) => void;\n  };\n  extentState: { extent: any; setExtent: (extent: any) => void };\n  contextMenuState: {\n    state: MapContextMenuData;\n    setContextMenuState: (contextMenuState: MapContextMenuData) => void;\n  };\n}\n\nconst host = window.location.hostname;\nlet geoserver;\nswitch (true) {\n  case /^localhost/.test(host):\n    geoserver = 'http://localhost:8080';\n    break;\n  case /^dev.*/.test(host):\n    geoserver = 'https://invasivesbci-geoserver-dev-7068ad-dev.apps.silver.devops.gov.bc.ca';\n    break;\n  case /^test.*/.test(host):\n    geoserver = 'https://invasivesbci-geoserver-tst-7068ad-tst.apps.silver.devops.gov.bc.ca';\n    break;\n  case /^invasivesbc.*/.test(host):\n    geoserver = 'https://invasivesbci-geoserver-7068ad.apps.silver.devops.gov.bc.ca';\n    break;\n}\n\nconst MapContainer: React.FC<IMapContainerProps> = (props) => {\n  const databaseContext = useContext(DatabaseContext);\n\n  const mapRef = useRef(null);\n\n  const layerRef = useRef([]);\n\n  const [drawnItems, setDrawnItems] = useState(new L.FeatureGroup());\n  const [geoKeys, setGeoKeys] = useState({});\n\n  const [offlineing, setOfflineing] = useState(false);\n\n  const addContextMenuClickListener = () => {\n    mapRef.current.on('contextmenu', (e) => {\n      props.contextMenuState.setContextMenuState({ isOpen: true, lat: e.latlng.lat, lng: e.latlng.lng });\n    });\n  };\n\n  const getESRIBaseLayer = () => {\n    return L.tileLayer.offline(\n      'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',\n      {\n        maxZoom: 24,\n        maxNativeZoom: 17,\n        attribution:\n          '&copy; <a href=\"https://www.esri.com/en-us/arcgis/products/location-services/services/basemaps\">ESRI Basemap</a>'\n      }\n    );\n  };\n\n  const getESRIPlacenames = () => {\n    return L.tileLayer.offline(\n      'https://server.arcgisonline.com/ArcGIS/rest/services/Reference/World_Boundaries_and_Places/MapServer/tile/{z}/{y}/{x}',\n      {\n        maxZoom: 24,\n        maxNativeZoom: 17\n      }\n    );\n  };\n\n  const getBCGovBaseLayer = () => {\n    return L.tileLayer.offline(\n      'https://maps.gov.bc.ca/arcgis/rest/services/province/roads_wm/MapServer/tile/{z}/{y}/{x}',\n      {\n        maxZoom: 24,\n        useCache: true,\n        cacheMaxAge: 6.048e8 // 1 week\n      }\n    );\n  };\n\n  const getNRDistricts = () => {\n    return L.tileLayer.offline(\n      `${geoserver}/geoserver/gwc/service/tms/1.0.0/invasives:WHSE_ADMIN_BOUNDARIES.ADM_NR_DISTRICTS_SPG@EPSG:3857@png/{z}/{x}/{y}.png`,\n      {\n        opacity: 0.8,\n        tms: true\n      }\n    );\n  };\n\n  const getMOTIDistricts = () => {\n    return L.tileLayer.offline(\n      `${geoserver}/geoserver/gwc/service/tms/1.0.0/invasives:WHSE_ADMIN_BOUNDARIES.TADM_MOT_DISTRICT_BNDRY_POLY@EPSG:900913@png/{z}/{x}/{y}.png`,\n      {\n        opacity: 0.8,\n        tms: true\n      }\n    );\n  };\n\n  const getMOTIRegions = () => {\n    return L.tileLayer.offline(\n      `${geoserver}/geoserver/gwc/service/tms/1.0.0/invasives:WHSE_ADMIN_BOUNDARIES.TADM_MOT_REGIONAL_BNDRY_POLY@EPSG:900913@png/{z}/{x}/{y}.png`,\n      {\n        opacity: 0.8,\n        tms: true\n      }\n    );\n  };\n\n  const getBEC = () => {\n    return L.tileLayer.offline(\n      `${geoserver}/geoserver/gwc/service/tms/1.0.0/invasives:WHSE_FOREST_VEGETATION.BEC_BIOGEOCLIMATIC_POLY@EPSG:900913@png/{z}/{x}/{y}.png`,\n      {\n        opacity: 0.8,\n        tms: true\n      }\n    );\n  };\n\n  const getWells = () => {\n    return L.tileLayer.offline(\n      `${geoserver}/geoserver/gwc/service/tms/1.0.0/invasives:WHSE_WATER_MANAGEMENT.GW_WATER_WELLS_WRBC_SVW@EPSG:900913@png/{z}/{x}/{y}.png`,\n      {\n        opacity: 0.8,\n        tms: true\n      }\n    );\n  };\n\n  const getStreams = () => {\n    return L.tileLayer.offline(\n      `${geoserver}/geoserver/gwc/service/tms/1.0.0/invasives:WHSE_BASEMAPPING.FWA_STREAM_NETWORKS_SP@EPSG:900913@png/{z}/{x}/{y}.png`,\n      {\n        opacity: 0.8,\n        tms: true\n      }\n    );\n  };\n\n  const getWetlands = () => {\n    return L.tileLayer.offline(\n      `${geoserver}/geoserver/gwc/service/tms/1.0.0/invasives:WHSE_BASEMAPPING.FWA_WETLANDS_POLY@EPSG:900913@png/{z}/{x}/{y}.png`,\n      {\n        opacity: 0.8,\n        tms: true\n      }\n    );\n  };\n\n  const getOwnership = () => {\n    return L.tileLayer.offline(\n      `${geoserver}/geoserver/gwc/service/tms/1.0.0/invasives:WHSE_TANTALIS.TA_SURFACE_OWNERSHIP_SVW@EPSG:900913@png/{z}/{x}/{y}.png`,\n      {\n        opacity: 0.4,\n        tms: true\n      }\n    );\n  };\n\n  const getRFI = () => {\n    return L.tileLayer.offline(\n      `${geoserver}/geoserver/gwc/service/tms/1.0.0/invasives:WHSE_IMAGERY_AND_BASE_MAPS.MOT_ROAD_FEATURES_INVNTRY_SP@EPSG:900913@png/{z}/{x}/{y}.png`,\n      {\n        opacity: 0.8,\n        tms: true\n      }\n    );\n  };\n\n  const getRegionalDistricts = () => {\n    return L.tileLayer.offline(\n      `${geoserver}/geoserver/gwc/service/tms/1.0.0/invasives:WHSE_LEGAL_ADMIN_BOUNDARIES.ABMS_REGIONAL_DISTRICTS_SP@EPSG:900913@png/{z}/{x}/{y}.png`,\n      {\n        opacity: 0.4,\n        tms: true\n      }\n    );\n  };\n\n  const getJurisdiction = () => {\n    return L.tileLayer.offline(\n      `${geoserver}/geoserver/gwc/service/tms/1.0.0/invasives:jurisdiction@EPSG:900913@png/{z}/{x}/{y}.png`,\n      {\n        opacity: 0.4,\n        tms: true\n      }\n    );\n  };\n\n  const getMunicipalites = () => {\n    return L.tileLayer.offline(\n      `${geoserver}/geoserver/gwc/service/tms/1.0.0/invasives:WHSE_LEGAL_ADMIN_BOUNDARIES.ABMS_MUNICIPALITIES_SP@EPSG:900913@png/{z}/{x}/{y}.png`,\n      {\n        opacity: 0.4,\n        tms: true\n      }\n    );\n  };\n\n  const getRISO = () => {\n    return L.tileLayer.offline(\n      `${geoserver}/geoserver/gwc/service/tms/1.0.0/invasives:regional_invasive_species_organization_areas@EPSG:900913@png/{z}/{x}/{y}.png`,\n      {\n        opacity: 0.6,\n        tms: true\n      }\n    );\n  };\n\n  const getAggregate = () => {\n    return L.tileLayer.offline(\n      `${geoserver}/geoserver/gwc/service/tms/1.0.0/invasives:aggregate_tenures@EPSG:900913@png/{z}/{x}/{y}.png`,\n      {\n        opacity: 0.8,\n        tms: true\n      }\n    );\n  };\n  const getIPMA = () => {\n    return L.tileLayer.offline(\n      `${geoserver}/geoserver/gwc/service/tms/1.0.0/invasives:invasive_plant_management_areas@EPSG:900913@png/{z}/{x}/{y}.png`,\n      {\n        opacity: 0.6,\n        tms: true\n      }\n    );\n  };\n\n  const getOGMA = () => {\n    return L.tileLayer.offline(\n      `${geoserver}/geoserver/gwc/service/tms/1.0.0/invasives:WHSE_LAND_USE_PLANNING.RMP_OGMA_LEGAL_CURRENT_SVW@EPSG:900913@png/{z}/{x}/{y}.png`,\n      {\n        opacity: 0.8,\n        tms: true\n      }\n    );\n  };\n  const getWHA = () => {\n    return L.tileLayer.offline(\n      `${geoserver}/geoserver/gwc/service/tms/1.0.0/invasives:WHSE_WILDLIFE_MANAGEMENT.WCP_WILDLIFE_HABITAT_AREA_POLY@EPSG:900913@png/{z}/{x}/{y}.png`,\n      {\n        opacity: 0.6,\n        tms: true\n      }\n    );\n  };\n\n  const getFSW = () => {\n    return L.tileLayer.offline(\n      `${geoserver}/geoserver/gwc/service/tms/1.0.0/invasives:WHSE_WILDLIFE_MANAGEMENT.WCP_FISH_SENSITIVE_WS_POLY@EPSG:900913@png/{z}/{x}/{y}.png`,\n      {\n        opacity: 0.6,\n        tms: true\n      }\n    );\n  };\n\n  const getIR = () => {\n    return L.tileLayer.offline(\n      `${geoserver}/geoserver/gwc/service/tms/1.0.0/invasives:WHSE_ADMIN_BOUNDARIES.CLAB_INDIAN_RESERVES@EPSG:900913@png/{z}/{x}/{y}.png`,\n      {\n        opacity: 0.6,\n        tms: true\n      }\n    );\n  };\n\n  const getUWR = () => {\n    return L.tileLayer.offline(\n      `${geoserver}/geoserver/gwc/service/tms/1.0.0/invasives:WHSE_WILDLIFE_MANAGEMENT.WCP_UNGULATE_WINTER_RANGE_SP@EPSG:900913@png/{z}/{x}/{y}.png`,\n      {\n        opacity: 0.6,\n        tms: true\n      }\n    );\n  };\n\n  const getNationalParks = () => {\n    return L.tileLayer.offline(\n      `${geoserver}/geoserver/gwc/service/tms/1.0.0/invasives:WHSE_ADMIN_BOUNDARIES.CLAB_NATIONAL_PARKS@EPSG:900913@png/{z}/{x}/{y}.png`,\n      {\n        opacity: 0.6,\n        tms: true\n      }\n    );\n  };\n\n  const addDrawControls = () => {\n    const drawControlOptions = new L.Control.Draw({\n      position: 'topright',\n      draw: {\n        marker: false,\n        circle: true\n      },\n      edit: {\n        featureGroup: drawnItems,\n        remove: true,\n        edit: true\n      }\n    });\n    mapRef.current.addControl(drawControlOptions);\n  };\n\n  const addLocateControls = () => {\n    const locateControlOptions = {\n      icon: 'bullseye',\n      flyTo: true,\n      iconElementTag: 'div'\n    };\n\n    mapRef.current.addControl(L.control.locate(locateControlOptions));\n  };\n\n  const getSaveControl = (layerToSave: any) => {\n    return L.control.savetiles(layerToSave, {\n      zoomlevels: [13, 14, 15, 16, 17],\n      confirm(layer, succescallback) {\n        if (window.confirm(`Save ${layer._tilesforSave.length} tiles`)) {\n          succescallback(notifySuccess(databaseContext, `Saved ${layer._tilesforSave.length} tiles`));\n        }\n      },\n      confirmRemoval(layer, succescallback) {\n        if (window.confirm('Remove all the stored tiles')) {\n          succescallback(notifySuccess(databaseContext, `Removed tiles`));\n        }\n      },\n      saveText: '<span title=\"Save me some basemap\">&#128190;</span>',\n      rmText: '<span title=\"Delete all stored basemap tiles\">&#128465;</span>'\n    });\n  };\n\n  const getSaveControl2 = (layerToSave: any) => {\n    return L.control.savetiles(layerToSave, {\n      zoomlevels: [13, 14, 15, 16, 17],\n      confirm(layer, successCallback) {\n        successCallback(true);\n        // TODO: Increment counter global variable\n        console.log('increment a counter here');\n      }\n    });\n  };\n\n  // const addASaveTilesControl = (layerSaveControl: any) => {\n  //   layerSaveControl.remove(mapRef.current);\n  //   if (mapRef.current.getZoom() > 13) {\n  //     layerSaveControl.addTo(mapRef.current);\n  //   }\n  // };\n\n  const setGeometryMapBounds = () => {\n    if (\n      props.geometryState?.geometry?.length &&\n      !(props.geometryState?.geometry[0].geometry.type === 'Point' && !props.geometryState?.geometry[0].radius)\n    ) {\n      const allGeosFeatureCollection = {\n        type: 'FeatureCollection',\n        features: [...props.geometryState.geometry]\n      };\n      const bboxCoords = turf.bbox(allGeosFeatureCollection);\n\n      mapRef.current.fitBounds([\n        [bboxCoords[1], bboxCoords[0]],\n        [bboxCoords[3], bboxCoords[2]]\n      ]);\n    }\n  };\n\n  const setMapBounds = (extent) => {\n    if (!extent) {\n      return;\n    }\n\n    const bounds = [\n      [extent._northEast.lat, extent._northEast.lng],\n      [extent._southWest.lat, extent._southWest.lng]\n    ];\n\n    mapRef.current.fitBounds(bounds);\n  };\n\n  const addLayerControls = (baseLayerControlOptions: any, overlayControlOptions: any) => {\n    mapRef.current.addControl(\n      L.control.layers(baseLayerControlOptions, overlayControlOptions, { position: 'topleft' })\n    );\n  };\n\n  const [currentZoom, setCurrentZoom] = useState(null);\n  useEffect(() => {\n    //custom on-zoom stuff\n  }, [currentZoom]);\n\n  const initMap = () => {\n    mapRef.current = L.map(props.mapId, { zoomControl: false }).setView([55, -128], 10);\n\n    setCurrentZoom(mapRef.current.getZoom());\n    addContextMenuClickListener();\n    addLocateControls();\n\n    if (props.showDrawControls) {\n      addDrawControls();\n    }\n\n    const esriBaseLayer = getESRIBaseLayer();\n    const esriPlacenames = getESRIPlacenames();\n    const bcBaseLayer = getBCGovBaseLayer();\n\n    // Set initial base map\n    esriBaseLayer.addTo(mapRef.current);\n\n    const basemaps = {\n      'Esri Imagery': esriBaseLayer,\n      'BC Government': bcBaseLayer\n    };\n\n    const nRDistricts = getNRDistricts();\n    const motiDistricts = getMOTIDistricts();\n    const motiRegions = getMOTIRegions();\n    const bec = getBEC();\n    const wells = getWells();\n    const streams = getStreams();\n    const wetlands = getWetlands();\n    const riso = getRISO();\n    const ipma = getIPMA();\n    const uwr = getUWR();\n    const nationalParks = getNationalParks();\n    const aggregate = getAggregate();\n    const ownership = getOwnership();\n    const municipalities = getMunicipalites();\n    const regionalDistricts = getRegionalDistricts();\n    const jurisdictions = getJurisdiction();\n    const rfi = getRFI();\n    const ogma = getOGMA();\n    const wha = getWHA();\n    const fsw = getFSW();\n    const ir = getIR();\n\n    const overlays = {\n      Placenames: esriPlacenames,\n      Wells: wells,\n      'Gravel Pits': aggregate,\n      Streams: streams,\n      Wetlands: wetlands,\n      Ownership: ownership,\n      'Invasive Plant Management Areas': ipma,\n      'Regional Invasive Species Organization Areas': riso,\n      'Natural Resource Districts': nRDistricts,\n      Municipalites: municipalities,\n      'Regional Districts': regionalDistricts,\n      'Road Features Inventory': rfi,\n      Biogeoclimatic: bec,\n      'MOTI Regions': motiRegions,\n      'MOTI Districts': motiDistricts,\n      Jurisdictions: jurisdictions,\n      'Old Growth Management Areas': ogma,\n      'Wildlife Habitat Areas': wha,\n      'First Nations Reserves': ir,\n      'Fisheries Sensitive Watersheds': fsw,\n      'Ungulate Winter Range': uwr,\n      'National Parks': nationalParks\n    };\n\n    // This layer is on by default\n    mapRef.current.addLayer(esriPlacenames);\n\n    const esriBaseLayerControl = getSaveControl2(esriBaseLayer);\n    esriBaseLayerControl._map = mapRef.current;\n    layerRef.current.push(esriBaseLayerControl);\n\n    const bcBaseLayerControl = getSaveControl2(bcBaseLayer);\n    bcBaseLayerControl._map = mapRef.current;\n    layerRef.current.push(bcBaseLayerControl);\n\n    addLayerControls(basemaps, overlays);\n    setMapBounds(mapRef.current.getBounds());\n\n    mapRef.current.on('dragend', () => {\n      props.extentState.setExtent(mapRef.current.getBounds());\n    });\n\n    mapRef.current.on('zoomend', () => {\n      props.extentState.setExtent(mapRef.current.getBounds());\n      setCurrentZoom(mapRef.current.getZoom());\n      // addASaveTilesControl(esriSaveTilesControl);\n    });\n\n    mapRef.current.on('draw:created', (feature) => {\n      let aGeo = feature.layer.toGeoJSON();\n\n      if (feature.layerType === 'circle') {\n        aGeo = { ...aGeo, properties: { ...aGeo.properties, radius: feature.layer.getRadius() } };\n      } else if (feature.layerType === 'rectangle') {\n        aGeo = { ...aGeo, properties: { ...aGeo.properties, isRectangle: true } };\n      }\n\n      aGeo = convertLineStringToPoly(aGeo);\n\n      // Drawing one geo wipes all others\n      props.geometryState.setGeometry([aGeo]);\n    });\n\n    const convertLineStringToPoly = (aGeo: any) => {\n      if (aGeo.geometry.type === 'LineString') {\n        const buffer = prompt('Enter buffer width (total) in meters', '1');\n        const buffered = turf.buffer(aGeo.geometry, parseInt(buffer, 10) / 1000, { units: 'kilometers', steps: 1 });\n        const result = turf.featureCollection([buffered, aGeo.geometry]);\n\n        return { ...aGeo, geometry: result.features[0].geometry };\n      }\n\n      return aGeo;\n    };\n\n    mapRef.current.on('draw:editstop', async () => {\n      // The current feature isn't passed to this function, so grab it from the acetate layer\n      let aGeo = drawnItems?.toGeoJSON()?.features[0];\n\n      // If this is a circle feature... Grab the radius and store in the GeoJSON\n      if (drawnItems.getLayers()[0]._mRadius) {\n        const radius = drawnItems.getLayers()[0]?.getRadius();\n        aGeo = { ...aGeo, properties: { ...aGeo.properties, radius } };\n      }\n\n      aGeo = convertLineStringToPoly(aGeo);\n\n      // Save edited feature\n      if (aGeo) {\n        props.geometryState.setGeometry([aGeo]);\n      }\n    });\n\n    mapRef.current.on('draw:deleted', () => {\n      const aGeo = drawnItems?.toGeoJSON()?.features[0];\n\n      props.geometryState.setGeometry(\n        props.geometryState.geometry?.filter((geo) => JSON.stringify(geo) === JSON.stringify(aGeo))\n      );\n    });\n  };\n\n  const updateMapOnGeometryChange = () => {\n    // updates drawnItems with the latest geo changes, attempting to only draw new geos and delete no-longer-present ones\n    const newGeoKeys = { ...geoKeys };\n\n    if (props.geometryState) {\n      // For each geometry, add a new layer to the drawn features\n      props.geometryState.geometry.forEach((collection) => {\n        const style = {\n          weight: 4,\n          opacity: 0.65\n        };\n\n        const markerStyle = {\n          radius: 10,\n          weight: 4,\n          stroke: true\n        };\n\n        L.geoJSON(collection, {\n          style,\n          pointToLayer: (feature: any, latLng: any) => {\n            if (feature.properties.radius) {\n              return L.circle(latLng, { radius: feature.properties.radius });\n            } else {\n              return L.circleMarker(latLng, markerStyle);\n            }\n          },\n          onEachFeature: (feature: any, layer: any) => {\n            drawnItems.addLayer(layer);\n          }\n        });\n      });\n    }\n    if (props.interactiveGeometryState?.interactiveGeometry) {\n      props.interactiveGeometryState.interactiveGeometry.forEach((interactObj) => {\n        const key = interactObj.recordDocID || interactObj._id;\n        if (newGeoKeys[key] && newGeoKeys[key].hash === JSON.stringify(interactObj) && newGeoKeys[key] !== true) {\n          // old unchanged geo, no need to redraw\n          newGeoKeys[key] = {\n            ...newGeoKeys[key],\n            updated: false\n          };\n          return;\n        }\n\n        // else prepare new Geo for drawing:\n        const style = {\n          color: interactObj.color,\n          weight: 4,\n          opacity: 0.65\n        };\n\n        const markerStyle = {\n          radius: 10,\n          weight: 4,\n          stroke: true\n        };\n\n        const geo = L.geoJSON(interactObj.geometry, {\n          // Note: the result of this isn't actually used, it seems?\n          style,\n          pointToLayer: (feature: any, latLng: any) => {\n            if (feature.properties.radius) {\n              return L.circle(latLng, { radius: feature.properties.radius });\n            } else {\n              return L.circleMarker(latLng, markerStyle);\n            }\n          },\n          onEachFeature: (feature: any, layer: any) => {\n            const content = interactObj.popUpComponent(interactObj.description);\n            layer.on('click', () => {\n              // Fires on click of single feature\n\n              // Formulate a table containing all attributes\n              let table = '<table><tr><th>Attribute</th><th>Value</th></tr>';\n              Object.keys(feature.properties).forEach((f) => {\n                if (f !== 'uploadedSpatial') {\n                  table += `<tr><td>${f}</td><td>${feature.properties[f]}</td></tr>`;\n                }\n              });\n              table += '</table>';\n\n              const loc = turf.centroid(feature);\n              const center = [loc.geometry.coordinates[1], loc.geometry.coordinates[0]];\n\n              if (feature.properties.uploadedSpatial) {\n                L.popup().setLatLng(center).setContent(table).openOn(mapRef.current);\n              } else {\n                L.popup().setLatLng(center).setContent(content).openOn(mapRef.current);\n              }\n\n              interactObj.onClickCallback();\n            });\n          }\n        });\n        newGeoKeys[key] = {\n          hash: JSON.stringify(interactObj),\n          geo: geo,\n          updated: true\n        };\n      });\n    }\n\n    // Drawing step:\n    Object.keys(newGeoKeys).forEach((key: any) => {\n      if (newGeoKeys[key].updated === true) {\n        // draw layers to map\n        Object.values(newGeoKeys[key].geo._layers).forEach((layer) => {\n          drawnItems.addLayer(layer);\n        });\n      } else if (newGeoKeys[key].updated === false) {\n        return;\n      } else {\n        // remove old keys (delete step)\n        Object.values(newGeoKeys[key].geo._layers).forEach((layer) => {\n          drawnItems.removeLayer(layer);\n        });\n        delete newGeoKeys[key];\n        return;\n      }\n      // reset updated status for next refresh:\n      delete newGeoKeys[key].updated;\n    });\n\n    // update stored geos, mapped by key\n    setGeoKeys(newGeoKeys);\n\n    // Update the drawn featres\n    setDrawnItems(drawnItems);\n\n    // Update the map with the new drawn feaures\n    mapRef.current = mapRef.current.addLayer(drawnItems);\n  };\n\n  useEffect(() => {\n    initMap();\n\n    return () => {\n      if (!mapRef.current) {\n        return;\n      }\n\n      mapRef.current.remove();\n    };\n  }, [databaseContext]);\n\n  useEffect(() => {\n    if (!mapRef.current) {\n      return;\n    }\n\n    if (!props.geometryState?.geometry) {\n      return;\n    }\n\n    setGeometryMapBounds();\n    updateMapOnGeometryChange();\n  }, [props.geometryState.geometry, props?.interactiveGeometryState?.interactiveGeometry]);\n\n  useEffect(() => {\n    if (!mapRef.current) {\n      return;\n    }\n\n    if (!props.extentState?.extent) {\n      return;\n    }\n\n    setMapBounds(props.extentState.extent);\n  }, [props.extentState.extent]);\n\n  const [dropSpatial, setDropSpatial] = useState(null);\n\n  const dragEnter = (e) => {\n    e.preventDefault();\n    const type = e?.dataTransfer?.items[0]?.type;\n    switch (type) {\n      case 'application/vnd.google-earth.kmz':\n        setDropSpatial('Sorry... KMZ files are currently not supported. Please unzip and provide the internal KML.');\n        break;\n      case 'application/vnd.google-earth.kml+xml':\n        setDropSpatial('I love to eat KML files');\n        break;\n      default:\n        setDropSpatial(null);\n    }\n  };\n\n  const dragLeave = (e) => {\n    e.preventDefault();\n    setDropSpatial(null);\n  };\n\n  const addKML = async (file) => {\n    setDropSpatial('Yum yum yum');\n    const name = file?.name;\n    const layerName = name.replace(/\\..*/g, '').replace(/[^\\w]/g, '_');\n    const xml = await file.text().then((xmlstring) => {\n      return xmlstring;\n    });\n    const dom = new DOMParser().parseFromString(xml, 'application/xml');\n    const geojson = kml(dom);\n\n    const bbox = turf.bbox(geojson);\n    const corner1 = L.latLng(bbox[1], bbox[0]);\n    const corner2 = L.latLng(bbox[3], bbox[2]);\n    mapRef.current.flyToBounds([corner1, corner2]);\n\n    if (geojson?.features) {\n      await databaseContext.database.upsert('spatial_uploads', (spatial) => {\n        // Add a special flag to distinguish from other features\n        console.log('spatial_uploads', spatial);\n        geojson.features.forEach((_, i) => {\n          geojson.features[i].properties.uploadedSpatial = true;\n        });\n        return {\n          ...spatial,\n          docType: DocType.SPATIAL_UPLOADS,\n          geometry: spatial.geometry ? [...geojson.features, ...spatial.geometry] : geojson.features\n        };\n      });\n    }\n    setDropSpatial(null);\n  };\n\n  const dragDrop = (e) => {\n    e.preventDefault();\n    setDropSpatial(null);\n    const file = e?.dataTransfer?.files[0];\n    const type = file?.type;\n    const name = file?.name;\n\n    switch (type) {\n      case 'application/vnd.google-earth.kmz':\n        setDropSpatial('Yuck! KMZs are nasty');\n        break;\n      case 'application/vnd.google-earth.kml+xml':\n        addKML(file);\n        break;\n      default:\n        setDropSpatial(null);\n    }\n  };\n\n  /* ## dragOver\n    This cancels the default behaviour of trying to open\n    the file in the browser window.\n    @param e {object} Dragging event\n   */\n  const dragOver = (e) => e.preventDefault();\n\n  const dropZoneVisible = {\n    backgroundColor: 'rgba(255,255,255,0.4)',\n    fontSize: '2.5rem',\n    fontWeight: 800,\n    color: 'white',\n    zIndex: 10000,\n    position: 'absolute',\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: '10rem',\n    outline: '1rem dashed white',\n    outlineOffset: '-6rem'\n  } as React.CSSProperties;\n\n  const dropZoneInvisible = {\n    display: 'none'\n  };\n\n  const storeLayers = async () => {\n    setOfflineing(true);\n    /**\n     * First calculate bounds to draw and store extent of offline data\n     */\n\n    // Calculate the extent\n    const bounds = mapRef.current.getBounds();\n    const x1 = bounds.getWest();\n    const y1 = bounds.getSouth();\n    const x2 = bounds.getEast();\n    const y2 = bounds.getNorth();\n    const extent = [x1, y1, x2, y2] as turf.BBox;\n    const layers = [\n      {\n        name: 'Wells',\n        schema: 'WHSE_WATER_MANAGEMENT.GW_WATER_WELLS_WRBC_SVW'\n      }\n    ];\n\n    layers.forEach(async (layer, index) => {\n      const url = `https://openmaps.gov.bc.ca/geo/pub/wfs?service=WFS&version=1.1.0&request=GetFeature&typeName=pub:${layer.schema}&outputFormat=json&srsName=epsg:4326&bbox=${extent},epsg:4326`;\n      const response = await axios(url);\n      // console.log('url',url);\n      // console.log('index',index);\n      // console.log('resp',response.data);\n      // If it's the last record\n\n      await databaseContext.database.upsert('offline_data', (spatial) => {\n        return {\n          docType: DocType.OFFLINE_DATA,\n          geometry:\n            spatial.geometry?.features?.length > 0\n              ? [...spatial.geometry.features, ...response.data.features]\n              : response.data.features\n        };\n      });\n\n      if (index == layers.length - 1) {\n        setOfflineing(false);\n      }\n    });\n    return;\n    const poly = turf.bboxPolygon(extent);\n\n    // Add a special flag to distinguish from other features\n    poly.properties.offlineExtent = true;\n    poly.properties.running = true;\n\n    // Save our extent to the database\n    // XXX: Currently this over writes the previous element.\n    await databaseContext.database.upsert('offline_extent', (spatial) => {\n      return {\n        docType: DocType.OFFLINE_EXTENT,\n        geometry: spatial.geometry ? [poly, ...spatial.geometry] : [poly]\n      };\n    });\n\n    /**\n     * Second cycle through all layers and store tiles\n     */\n    layerRef.current.forEach((control, index) => {\n      setTimeout(() => {\n        control._saveTiles();\n        if (index === layerRef.current.length - 1) setOfflineing(false);\n      }, 1000 * index);\n    });\n  };\n\n  // Style the download button\n  const storeLayersStyle = {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    position: 'absolute',\n    backgroundColor: 'white',\n    color: '#464646',\n    width: '2.7rem',\n    height: '2.7rem',\n    top: '148px',\n    left: '5px',\n    zIndex: 1000,\n    borderRadius: '4px',\n    cursor: 'pointer'\n  } as React.CSSProperties;\n\n  // Style the image inside the download button\n  const iconStyle = {\n    transform: 'scale(0.7)',\n    opacity: '0.7'\n  };\n\n  return (\n    <div id={props.mapId} className={props.classes.map} onDragEnter={dragEnter} onDragOver={dragOver} onDrop={dragDrop}>\n      // The drop zone for uploading files\n      <div style={dropSpatial ? dropZoneVisible : dropZoneInvisible} onDragLeave={dragLeave}>\n        {' '}\n        {dropSpatial}{' '}\n      </div>\n      {/* The offload layers button*/}\n      <div id=\"offline-layers-button\" title=\"Offline layers\" onClick={storeLayers} style={storeLayersStyle}>\n        {/* TODO:\n          1. Toggle between spinner and image depending on 'thinking' status\n          2. Swap image style based on zoom level\n        */}\n        {offlineing ? <Spinner></Spinner> : <img src=\"/assets/icon/download.svg\" style={iconStyle}></img>}\n      </div>\n    </div>\n  );\n};\n\nexport default MapContainer;\n","import { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@material-ui/core';\nimport React from 'react';\n\ninterface IWarningDialog {\n  isOpen: boolean;\n  handleDisagree: Function;\n  handleAgree: Function;\n  message: string;\n  heading: string;\n}\n\nconst WarningDialog: React.FC<IWarningDialog> = (props) => {\n  const { isOpen, heading, message, handleAgree, handleDisagree } = props;\n\n  return (\n    <Dialog\n      open={isOpen}\n      onClose={() => handleDisagree()}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\">\n      <DialogTitle id=\"alert-dialog-title\">{heading}</DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">{message}</DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={() => handleDisagree()} color=\"primary\">\n          Disagree\n        </Button>\n        <Button onClick={() => handleAgree()} color=\"primary\" autoFocus>\n          Agree\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default WarningDialog;\n","import {\n  Box,\n  Button,\n  Checkbox,\n  Divider,\n  Grid,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemSecondaryAction,\n  makeStyles,\n  Paper,\n  SvgIcon,\n  Theme,\n  Typography,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel\n} from '@material-ui/core';\nimport { Add, DeleteForever, Sync } from '@material-ui/icons';\nimport clsx from 'clsx';\nimport {\n  ActivitySubtype,\n  ActivitySyncStatus,\n  ActivityType,\n  ActivityTypeIcon,\n  FormValidationStatus\n} from 'constants/activities';\nimport { DocType } from 'constants/database';\nimport { DatabaseChangesContext } from 'contexts/DatabaseChangesContext';\nimport { DatabaseContext } from 'contexts/DatabaseContext';\nimport { useInvasivesApi } from 'hooks/useInvasivesApi';\nimport React, { useContext, useEffect, useState, useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport 'styles/spinners.scss';\nimport { notifyError, notifySuccess, notifyWarning } from 'utils/NotificationUtils';\nimport ActivityListDate from './ActivityListDate';\nimport { getErrorMessages } from 'utils/errorHandling';\nimport { addNewActivityToDB } from 'utils/addActivity';\nimport WarningDialog from 'components/common/WarningDialog';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  newActivityButtonsRow: {\n    '& Button': {\n      marginRight: '0.5rem',\n      marginBottom: '0.5rem'\n    }\n  },\n  syncSuccessful: {\n    color: theme.palette.success.main\n  },\n  syncFailed: {\n    color: theme.palette.error.main\n  },\n  activitiyListItem: {\n    display: 'flex',\n    flexDirection: 'row',\n    marginTop: '0.5rem',\n    marginBottom: '0.5rem',\n    border: '1px solid',\n    borderColor: theme.palette.grey[300],\n    borderRadius: '6px'\n  },\n  activityListItem_Grid: {\n    flexDirection: 'row',\n    [theme.breakpoints.down('sm')]: {\n      flexDirection: 'column'\n    }\n  },\n  activitiyListItem_Typography: {\n    [theme.breakpoints.down('sm')]: {\n      display: 'inline',\n      marginRight: '1rem'\n    }\n  },\n  formControl: {\n    marginRight: 20,\n    minWidth: 150\n  }\n}));\n\ninterface IActivityListItem {\n  isDisabled?: boolean;\n  activity: any;\n}\n\nconst ActivityListItem: React.FC<IActivityListItem> = (props) => {\n  const classes = useStyles();\n\n  const databaseContext = useContext(DatabaseContext);\n  const invasivesApi = useInvasivesApi();\n  const [species, setSpecies] = useState(null);\n\n  useEffect(() => {\n    getSpeciesFromActivity();\n  }, []);\n\n  /*\n    Function to get the species for a given activity and set it in state\n    for usage and display in the activities grid\n  */\n  const getSpeciesFromActivity = async () => {\n    /*\n      Temporarily only enabled for plant terrestrial observation subtype\n    */\n    if (props.activity.activitySubtype !== 'Activity_Observation_PlantTerrestrial') {\n      return;\n    }\n\n    const speciesCode = props.activity.formData?.activity_subtype_data?.invasive_plant_code;\n\n    if (speciesCode) {\n      const codeResults = await invasivesApi.getSpeciesDetails([speciesCode]);\n\n      setSpecies(codeResults[0].code_description);\n    }\n  };\n\n  const toggleActivitySyncReadyStatus = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Must save the value because the database call is async, and the event object will be destroyed before it runs.\n    const isChecked = event.target.checked;\n\n    databaseContext.database.upsert(props.activity._id, (activity) => {\n      return { ...activity, sync: { ...activity.sync, ready: isChecked } };\n    });\n  };\n\n  const isDisabled = props.isDisabled || props.activity.sync.status === ActivitySyncStatus.SYNC_SUCCESSFUL;\n\n  return (\n    <Grid className={classes.activityListItem_Grid} container spacing={2}>\n      <Divider flexItem={true} orientation=\"vertical\" />\n      <Grid item md={2}>\n        <Box overflow=\"hidden\" textOverflow=\"ellipsis\" title={props.activity.activitySubtype.split('_')[2]}>\n          <Typography className={classes.activitiyListItem_Typography}>Subtype</Typography>\n          {props.activity.activitySubtype.split('_')[2]}\n        </Box>\n      </Grid>\n      {species && (\n        <>\n          <Divider flexItem={true} orientation=\"vertical\" />\n          <Grid item md={2}>\n            <Box overflow=\"hidden\" textOverflow=\"ellipsis\" title={species}>\n              <Typography className={classes.activitiyListItem_Typography}>Species</Typography>\n              {species}\n            </Box>\n          </Grid>\n        </>\n      )}\n      <Divider flexItem={true} orientation=\"vertical\" />\n      <Grid item md={1}>\n        <Typography variant=\"h6\" className={classes.activitiyListItem_Typography}>\n          Form Status\n        </Typography>\n        {props.activity.formStatus}\n      </Grid>\n      <Divider flexItem={true} orientation=\"vertical\" />\n      <Grid item md={species ? 1 : 2}>\n        <Typography className={classes.activitiyListItem_Typography}>Sync Status</Typography>\n        {props.activity.sync.status}\n      </Grid>\n      <ActivityListDate classes={classes} activity={props.activity} />\n      <Divider flexItem={true} orientation=\"vertical\" />\n      <Grid item md={species ? 1 : 2}>\n        <Typography className={classes.activitiyListItem_Typography}>Reviewed</Typography>\n        <Checkbox\n          disabled={isDisabled}\n          checked={props.activity.sync.ready}\n          onChange={(event) => toggleActivitySyncReadyStatus(event)}\n          onClick={(event) => event.stopPropagation()}\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\ninterface IActivityList {\n  classes?: any;\n  isDisabled?: boolean;\n  activityType: ActivityType;\n  workflowFunction: string;\n}\n\n// TODO change any to a type that defines the overall items being displayed\nconst ActivityList: React.FC<IActivityList> = (props) => {\n  const classes = useStyles();\n\n  const history = useHistory();\n\n  const databaseContext = useContext(DatabaseContext);\n  const databaseChangesContext = useContext(DatabaseChangesContext);\n\n  const [docs, setDocs] = useState<any[]>([]);\n  const [docToDelete, setDocToDelete] = useState(null);\n  const [isWarningDialogOpen, setIsWarningDialogOpen] = useState(false);\n\n  const updateActivityList = useCallback(async () => {\n    const activityResult = await databaseContext.database.find({\n      selector: { docType: DocType.ACTIVITY, activityType: props.activityType },\n      use_index: 'activitiesIndex'\n    });\n\n    setDocs([...activityResult.docs]);\n  }, [databaseContext.database, props.activityType]);\n\n  useEffect(() => {\n    const updateComponent = () => {\n      updateActivityList();\n    };\n\n    updateComponent();\n  }, [databaseChangesContext, updateActivityList]);\n\n  const removeActivity = async (activity: PouchDB.Core.RemoveDocument) => {\n    databaseContext.database.remove(activity);\n  };\n\n  const setActiveActivityAndNavigateToActivityPage = async (doc: any) => {\n    await databaseContext.database.upsert(DocType.APPSTATE, (appStateDoc) => {\n      return { ...appStateDoc, activeActivity: doc._id };\n    });\n\n    if (doc.activityType === 'Observation') {\n      history.push({\n        pathname: `/home/activity/observation`,\n        search: '?observation=' + doc._id,\n        state: { observation: doc._id }\n      });\n    } else {\n      history.push('/home/activity');\n    }\n  };\n\n  // Sort activities to show most recently updated activities at top of list\n  const sortedActivities = docs.sort((a, b): any => {\n    return new Date(b.dateUpdated).valueOf() - new Date(a.dateUpdated).valueOf();\n  });\n\n  return (\n    <List>\n      {sortedActivities.map((doc) => {\n        const isDisabled = props.isDisabled || doc.sync.status === ActivitySyncStatus.SYNC_SUCCESSFUL;\n\n        if (\n          !doc.activitySubtype.includes(props.workflowFunction) &&\n          !['Transect', 'Dispersal'].includes(doc.activityType)\n        ) {\n          return null;\n        }\n\n        return (\n          <Paper key={doc._id}>\n            <ListItem\n              button\n              className={classes.activitiyListItem}\n              onClick={() => setActiveActivityAndNavigateToActivityPage(doc)}>\n              <ListItemIcon>\n                <SvgIcon\n                  fontSize=\"large\"\n                  className={clsx(\n                    (doc.sync.status === ActivitySyncStatus.SYNC_SUCCESSFUL && classes.syncSuccessful) ||\n                      (doc.sync.status === ActivitySyncStatus.SYNC_FAILED && classes.syncFailed)\n                  )}\n                  component={ActivityTypeIcon[props.activityType]}\n                />\n              </ListItemIcon>\n              <ActivityListItem isDisabled={props.isDisabled} activity={doc} />\n              <ListItemSecondaryAction>\n                <IconButton\n                  disabled={isDisabled}\n                  onClick={() => {\n                    setDocToDelete(doc);\n                    setIsWarningDialogOpen(true);\n                  }}>\n                  <DeleteForever />\n                </IconButton>\n              </ListItemSecondaryAction>\n            </ListItem>\n            <WarningDialog\n              isOpen={isWarningDialogOpen}\n              handleDisagree={() => setIsWarningDialogOpen(false)}\n              handleAgree={async () => {\n                await removeActivity(docToDelete);\n                setIsWarningDialogOpen(false);\n              }}\n              heading=\"Delete Activity?\"\n              message=\"Are you sure you would like to delete this activity? Once deleted, this activity cannot be recovered\"\n            />\n          </Paper>\n        );\n      })}\n    </List>\n  );\n};\n\nconst ActivitiesList: React.FC = () => {\n  const classes = useStyles();\n\n  const databaseContext = useContext(DatabaseContext);\n\n  const invasivesApi = useInvasivesApi();\n\n  const [syncing, setSyncing] = useState(false);\n  const [isDisabled, setIsDisable] = useState(false);\n  const [workflowFunction, setWorkflowFunction] = useState('Plant');\n\n  const specialFunctions = [\n    { label: 'Fire Monitoring', type: ActivitySubtype.Transect_FireMonitoring },\n    { label: 'Vegetation Transect (Full, Lumped, Invasive Plant Density)', type: ActivitySubtype.Transect_Vegetation },\n    { label: 'Biocontrol Efficacy', type: ActivitySubtype.Transect_BiocontrolEfficacy }\n  ];\n\n  const syncActivities = async () => {\n    setIsDisable(true);\n    setSyncing(true);\n\n    // fetch all activity documents that are ready to sync\n    const activityResult = await databaseContext.database.find({\n      selector: {\n        docType: DocType.ACTIVITY,\n        formStatus: FormValidationStatus.VALID,\n        'sync.ready': true,\n        'sync.status': { $ne: ActivitySyncStatus.SYNC_SUCCESSFUL }\n      },\n      use_index: 'formStatusIndex'\n    });\n\n    let errorMessages = [];\n\n    // sync each activity one-by-one\n    for (const activity of activityResult.docs) {\n      try {\n        await invasivesApi.createActivity({\n          activity_id: activity.activityId,\n          created_timestamp: activity.dateCreated,\n          activity_type: activity.activityType,\n          activity_subtype: activity.activitySubtype,\n          geometry: activity.geometry,\n          media:\n            activity.photos &&\n            activity.photos.map((photo) => {\n              return { file_name: photo.filepath, encoded_file: photo.dataUrl };\n            }),\n          form_data: activity.formData\n        });\n\n        notifySuccess(databaseContext, `Syncing ${activity.activitySubtype.split('_')[2]} activity has succeeded.`);\n\n        await databaseContext.database.upsert(activity._id, (activityDoc) => {\n          return {\n            ...activityDoc,\n            sync: { ...activityDoc.sync, status: ActivitySyncStatus.SYNC_SUCCESSFUL, error: null }\n          };\n        });\n      } catch (error) {\n        notifyError(databaseContext, JSON.stringify(error));\n        alert(JSON.stringify(error));\n        const errorMessage = getErrorMessages(error.response.status, 'formSync');\n\n        errorMessages.push(`Syncing ${activity.activitySubtype.split('_')[2]} activity has failed: ${errorMessage}`);\n\n        await databaseContext.database.upsert(activity._id, (activityDoc) => {\n          return {\n            ...activityDoc,\n            sync: { ...activityDoc.sync, status: ActivitySyncStatus.SYNC_FAILED, error: error.message }\n          };\n        });\n      }\n    }\n\n    errorMessages.forEach((err: string) => {\n      notifyError(databaseContext, err);\n    });\n\n    setSyncing(false);\n    setIsDisable(false);\n  };\n\n  const handleWorkflowFunctionChange = (event: any) => {\n    setWorkflowFunction(event.target.value);\n  };\n\n  return (\n    <>\n      <Box>\n        <Box mb={3} display=\"flex\" justifyContent=\"space-between\">\n          <FormControl variant=\"outlined\" className={classes.formControl}>\n            <InputLabel>Workflow Functions</InputLabel>\n            <Select value={workflowFunction} onChange={handleWorkflowFunctionChange} label=\"Select Workflow Function\">\n              <MenuItem value=\"Plant\">Plant</MenuItem>\n              <MenuItem value=\"Animal\">Animal</MenuItem>\n              <MenuItem value=\"Special\">Enhanced Collection</MenuItem>\n            </Select>\n          </FormControl>\n          <Button\n            disabled={isDisabled}\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<Sync className={clsx(syncing && 'rotating')} />}\n            onClick={() => syncActivities()}>\n            Submit Records\n          </Button>\n        </Box>\n        <Box>\n          {workflowFunction !== 'Special' && (\n            <Box>\n              <Box>\n                {workflowFunction === 'Plant' && <Typography variant=\"h5\">Observations</Typography>}\n                {workflowFunction === 'Animal' && <Typography variant=\"h5\">Activities</Typography>}\n              </Box>\n              <Box className={classes.newActivityButtonsRow}>\n                {workflowFunction === 'Plant' && (\n                  <>\n                    <Button\n                      disabled={isDisabled}\n                      variant=\"contained\"\n                      startIcon={<Add />}\n                      onClick={() =>\n                        addNewActivityToDB(\n                          databaseContext,\n                          ActivityType.Observation,\n                          ActivitySubtype.Observation_PlantTerrestrial\n                        )\n                      }>\n                      Plant Terrestrial\n                    </Button>\n                    <Button\n                      disabled={isDisabled}\n                      variant=\"contained\"\n                      startIcon={<Add />}\n                      onClick={() =>\n                        addNewActivityToDB(\n                          databaseContext,\n                          ActivityType.Observation,\n                          ActivitySubtype.Observation_PlantAquatic\n                        )\n                      }>\n                      Plant Aquatic\n                    </Button>\n                  </>\n                )}\n\n                <ActivityList\n                  workflowFunction={workflowFunction}\n                  isDisabled={isDisabled}\n                  activityType={ActivityType.Observation}\n                />\n              </Box>\n\n              <Box className={classes.newActivityButtonsRow}>\n                {workflowFunction === 'Animal' && (\n                  <>\n                    <Button\n                      disabled={isDisabled}\n                      variant=\"contained\"\n                      startIcon={<Add />}\n                      onClick={() =>\n                        addNewActivityToDB(\n                          databaseContext,\n                          ActivityType.AnimalActivity,\n                          ActivitySubtype.Activity_AnimalTerrestrial\n                        )\n                      }>\n                      Animal Terrestrial\n                    </Button>\n                    <Button\n                      disabled={isDisabled}\n                      variant=\"contained\"\n                      startIcon={<Add />}\n                      onClick={() =>\n                        addNewActivityToDB(\n                          databaseContext,\n                          ActivityType.AnimalActivity,\n                          ActivitySubtype.Activity_AnimalAquatic\n                        )\n                      }>\n                      Animal Aquatic\n                    </Button>\n                  </>\n                )}\n\n                <ActivityList\n                  workflowFunction={workflowFunction}\n                  isDisabled={isDisabled}\n                  activityType={ActivityType.AnimalActivity}\n                />\n              </Box>\n            </Box>\n          )}\n          {workflowFunction !== 'Special' && workflowFunction !== 'Animal' && (\n            <Box>\n              <Box>\n                <Typography variant=\"h5\">Treatments</Typography>\n              </Box>\n              <Box className={classes.newActivityButtonsRow}>\n                <ActivityList\n                  workflowFunction={workflowFunction}\n                  isDisabled={isDisabled}\n                  activityType={ActivityType.Treatment}\n                />\n              </Box>\n            </Box>\n          )}\n          {workflowFunction !== 'Special' && workflowFunction !== 'Animal' && (\n            <Box>\n              <Box>\n                <Typography variant=\"h5\">Efficacy Monitorings</Typography>\n              </Box>\n              <ActivityList\n                workflowFunction={workflowFunction}\n                isDisabled={isDisabled}\n                activityType={ActivityType.Monitoring}\n              />\n            </Box>\n          )}\n          {workflowFunction === 'Special' && (\n            <>\n              <Box>\n                <Box>\n                  <Typography variant=\"h5\">Transects</Typography>\n                </Box>\n                <Box className={classes.newActivityButtonsRow}>\n                  {specialFunctions.map((item) => (\n                    <Button\n                      key={item.label}\n                      disabled={isDisabled}\n                      variant=\"contained\"\n                      startIcon={<Add />}\n                      onClick={() => {\n                        addNewActivityToDB(databaseContext, ActivityType.Transect, item.type);\n                      }}>\n                      {item.label}\n                    </Button>\n                  ))}\n                </Box>\n\n                <ActivityList\n                  workflowFunction={workflowFunction}\n                  isDisabled={isDisabled}\n                  activityType={ActivityType.Transect}\n                />\n              </Box>\n              <br />\n              <Box>\n                <Box>\n                  <Typography variant=\"h5\">Dispersals</Typography>\n                </Box>\n                <Box className={classes.newActivityButtonsRow}>\n                  <Button\n                    disabled={isDisabled}\n                    variant=\"contained\"\n                    startIcon={<Add />}\n                    onClick={() => {\n                      addNewActivityToDB(\n                        databaseContext,\n                        ActivityType.Dispersal,\n                        ActivitySubtype.Activity_BiologicalDispersal\n                      );\n                    }}>\n                    Biological Dispersal\n                  </Button>\n                </Box>\n\n                <ActivityList\n                  workflowFunction={workflowFunction}\n                  isDisabled={isDisabled}\n                  activityType={ActivityType.Dispersal}\n                />\n              </Box>\n              <br />\n              <Box>\n                <Box>\n                  <Typography variant=\"h5\">Development/Testing</Typography>\n                </Box>\n                <Box className={classes.newActivityButtonsRow}>\n                  <Button\n                    disabled={isDisabled}\n                    variant=\"contained\"\n                    startIcon={<Add />}\n                    onClick={() => notifyError(databaseContext, 'An error message!')}>\n                    Simulate Error\n                  </Button>\n                  <Button\n                    disabled={isDisabled}\n                    variant=\"contained\"\n                    startIcon={<Add />}\n                    onClick={() => notifySuccess(databaseContext, 'A Success message!')}>\n                    Simulate Success\n                  </Button>\n                  <Button\n                    disabled={isDisabled}\n                    variant=\"contained\"\n                    startIcon={<Add />}\n                    onClick={() => notifyWarning(databaseContext, 'A Warning message!')}>\n                    Simulate Warning\n                  </Button>\n                </Box>\n              </Box>\n            </>\n          )}\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nexport default ActivitiesList;\n","import { Container } from '@material-ui/core';\nimport React from 'react';\nimport ActivitiesList from 'components/activities-list/ActivitiesList';\n\ninterface IStatusPageProps {\n  classes?: any;\n}\n\nconst ActivitiesPage: React.FC<IStatusPageProps> = (props) => {\n  return (\n    <Container className={props.classes.container}>\n      <ActivitiesList />\n    </Container>\n  );\n};\n\nexport default ActivitiesPage;\n","import React from 'react';\n\nimport { AddButtonProps } from '@rjsf/core';\n\nimport Button from '@material-ui/core/Button';\nimport AddIcon from '@material-ui/icons/Add';\n\nconst AddButton: React.FC<AddButtonProps> = (props) => (\n  <Button variant=\"contained\" {...props} color=\"primary\">\n    <AddIcon /> Add Item\n  </Button>\n);\n\nexport default AddButton;\n","import React from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Add from '@material-ui/icons/Add';\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Remove from '@material-ui/icons/Remove';\nimport { IconButtonProps as MuiIconButtonProps } from '@material-ui/core/IconButton';\n\nconst mappings: any = {\n  remove: <Remove />,\n  plus: <Add />,\n  'arrow-up': <ArrowUpward />,\n  'arrow-down': <ArrowDownward />\n};\n\ntype IconButtonProps = MuiIconButtonProps & {\n  icon: string;\n};\n\nconst IconButton = (props: IconButtonProps) => {\n  const { icon, className, ...otherProps } = props;\n  return (\n    <Button variant=\"outlined\" {...otherProps} size=\"small\">\n      {mappings[icon]}\n    </Button>\n  );\n};\n\nexport default IconButton;\n","import Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport { ArrayFieldTemplateProps, IdSchema, utils } from '@rjsf/core';\nimport React from 'react';\nimport AddButton from 'rjsf/components/AddButton';\nimport IconButton from 'rjsf/components/IconButton';\n\nconst { isMultiSelect, getDefaultRegistry } = utils;\n\nconst ArrayFieldTemplate = (props: ArrayFieldTemplateProps) => {\n  const { schema, registry = getDefaultRegistry() } = props;\n\n  // TODO: update types so we don't have to cast registry as any\n  if (isMultiSelect(schema, (registry as any).rootSchema)) {\n    return <DefaultFixedArrayFieldTemplate {...props} />;\n  } else {\n    return <DefaultNormalArrayFieldTemplate {...props} />;\n  }\n};\n\ntype ArrayFieldTitleProps = {\n  TitleField: any;\n  idSchema: IdSchema;\n  title: string;\n  required: boolean;\n};\n\nconst ArrayFieldTitle = ({ TitleField, idSchema, title, required }: ArrayFieldTitleProps) => {\n  if (!title) {\n    return null;\n  }\n\n  const id = `${idSchema.$id}__title`;\n  return <TitleField id={id} title={title} required={required} />;\n};\n\ntype ArrayFieldDescriptionProps = {\n  DescriptionField: any;\n  idSchema: IdSchema;\n  description: string;\n};\n\nconst ArrayFieldDescription = ({ DescriptionField, idSchema, description }: ArrayFieldDescriptionProps) => {\n  if (!description) {\n    return null;\n  }\n\n  const id = `${idSchema.$id}__description`;\n  return <DescriptionField id={id} description={description} />;\n};\n\n// Used in the two templates\nconst DefaultArrayItem = (props: any) => {\n  const btnStyle = {\n    flex: 1,\n    paddingLeft: 6,\n    paddingRight: 6,\n    fontWeight: 'bold'\n  };\n\n  return (\n    <Grid container={true} key={props.key} alignItems=\"center\">\n      <Grid item={true} xs={12}>\n        <Box mb={2}>\n          <Paper elevation={1}>\n            <Box p={2}>{props.children}</Box>\n          </Paper>\n        </Box>\n      </Grid>\n\n      {props.hasToolbar && (\n        <Grid item={true}>\n          {(props.hasMoveUp || props.hasMoveDown) && (\n            <IconButton\n              icon=\"arrow-up\"\n              className=\"array-item-move-up\"\n              tabIndex={-1}\n              style={btnStyle as any}\n              disabled={props.disabled || props.readonly || !props.hasMoveUp}\n              onClick={props.onReorderClick(props.index, props.index - 1)}\n            />\n          )}\n\n          {(props.hasMoveUp || props.hasMoveDown) && (\n            <IconButton\n              icon=\"arrow-down\"\n              tabIndex={-1}\n              style={btnStyle as any}\n              disabled={props.disabled || props.readonly || !props.hasMoveDown}\n              onClick={props.onReorderClick(props.index, props.index + 1)}\n            />\n          )}\n\n          {props.hasRemove && (\n            <IconButton\n              icon=\"remove\"\n              tabIndex={-1}\n              style={btnStyle as any}\n              disabled={props.disabled || props.readonly}\n              onClick={props.onDropIndexClick(props.index)}\n            />\n          )}\n        </Grid>\n      )}\n    </Grid>\n  );\n};\n\nconst DefaultFixedArrayFieldTemplate = (props: ArrayFieldTemplateProps) => {\n  return (\n    <fieldset className={props.className}>\n      <ArrayFieldTitle\n        key={`array-field-title-${props.idSchema.$id}`}\n        TitleField={props.TitleField}\n        idSchema={props.idSchema}\n        title={props.uiSchema['ui:title'] || props.title}\n        required={props.required}\n      />\n\n      {(props.uiSchema['ui:description'] || props.schema.description) && (\n        <div className=\"field-description\" key={`field-description-${props.idSchema.$id}`}>\n          {props.uiSchema['ui:description'] || props.schema.description}\n        </div>\n      )}\n\n      <div className=\"row array-item-list\" key={`array-item-list-${props.idSchema.$id}`}>\n        {props.items && props.items.map(DefaultArrayItem)}\n      </div>\n\n      {props.canAdd && (\n        <AddButton className=\"array-item-add\" onClick={props.onAddClick} disabled={props.disabled || props.readonly} />\n      )}\n    </fieldset>\n  );\n};\n\nconst DefaultNormalArrayFieldTemplate = (props: ArrayFieldTemplateProps) => {\n  return (\n    <Box>\n      <ArrayFieldTitle\n        key={`array-field-title-${props.idSchema.$id}`}\n        TitleField={props.TitleField}\n        idSchema={props.idSchema}\n        title={props.uiSchema['ui:title'] || props.title}\n        required={props.required}\n      />\n\n      {(props.uiSchema['ui:description'] || props.schema.description) && (\n        <ArrayFieldDescription\n          key={`array-field-description-${props.idSchema.$id}`}\n          DescriptionField={props.DescriptionField}\n          idSchema={props.idSchema}\n          description={props.uiSchema['ui:description'] || props.schema.description}\n        />\n      )}\n\n      <Grid direction=\"column\" container={true} key={`array-item-list-${props.idSchema.$id}`}>\n        {props.items && props.items.map((p) => DefaultArrayItem(p))}\n\n        {props.canAdd && (\n          <Grid container justify=\"flex-end\">\n            <Grid item={true}>\n              <Box mt={2}>\n                <AddButton\n                  className=\"array-item-add\"\n                  onClick={props.onAddClick}\n                  disabled={props.disabled || props.readonly}\n                />\n              </Box>\n            </Grid>\n          </Grid>\n        )}\n      </Grid>\n    </Box>\n  );\n};\n\nexport default ArrayFieldTemplate;\n","import FormControl from '@material-ui/core/FormControl';\nimport Grid from '@material-ui/core/Grid';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport { utils } from '@rjsf/core';\nimport { JSONSchema7 } from 'json-schema';\nimport React from 'react';\nimport IconButton from 'rjsf/components/IconButton';\n\nconst { ADDITIONAL_PROPERTY_FLAG } = utils;\n\ntype WrapIfAdditionalProps = {\n  children: React.ReactElement;\n  classNames: string;\n  disabled: boolean;\n  id: string;\n  label: string;\n  onDropPropertyClick: (index: string) => (event?: any) => void;\n  onKeyChange: (index: string) => (event?: any) => void;\n  readonly: boolean;\n  required: boolean;\n  schema: JSONSchema7;\n};\n\nconst WrapIfAdditional = (props: WrapIfAdditionalProps) => {\n  const keyLabel = `${props.label} Key`; // i18n ?\n  const additional = props.schema.hasOwnProperty(ADDITIONAL_PROPERTY_FLAG);\n  const btnStyle = {\n    flex: 1,\n    paddingLeft: 6,\n    paddingRight: 6,\n    fontWeight: 'bold'\n  };\n\n  if (!additional) {\n    return <>{props.children}</>;\n  }\n\n  const handleBlur = ({ target }: React.FocusEvent<HTMLInputElement>) => props.onKeyChange(target.value);\n\n  return (\n    <Grid container={true} key={`${props.id}-key`} alignItems=\"center\" spacing={2}>\n      <Grid item={true}>\n        <FormControl fullWidth={true} required={props.required}>\n          <InputLabel>{keyLabel}</InputLabel>\n          <Input\n            defaultValue={props.label}\n            disabled={props.disabled || props.readonly}\n            id={`${props.id}-key`}\n            name={`${props.id}-key`}\n            onBlur={!props.readonly ? handleBlur : undefined}\n            type=\"text\"\n          />\n        </FormControl>\n      </Grid>\n      <Grid item={true} xs>\n        {props.children}\n      </Grid>\n      <Grid item={true}>\n        <IconButton\n          icon=\"remove\"\n          tabIndex={-1}\n          style={btnStyle as any}\n          disabled={props.disabled || props.readonly}\n          onClick={props.onDropPropertyClick(props.label)}\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default WrapIfAdditional;\n","import FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Typography from '@material-ui/core/Typography';\nimport { FieldTemplateProps } from '@rjsf/core';\nimport React from 'react';\nimport WrapIfAdditional from './WrapIfAdditional';\n\nconst FieldTemplate = (props: FieldTemplateProps) => {\n  return (\n    <WrapIfAdditional\n      classNames={props.classNames}\n      disabled={props.disabled}\n      id={props.id}\n      label={props.label}\n      onDropPropertyClick={props.onDropPropertyClick}\n      onKeyChange={props.onKeyChange}\n      readonly={props.readonly}\n      required={props.required}\n      schema={props.schema}>\n      <FormControl\n        fullWidth={true}\n        error={(props.rawErrors && props.rawErrors.length && true) || false}\n        required={props.required}>\n        {props.children}\n        {props.displayLabel && props.rawDescription ? (\n          <Typography variant=\"caption\" color=\"textSecondary\">\n            {props.rawDescription}\n          </Typography>\n        ) : null}\n        {props.rawErrors && props.rawErrors.length > 0 && (\n          <List dense={true} disablePadding={true}>\n            {props.rawErrors.map((error, i: number) => {\n              return (\n                <ListItem key={i} disableGutters={true}>\n                  <FormHelperText id={props.id}>{error}</FormHelperText>\n                </ListItem>\n              );\n            })}\n          </List>\n        )}\n        {props.rawHelp && <FormHelperText id={props.id}>{props.rawHelp}</FormHelperText>}\n      </FormControl>\n    </WrapIfAdditional>\n  );\n};\n\nexport default FieldTemplate;\n","import { Grid, Tooltip } from '@material-ui/core';\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\nimport { makeStyles } from '@material-ui/styles';\nimport { ObjectFieldTemplateProps, utils } from '@rjsf/core';\nimport React from 'react';\nimport AddButton from 'rjsf/components/AddButton';\n\nconst { canExpand } = utils;\n\nconst useStyles = makeStyles({\n  root: {\n    marginTop: 10\n  }\n});\n\nconst ObjectFieldTemplate = (props: ObjectFieldTemplateProps) => {\n  const classes = useStyles();\n\n  const DescriptionField = props.DescriptionField;\n  const TitleField = props.TitleField;\n\n  return (\n    <>\n      {(props.uiSchema['ui:title'] || props.title) && (\n        <TitleField id={`${props.idSchema.$id}-title`} title={props.title} required={props.required} />\n      )}\n      {props.description && (\n        <DescriptionField id={`${props.idSchema.$id}-description`} description={props.description} />\n      )}\n      <Grid container={true} spacing={2} className={classes.root}>\n        {props.properties.map((element: any, index: number) => (\n          <Grid\n            item={true}\n            xs={props.uiSchema['ui:column-xs'] || 12}\n            sm={props.uiSchema['ui:column-sm'] || props.uiSchema['ui:column-xs'] || 12}\n            md={\n              props.uiSchema['ui:column-md'] || props.uiSchema['ui:column-sm'] || props.uiSchema['ui:column-xs'] || 12\n            }\n            lg={\n              props.uiSchema['ui:column-lg'] ||\n              props.uiSchema['ui:column-md'] ||\n              props.uiSchema['ui:column-sm'] ||\n              props.uiSchema['ui:column-xs'] ||\n              12\n            }\n            xl={\n              props.uiSchema['ui:column-xl'] ||\n              props.uiSchema['ui:column-lg'] ||\n              props.uiSchema['ui:column-md'] ||\n              props.uiSchema['ui:column-sm'] ||\n              props.uiSchema['ui:column-xs'] ||\n              12\n            }\n            key={index}\n            style={{ marginBottom: '10px' }}>\n            <>\n              {element.content.props && element.content.props.schema && element.content.props.schema['x-tooltip-text'] && (\n                <Tooltip enterTouchDelay={0} title={element.content.props.schema['x-tooltip-text']} placement=\"left\">\n                  <HelpOutlineIcon style={{ float: 'right', marginBottom: 5, color: 'rgb(170, 170, 170)' }} />\n                </Tooltip>\n              )}\n              {element.content}\n            </>\n          </Grid>\n        ))}\n        {canExpand(props.schema, props.uiSchema, props.formData) && (\n          <Grid container justify=\"flex-end\">\n            <Grid item={true}>\n              <AddButton\n                className=\"object-property-expand\"\n                onClick={props.onAddClick(props.schema)}\n                disabled={props.disabled || props.readonly}\n              />\n            </Grid>\n          </Grid>\n        )}\n      </Grid>\n    </>\n  );\n};\n\nexport default ObjectFieldTemplate;\n","/**\n * This file should only contain UI Schema items that have NO nested elements.\n *\n * Example of schema item without nested element:\n *\n * const Obj = {\n *   some_field: {}\n * }\n */\n\n/*\n  Styling\n*/\n\nconst FourColumnStyle = {\n  'ui:column-xs': 12,\n  'ui:column-md': 6,\n  'ui:column-lg': 3\n};\n\nconst ThreeColumnStyle = {\n  'ui:column-xs': 12,\n  'ui:column-md': 6,\n  'ui:column-lg': 4\n};\n\nconst TwoColumnStyle = {\n  'ui:column-xs': 12,\n  'ui:column-md': 6,\n  'ui:column-lg': 6\n};\n\nconst Persons = {\n  person_name: {}\n};\n\nconst Jurisdictions = {\n  jurisdiction_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  percent_covered: {}\n};\n\nconst Herbicide = {\n  liquid_herbicide_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  herbicide_amount: {},\n  mix_delivery_rate: {},\n  application_rate: {},\n  dilution: {\n    'ui:readonly': true\n  },\n  specific_treatment_area: {\n    'ui:readonly': true\n  },\n  tank_volume: {\n    'ui:readonly': true\n  }\n};\n\nconst ProjectCode = {\n  description: {}\n};\n\nconst TerrestrialPlants = {\n  invasive_plant_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  plant_life_stage_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  invasive_plant_density_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  invasive_plant_distribution_code: {\n    'ui:widget': 'single-select-autocomplete'\n  }\n};\n\nconst AquaticAnimals = {\n  invasive_animal_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  early_detection_rapid_resp_ind: {},\n  negative_obs_ind: {},\n  life_stage: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  sex: {},\n  reproductive_maturity: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  length: {},\n  length_method: {},\n  weight: {},\n  behaviour: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  condition: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  captured: {},\n  disposed: {},\n  specimen_id: {},\n  sample_collected: {},\n  sample_id: {},\n  sample_type: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  age_analysis: {},\n  genetic_analysis: {}\n};\n\nconst AquaticPlants = {\n  sample_point_id: {},\n  invasive_plant_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  provincial_edrr: {},\n  invasive_plant_density_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  invasive_plant_distribution_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  plant_life_stage_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  plant_health_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  plant_seed_stage_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  voucher_specimen_collected: {},\n  e_dna_sample: {},\n  genetic_structure_collected: {},\n  genetic_sample_id: {},\n  negative_obs_ind: {}\n};\n\nconst WaterbodyData = {\n  waterbody_name_gazetted: {},\n  waterbody_name_local: {},\n  waterbody_type: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  waterbody_use: {}\n};\n\nconst ProjectData = {\n  surveyors: {},\n  survey_type: {\n    'ui:widget': 'single-select-autocomplete'\n  }\n};\n\nconst TerrainCharacteristics = {\n  setting: {},\n  aspect: {},\n  hillslope_coupling: {},\n  shoreline_type: {},\n  cover: {},\n  recreational_features: {},\n  number_inlets: {},\n  inlet_type: {},\n  number_outlets: {},\n  outlet_type: {}\n};\n\nconst Access = {\n  access_air: {},\n  access_road: {},\n  access_auto: {},\n  access_off_road: {},\n  access_off_road_distance: {},\n  access_trail: {},\n  access_trail_distance: {},\n  access_closest_community: {},\n  access_water_access: {},\n  comments: {\n    'ui:widget': 'textarea'\n  }\n};\n\nconst AquaticFlora = {\n  emergent_vegetation: {},\n  emergent_vegetation_dominant_species: {},\n  submergent_vegetation: {},\n  submergent_vegetation_dominant_species: {},\n  floating_algae_present: {},\n  lake_bathymetry: {},\n  littoral_area: {},\n  max_depth: {},\n  benchmark: {},\n  max_water_level: {},\n  benchmark_type: {\n    'ui:widget': 'textarea'\n  }\n};\n\nconst WaterQuality = {\n  water_sample_depth: {},\n  secchi_depth: {},\n  water_colour: {}\n};\n\nconst ConductivityProfile = {\n  depth: {},\n  dissolved_oxygen: {},\n  temperature: {},\n  conductivity: {},\n  thermocline: {}\n};\n\nconst SubstrateSample = {\n  date_installed: {},\n  date_monitored: {},\n  waterbody: {},\n  site_location: {},\n  depth: {},\n  latitude: {},\n  longitude: {},\n  water_temperature: {},\n  water_column_ph: {},\n  secchi_depth: {},\n  preservative_type: {},\n  location_description: {\n    'ui:widget': 'textarea'\n  },\n  comments: {\n    'ui:widget': 'textarea'\n  },\n  microscopy_species: {\n    'ui:widget': 'textarea'\n  },\n  e_dna_sample: {\n    'ui:widget': 'textarea'\n  },\n  adult_suspected_presence: {},\n  sample_collected: {}\n};\n\nconst PlanktonTowSample = {\n  tows: {},\n  date_time: {},\n  plankton_tow_type: {},\n  tow_depth_length: {},\n  volume_sampled: {},\n  containers: {},\n  preserved_sample_ph: {},\n  arrival_sample_ph: {},\n  preservative_type: {},\n  preservation_concentration: {},\n  other_species: {},\n  veliger_positive: {},\n  buffered: {}\n};\n\nconst NetTrapSpecifications = {\n  haul_number: {},\n  date_time_in: {},\n  date_time_out: {},\n  net_trap_type: {},\n  length: {},\n  depth: {},\n  mesh_size: {},\n  mesh_description: {},\n  zone: {},\n  habitat: {},\n  substrate_type: {}\n};\n\nconst ElectrofisherSpecifications = {\n  passes: {},\n  date_time_in: {},\n  date_time_out: {},\n  one_pass_time: {},\n  length: {},\n  width: {},\n  enclosure: {},\n  voltage: {},\n  frequency: {},\n  pulse: {},\n  make: {},\n  model: {}\n};\n\nconst EDna = {\n  comment: {}\n};\n\nconst HabitatAlteration = {\n  type: {},\n  description: {\n    'ui:widget': 'textarea'\n  }\n};\n\nconst Chemical = {\n  type: {},\n  description: {\n    'ui:widget': 'textarea'\n  }\n};\n\nconst Biological = {\n  type: {},\n  description: {\n    'ui:widget': 'textarea'\n  }\n};\n\nconst ShorelineSurveys = {\n  date_time: {},\n  waterbody: {},\n  target_species: {},\n  weather_conditions: {},\n  sampling_distance: {},\n  sampling_location_lat: {},\n  sampling_location_lng: {},\n  substrate_type: {},\n  species_present: {},\n  density: {},\n  diameter_largest_individual: {},\n  other_species_found: {},\n  comments: {\n    'ui:widget': 'textarea'\n  }\n};\n\nconst SurveyData = {\n  survey_design: {},\n  survey_start_date_time: {},\n  survey_end_date_time: {},\n  survey_details: {}\n};\n\nconst TreatmentData = {\n  treatment_start_date_time: {},\n  treatment_end_date_time: {},\n  permit_number: {},\n  survey_details: {}\n};\n\nconst MonitoringData = {\n  monitoring_start_date_time: {},\n  monitoring_end_date_time: {},\n  monitoring_results: {\n    'ui:widget': 'textarea'\n  },\n  comment: {\n    'ui:widget': 'textarea'\n  }\n};\n\nconst InvasivePlants = {\n  invasive_plant_code: {\n    'ui:widget': 'single-select-autocomplete'\n  }\n};\n\n/*\n  Transect\n*/\n\nconst TransectInvasivePlants = {\n  invasive_plant_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  invasive_plant_density_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  invasive_plant_distribution_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  soil_texture_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  linear_infestation: {},\n  biological_agent_code: {\n    'ui:widget': 'single-select-autocomplete'\n  }\n};\n\nconst TransectLine = {\n  transect_line_id: {},\n  transect_comment: {},\n  start_x_utm: {},\n  start_y_utm: {},\n  end_x_utm: {},\n  end_y_utm: {},\n  transect_length: {\n    'ui:readonly': true\n  },\n  transect_bearing: {\n    'ui:readonly': true\n  }\n};\n\nconst TransectData = {\n  utm_zone: {},\n  transect_start_date_time: {},\n  transect_end_date_time: {},\n  project_number: {},\n  surveyor1_name: {},\n  surveyor2_name: {},\n  field_recorder_name: {},\n  research_trial_code: {},\n  realm_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  site_aspect: {},\n  site_aspect_variability: {},\n  site_slope: {},\n  site_slope_variability: {},\n  site_elevation: {},\n  cloud_cover_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  beaufort_wind_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  precipitation_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  burn_severity_code: {},\n  ecological_moisture_regime_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  mesoslope_position_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  site_surface_shape_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  soil_properties_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  surface_substrate_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  site_activity_disturbance: {},\n  disturbance_site_defunct: {},\n  disturbance_condition_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  disturbance_type_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  invasive_plant_change_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  target_plant_change_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  treatment_seeded: {},\n  density_count_type_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  trace_plants: {},\n  growth_pattern: {},\n  frame_size_code: {},\n  biocontrol_noted_code: {},\n  photoplot_start: {},\n  photoplot_end: {},\n  photoplot_aerials: {},\n  photoplot_full_25m: {},\n  plot_location: {}\n};\n\nconst FireMonitoringTransectPoints = {\n  sample_point_id: {},\n  offset_distance: {},\n  utm_x: {\n    'ui:readonly': true\n  },\n  utm_y: {\n    'ui:readonly': true\n  },\n  veg_transect_sampler: {},\n  veg_transect_recorder: {},\n  veg_transect_native_forbs: {},\n  veg_transect_grasses: {},\n  veg_transect_bare_ground: {},\n  veg_transect_shrubs: {},\n  veg_transect_bryophytes: {},\n  veg_transect_litter: {},\n  invasive_plants: {\n    items: {\n      ...InvasivePlants\n    }\n  }\n};\n\nconst FireMonitoringTransectLines = {\n  transect_line: {\n    ...TwoColumnStyle,\n    ...TransectLine\n  },\n  fire_monitoring_transect_points: {\n    items: {\n      ...FourColumnStyle,\n      ...FireMonitoringTransectPoints\n    }\n  }\n};\n\nconst Transect_FireMonitoring = {\n  transect_data: {\n    ...ThreeColumnStyle,\n    ...TransectData\n  },\n  fire_monitoring_transect_lines: {\n    items: {\n      ...FireMonitoringTransectLines\n    }\n  }\n};\n\nconst VegetationTransectPoints = {\n  sample_point_id: {},\n  offset_distance: {},\n  utm_x: {\n    'ui:readonly': true\n  },\n  utm_y: {\n    'ui:readonly': true\n  }\n};\n\nconst InvasivePlantsPercentCover = {\n  invasive_plant_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  percent_covered: {}\n};\n\nconst InvasivePlantsNumberPlants = {\n  invasive_plant_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  number_plants: {}\n};\n\nconst InvasivePlantsDaubenmire = {\n  invasive_plant_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  daubenmire_classification: {\n    'ui:widget': 'single-select-autocomplete'\n  }\n};\n\nconst LumpedSpeciesNumberPlants = {\n  lumped_species_type: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  number_plants: {}\n};\n\nconst LumpedSpeciesPercentCover = {\n  lumped_species_type: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  percent_covered: {\n    'ui:widget': 'single-select-autocomplete'\n  }\n};\n\nconst LumpedSpeciesDaubenmire = {\n  lumped_species_type: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  daubenmire_classification: {\n    'ui:widget': 'single-select-autocomplete'\n  }\n};\n\nconst CustomSpeciesPercentCover = {\n  custom_species_type: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  percent_covered: {}\n};\n\nconst CustomSpeciesNumberPlants = {\n  custom_species_type: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  number_plants: {}\n};\n\nconst CustomSpeciesDaubenmire = {\n  custom_species_type: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  daubenmire_classification: {\n    'ui:widget': 'single-select-autocomplete'\n  }\n};\n\nconst VegetationTransectSpeciesPercentCover = {\n  invasive_plants: {\n    items: {\n      ...InvasivePlantsPercentCover\n    }\n  },\n  lumped_species: {\n    items: {\n      ...LumpedSpeciesPercentCover\n    }\n  },\n  custom_species: {\n    items: {\n      ...CustomSpeciesPercentCover\n    }\n  }\n};\n\nconst VegetationTransectSpeciesNumberPlants = {\n  invasive_plants: {\n    items: {\n      ...InvasivePlantsNumberPlants\n    }\n  },\n  lumped_species: {\n    items: {\n      ...LumpedSpeciesNumberPlants\n    }\n  },\n  custom_species: {\n    items: {\n      ...CustomSpeciesNumberPlants\n    }\n  }\n};\n\nconst VegetationTransectSpeciesDaubenmire = {\n  invasive_plants: {\n    items: {\n      ...InvasivePlantsDaubenmire\n    }\n  },\n  lumped_species: {\n    items: {\n      ...LumpedSpeciesDaubenmire\n    }\n  },\n  custom_species: {\n    items: {\n      ...CustomSpeciesDaubenmire\n    }\n  }\n};\n\nconst VegetationTransectPointsPercentCover = {\n  vegetation_transect_points: {\n    ...FourColumnStyle,\n    ...VegetationTransectPoints\n  },\n  vegetation_transect_species: {\n    ...ThreeColumnStyle,\n    ...VegetationTransectSpeciesPercentCover\n  }\n};\n\nconst VegetationTransectPointsNumberPlants = {\n  vegetation_transect_points: {\n    ...FourColumnStyle,\n    ...VegetationTransectPoints\n  },\n  vegetation_transect_species: {\n    ...ThreeColumnStyle,\n    ...VegetationTransectSpeciesNumberPlants\n  }\n};\n\nconst VegetationTransectPointsDaubenmire = {\n  vegetation_transect_points: {\n    ...FourColumnStyle,\n    ...VegetationTransectPoints\n  },\n  vegetation_transect_species: {\n    ...ThreeColumnStyle,\n    ...VegetationTransectSpeciesDaubenmire\n  }\n};\n\nconst VegetationTransectLines = {\n  transect_line: {\n    ...TwoColumnStyle,\n    ...TransectLine\n  },\n  vegetation_transect_points_percent_cover: {\n    items: {\n      ...VegetationTransectPointsPercentCover\n    }\n  },\n  vegetation_transect_points_number_plants: {\n    items: {\n      ...VegetationTransectPointsNumberPlants\n    }\n  },\n  vegetation_transect_points_daubenmire: {\n    items: {\n      ...VegetationTransectPointsDaubenmire\n    }\n  }\n};\n\nconst Transect_Vegetation = {\n  transect_data: {\n    ...ThreeColumnStyle,\n    ...TransectData\n  },\n  vegetation_transect_lines: {\n    items: {\n      ...VegetationTransectLines\n    }\n  }\n};\n\nconst BiocontrolEfficacyTransectPoints = {\n  sample_point_id: {},\n  offset_distance: {},\n  utm_x: {\n    'ui:readonly': true\n  },\n  utm_y: {\n    'ui:readonly': true\n  },\n  veg_transect_sampler: {},\n  veg_transect_recorder: {},\n  veg_transect_target: {},\n  veg_transect_other_ips: {},\n  veg_transect_native_forbs: {},\n  veg_transect_grasses: {},\n  veg_transect_bare_ground: {},\n  veg_transect_shrubs: {},\n  veg_transect_bryophytes: {},\n  veg_transect_litter: {},\n  veg_total_percentage: {\n    'ui:readonly': true\n  }\n};\n\nconst BiocontrolEfficacyTransectLines = {\n  transect_line: {\n    ...TwoColumnStyle,\n    ...TransectLine\n  },\n  biocontrol_efficacy_transect_points: {\n    items: {\n      ...FourColumnStyle,\n      ...BiocontrolEfficacyTransectPoints\n    }\n  }\n};\n\nconst Transect_BiocontrolEfficacy = {\n  transect_data: {\n    ...ThreeColumnStyle,\n    ...TransectData\n  },\n  transect_invasive_plants: {\n    items: {\n      ...ThreeColumnStyle,\n      ...TransectInvasivePlants\n    }\n  },\n  biocontrol_efficacy_transect_lines: {\n    items: {\n      ...BiocontrolEfficacyTransectLines\n    }\n  }\n};\n\n/*\n  Observation\n*/\n\nconst Observation = {\n  observation_type_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  observation_persons: {\n    items: {\n      ...Persons\n    }\n  }\n};\n\nconst Observation_PlantTerrestrial_Data = {\n  soil_texture_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  specific_use_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  slope_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  aspect_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  research_detection_ind: {},\n  well_ind: {},\n  special_care_ind: {}\n};\n\nconst Observation_PlantTerrestrial = {\n  observation_plant_terrestrial_data: {\n    ...FourColumnStyle,\n    ...Observation_PlantTerrestrial_Data\n  },\n  invasive_plants: {\n    items: {\n      ...FourColumnStyle,\n      ...TerrestrialPlants\n    }\n  }\n};\n\nconst Observation_PlantAquatic = {\n  waterbody_data: {\n    ...ThreeColumnStyle,\n    ...WaterbodyData,\n    water_level_management: {\n      'ui:widget': 'single-select-autocomplete'\n    },\n    substrate_type: {\n      'ui:widget': 'single-select-autocomplete'\n    },\n    tidal_influence: {},\n    comment: {\n      'ui:widget': 'textarea'\n    }\n  },\n  project_data: {\n    ...TwoColumnStyle,\n    ...ProjectData\n  },\n  terrain_characteristics: {\n    ...ThreeColumnStyle,\n    adjacent_land_use: {},\n    inflow_permanent: {},\n    inflow_other: {},\n    outflow: {},\n    shoreline_types: {}\n  },\n  water_quality: {\n    ...ThreeColumnStyle,\n    ...WaterQuality\n  },\n  invasive_plants: {\n    items: {\n      ...ThreeColumnStyle,\n      ...AquaticPlants\n    }\n  }\n};\n\n/*\n  Animal Activity\n*/\n\nconst Activity_AnimalTerrestrial = {\n  comment: {\n    'ui:widget': 'textarea'\n  }\n};\n\nconst Activity_AnimalAquatic = {\n  invasive_aquatic_animals: {\n    items: {\n      ...ThreeColumnStyle,\n      ...AquaticAnimals\n    }\n  },\n  site_information: {\n    waterbody_data: {\n      ...FourColumnStyle,\n      ...WaterbodyData,\n      reach_number: {},\n      adjacent_land_use: {},\n      watershed_code: {},\n      waterbody_id: {},\n      additional_site_features: {\n        'ui:widget': 'textarea'\n      },\n      comment: {\n        'ui:widget': 'textarea'\n      }\n    },\n    terrain_characteristics: {\n      ...FourColumnStyle,\n      ...TerrainCharacteristics\n    },\n    access: {\n      ...FourColumnStyle,\n      ...Access\n    },\n    aquatic_flora: {\n      ...ThreeColumnStyle,\n      ...AquaticFlora\n    },\n    water_quality: {\n      ...ThreeColumnStyle,\n      ...WaterQuality,\n      water_sample: {},\n      water_sample_requisition_number: {},\n      surface_water_temperature: {},\n      field_ph: {},\n      turbidity: {},\n      ice_depth: {}\n    },\n    conductivity_profile: {\n      ...ThreeColumnStyle,\n      ...ConductivityProfile\n    }\n  },\n  activity_data: {\n    survey_data: {\n      ...TwoColumnStyle,\n      ...SurveyData\n    },\n    treatment_data: {\n      ...TwoColumnStyle,\n      ...TreatmentData\n    },\n    monitoring_data: {\n      ...TwoColumnStyle,\n      ...MonitoringData\n    },\n    net_trap_specifications: {\n      ...ThreeColumnStyle,\n      ...NetTrapSpecifications\n    },\n    electrofisher_specifications: {\n      ...ThreeColumnStyle,\n      ...ElectrofisherSpecifications\n    },\n    plankton_tow_sample: {\n      ...ThreeColumnStyle,\n      ...PlanktonTowSample\n    },\n    substrate_sample: {\n      ...ThreeColumnStyle,\n      ...SubstrateSample\n    },\n    shoreline_surveys: {\n      ...ThreeColumnStyle,\n      ...ShorelineSurveys\n    },\n    edna: {\n      ...ThreeColumnStyle,\n      ...EDna\n    },\n    habitat_alteration: {\n      ...TwoColumnStyle,\n      ...HabitatAlteration\n    },\n    chemical: {\n      ...TwoColumnStyle,\n      ...Chemical\n    },\n    biological: {\n      ...TwoColumnStyle,\n      ...Biological\n    }\n  }\n};\n\n/*\n  Dispersal\n*/\n\nconst Dispersal_BiologicalDispersal = {\n  monitoring_organization: {},\n  biological_agent_presence_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  count_duration: {},\n  biological_agent_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  plant_count: {},\n  biological_agent_count: {},\n  applicator1_name: {},\n  applicator2_name: {},\n  treatment_organization: {},\n  invasive_plant_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  phen_transect_sampler: {},\n  phen_transect_recorder: {},\n  phen_transect_seedlings: {},\n  phen_transect_rosettes: {},\n  phen_transect_bolting: {},\n  phen_transect_flowering: {},\n  phen_transect_seeds: {},\n  phen_transect_senescent: {},\n  phen_total_plants: {},\n  phen_number_stems: {},\n  phen_tallest_1: {},\n  phen_tallest_2: {},\n  phen_tallest_3: {},\n  phen_tallest_4: {},\n  phen_level_se: {},\n  phen_level_ro: {},\n  phen_level_bo: {},\n  phen_level_fl: {},\n  phen_level_sf: {},\n  phen_level_sc: {},\n  phen_total_percentage: {\n    'ui:readonly': true\n  }\n};\n\n/*\n  Treatment\n*/\n\nconst Treatment = {\n  activity_id: {\n    'ui:readonly': true\n  },\n  treatment_organization: {},\n  treatment_location: {\n    'ui:widget': 'textarea'\n  },\n  treatment_persons: {\n    items: {\n      ...Persons\n    }\n  }\n};\n\nconst Treatment_MechanicalPlant = {\n  invasive_plant_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  mechanical_method_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  mechanical_disposal_code: {\n    'ui:widget': 'single-select-autocomplete'\n  }\n};\n\nconst Treatment_MechanicalPlant_BulkEdit = {\n  invasive_plant_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  mechanical_method_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  mechanical_disposal_code: {\n    'ui:widget': 'single-select-autocomplete'\n  }\n};\n\nconst Treatment_BiologicalPlant = {\n  invasive_plant_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  treatment_issues_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  classified_area_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  release_quantity: {},\n  mortality: {},\n  agent_source: {},\n  biological_agent_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  biological_agent_stage_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  bioagent_maturity_status_code: {\n    'ui:widget': 'single-select-autocomplete'\n  }\n};\n\nconst Treatment_BiologicalPlant_BulkEdit = {\n  invasive_plant_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  classified_area_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  biological_agent_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  biological_agent_stage_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  bioagent_maturity_status_code: {\n    'ui:widget': 'single-select-autocomplete'\n  }\n};\n\n/*\n  Monitoring\n*/\n\nconst Monitoring = {\n  activity_id: {\n    'ui:readonly': true\n  },\n  observer_first_name: {},\n  observer_last_name: {},\n  efficacy_code: {\n    'ui:widget': 'single-select-autocomplete'\n  }\n};\n\nconst Monitoring_BiologicalTerrestrialPlant = {\n  plant_count: {},\n  agent_count: {},\n  count_duration: {},\n  agent_destroyed_ind: {},\n  legacy_presence_ind: {},\n  foliar_feeding_damage_ind: {},\n  root_feeding_damage_ind: {},\n  oviposition_marks_ind: {},\n  eggs_present_ind: {},\n  larvae_present_ind: {},\n  pupae_present_ind: {},\n  adults_present_ind: {},\n  tunnels_present_ind: {},\n  biological_agent_spread: {}\n};\n\n/*\n  Export\n*/\n\nconst BaseUISchemaComponents = {\n  Activity_AnimalTerrestrial,\n  Activity_AnimalAquatic,\n  Observation,\n  Observation_PlantTerrestrial,\n  Observation_PlantAquatic,\n  Transect_FireMonitoring,\n  Transect_Vegetation,\n  Transect_BiocontrolEfficacy,\n  Dispersal_BiologicalDispersal,\n  Treatment,\n  Treatment_MechanicalPlant,\n  Treatment_MechanicalPlant_BulkEdit,\n  Treatment_BiologicalPlant,\n  Treatment_BiologicalPlant_BulkEdit,\n  Monitoring,\n  Monitoring_BiologicalTerrestrialPlant,\n  ProjectCode,\n  Herbicide,\n  FourColumnStyle,\n  ThreeColumnStyle,\n  TwoColumnStyle,\n  Jurisdictions\n};\n\nexport default BaseUISchemaComponents;\n","/**\n * This file should contain any UI Schema items that have one or more nested elements.\n *\n * Example of schema item with nested element:\n *\n * const Obj = {\n *   some_nested_field: {\n *      ...nested_field_properties\n *   }\n * }\n */\n\nimport BaseUISchemaComponents from 'rjsf/uiSchema/BaseUISchemaComponents';\n\nconst Treatment_ChemicalPlant = {\n  activity_id: {\n    'ui:readonly': true\n  },\n  applicator1_name: {},\n  applicator1_license: {},\n  applicator2_name: {},\n  applicator2_license: {},\n  pesticide_employer_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  pesticide_user_license_number: {},\n  chemical_method_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  temperature: {},\n  humidity: {},\n  pest_management_plan: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  invasive_plant_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  herbicide: {\n    items: {\n      ...BaseUISchemaComponents.Herbicide\n    }\n  },\n  wind_speed: {},\n  wind_direction_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  pesticide_use_permit_PUP: {},\n  signage_on_site: {}\n};\n\nconst Treatment_ChemicalPlant_BulkEdit = {\n  pesticide_employer_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  pest_management_plan: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  pesticide_use_permit_PUP: {},\n  treatment_issues_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  chemical_method_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  herbicide: {\n    items: {\n      ...BaseUISchemaComponents.Herbicide\n    }\n  },\n  invasive_plant_code: {\n    'ui:widget': 'single-select-autocomplete'\n  }\n};\n\nconst Activity = {\n  activity_date_time: {\n    'ui:widget': 'datetime'\n  },\n  latitude: {\n    'ui:readonly': true\n  },\n  longitude: {\n    'ui:readonly': true\n  },\n  reported_area: {\n    'ui:readonly': true\n  },\n  invasive_species_agency_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  jurisdictions: {\n    items: {\n      ...BaseUISchemaComponents.Jurisdictions\n    }\n  },\n  general_comment: {},\n  access_description: {\n    'ui:widget': 'textarea'\n  },\n  project_code: {\n    items: {\n      ...BaseUISchemaComponents.ProjectCode\n    }\n  }\n};\n\nconst Activity_BulkEdit = {\n  invasive_species_agency_code: {\n    'ui:widget': 'single-select-autocomplete'\n  },\n  jurisdiction_code: {\n    'ui:widget': 'single-select-autocomplete'\n  }\n};\n\nconst MonitoringActivity = {\n  ...Activity,\n  access_description: {\n    ...Activity.access_description,\n    'ui:readonly': true\n  },\n  jurisdiction_code: {\n    'ui:disabled': true\n  }\n};\n\nconst UISchemaComponents = {\n  Treatment_ChemicalPlant,\n  Activity,\n  MonitoringActivity,\n  Activity_BulkEdit,\n  Treatment_ChemicalPlant_BulkEdit\n};\n\nexport default UISchemaComponents;\n","/**\n * This file should only contain root level Schema items.\n *\n * These should mirror the schemas of the same name in the api-doc.json.\n */\n\nimport UISchemaComponents from 'rjsf/uiSchema/UISchemaComponents';\nimport BaseUISchemaComponents from 'rjsf/uiSchema/BaseUISchemaComponents';\n\nconst Activity_Observation_PlantTerrestrial = {\n  activity_data: {\n    ...BaseUISchemaComponents.ThreeColumnStyle,\n    ...UISchemaComponents.Activity\n  },\n  activity_type_data: {\n    ...BaseUISchemaComponents.TwoColumnStyle,\n    ...BaseUISchemaComponents.Observation\n  },\n  activity_subtype_data: {\n    ...BaseUISchemaComponents.Observation_PlantTerrestrial\n  }\n};\n\nconst Activity_Observation_PlantTerrestrial_BulkEdit = {\n  activity_data: {\n    ...BaseUISchemaComponents.TwoColumnStyle,\n    ...UISchemaComponents.Activity_BulkEdit\n  }\n};\n\nconst Activity_Observation_PlantAquatic = {\n  activity_data: {\n    ...BaseUISchemaComponents.ThreeColumnStyle,\n    ...UISchemaComponents.Activity\n  },\n  activity_type_data: {\n    ...BaseUISchemaComponents.TwoColumnStyle,\n    ...BaseUISchemaComponents.Observation\n  },\n  activity_subtype_data: {\n    ...BaseUISchemaComponents.Observation_PlantAquatic\n  }\n};\n\nconst Activity_AnimalActivity_AnimalTerrestrial = {\n  activity_data: {\n    ...BaseUISchemaComponents.ThreeColumnStyle,\n    ...UISchemaComponents.Activity\n  },\n  activity_subtype_data: {\n    ...BaseUISchemaComponents.ThreeColumnStyle,\n    ...BaseUISchemaComponents.Activity_AnimalTerrestrial\n  }\n};\n\nconst Activity_AnimalActivity_AnimalAquatic = {\n  activity_data: {\n    ...BaseUISchemaComponents.ThreeColumnStyle,\n    ...UISchemaComponents.Activity\n  },\n  activity_subtype_data: {\n    ...BaseUISchemaComponents.Activity_AnimalAquatic\n  }\n};\n\nconst Activity_Transect_FireMonitoring = {\n  activity_data: {\n    ...BaseUISchemaComponents.ThreeColumnStyle,\n    ...UISchemaComponents.Activity\n  },\n  activity_subtype_data: {\n    ...BaseUISchemaComponents.Transect_FireMonitoring\n  }\n};\n\nconst Activity_Transect_Vegetation = {\n  activity_data: {\n    ...BaseUISchemaComponents.ThreeColumnStyle,\n    ...UISchemaComponents.Activity\n  },\n  activity_subtype_data: {\n    ...BaseUISchemaComponents.Transect_Vegetation\n  }\n};\n\nconst Activity_Transect_BiocontrolEfficacy = {\n  activity_data: {\n    ...BaseUISchemaComponents.ThreeColumnStyle,\n    ...UISchemaComponents.Activity\n  },\n  activity_subtype_data: {\n    ...BaseUISchemaComponents.Transect_BiocontrolEfficacy\n  }\n};\n\nconst Activity_Dispersal_BiologicalDispersal = {\n  activity_data: {\n    ...BaseUISchemaComponents.ThreeColumnStyle,\n    ...UISchemaComponents.Activity\n  },\n  activity_subtype_data: {\n    ...BaseUISchemaComponents.ThreeColumnStyle,\n    ...BaseUISchemaComponents.Dispersal_BiologicalDispersal\n  }\n};\n\nconst Activity_Treatment_ChemicalPlant = {\n  activity_data: {\n    ...BaseUISchemaComponents.ThreeColumnStyle,\n    ...UISchemaComponents.Activity\n  },\n  activity_subtype_data: {\n    ...BaseUISchemaComponents.ThreeColumnStyle,\n    ...UISchemaComponents.Treatment_ChemicalPlant\n  }\n};\n\nconst Activity_Treatment_ChemicalPlant_BulkEdit = {\n  activity_data: {\n    ...BaseUISchemaComponents.ThreeColumnStyle,\n    ...UISchemaComponents.Activity_BulkEdit\n  },\n  activity_subtype_data: {\n    ...BaseUISchemaComponents.ThreeColumnStyle,\n    ...UISchemaComponents.Treatment_ChemicalPlant_BulkEdit\n  }\n};\n\nconst Activity_Treatment_MechanicalPlant = {\n  activity_data: {\n    ...BaseUISchemaComponents.ThreeColumnStyle,\n    ...UISchemaComponents.Activity\n  },\n  activity_type_data: {\n    ...BaseUISchemaComponents.TwoColumnStyle,\n    ...BaseUISchemaComponents.Treatment\n  },\n  activity_subtype_data: {\n    ...BaseUISchemaComponents.ThreeColumnStyle,\n    ...BaseUISchemaComponents.Treatment_MechanicalPlant\n  }\n};\n\nconst Activity_Treatment_MechanicalPlant_BulkEdit = {\n  activity_data: {\n    ...BaseUISchemaComponents.ThreeColumnStyle,\n    ...UISchemaComponents.Activity_BulkEdit\n  },\n  activity_subtype_data: {\n    ...BaseUISchemaComponents.ThreeColumnStyle,\n    ...BaseUISchemaComponents.Treatment_MechanicalPlant_BulkEdit\n  }\n};\n\nconst Activity_Treatment_BiologicalPlant = {\n  activity_data: {\n    ...BaseUISchemaComponents.ThreeColumnStyle,\n    ...UISchemaComponents.Activity\n  },\n  activity_type_data: {\n    ...BaseUISchemaComponents.TwoColumnStyle,\n    ...BaseUISchemaComponents.Treatment\n  },\n  activity_subtype_data: {\n    ...BaseUISchemaComponents.ThreeColumnStyle,\n    ...BaseUISchemaComponents.Treatment_BiologicalPlant\n  }\n};\n\nconst Activity_Treatment_BiologicalPlant_BulkEdit = {\n  activity_data: {\n    ...BaseUISchemaComponents.ThreeColumnStyle,\n    ...UISchemaComponents.Activity_BulkEdit\n  },\n  activity_subtype_data: {\n    ...BaseUISchemaComponents.ThreeColumnStyle,\n    ...BaseUISchemaComponents.Treatment_BiologicalPlant_BulkEdit\n  }\n};\n\nconst Activity_Monitoring_ChemicalTerrestrialAquaticPlant = {\n  activity_data: {\n    ...BaseUISchemaComponents.ThreeColumnStyle,\n    ...UISchemaComponents.MonitoringActivity\n  },\n  activity_type_data: {\n    ...BaseUISchemaComponents.ThreeColumnStyle,\n    ...BaseUISchemaComponents.Monitoring\n  }\n};\n\nconst Activity_Monitoring_MechanicalTerrestrialAquaticPlant = {\n  activity_data: {\n    ...BaseUISchemaComponents.ThreeColumnStyle,\n    ...UISchemaComponents.MonitoringActivity\n  },\n  activity_type_data: {\n    ...BaseUISchemaComponents.ThreeColumnStyle,\n    ...BaseUISchemaComponents.Monitoring\n  }\n};\n\nconst Activity_Monitoring_BiologicalTerrestrialPlant = {\n  activity_data: {\n    ...BaseUISchemaComponents.ThreeColumnStyle,\n    ...UISchemaComponents.MonitoringActivity\n  },\n  activity_type_data: {\n    ...BaseUISchemaComponents.ThreeColumnStyle,\n    ...BaseUISchemaComponents.Monitoring\n  },\n  activity_subtype_data: {\n    ...BaseUISchemaComponents.ThreeColumnStyle,\n    ...BaseUISchemaComponents.Monitoring_BiologicalTerrestrialPlant\n  }\n};\n\nconst RootUISchemas = {\n  Activity_Observation_PlantTerrestrial,\n  Activity_Observation_PlantTerrestrial_BulkEdit,\n  Activity_Observation_PlantAquatic,\n  Activity_AnimalActivity_AnimalTerrestrial,\n  Activity_AnimalActivity_AnimalAquatic,\n  Activity_Transect_FireMonitoring,\n  Activity_Transect_Vegetation,\n  Activity_Transect_BiocontrolEfficacy,\n  Activity_Dispersal_BiologicalDispersal,\n  Activity_Treatment_ChemicalPlant,\n  Activity_Treatment_ChemicalPlant_BulkEdit,\n  Activity_Treatment_MechanicalPlant,\n  Activity_Treatment_MechanicalPlant_BulkEdit,\n  Activity_Treatment_BiologicalPlant,\n  Activity_Treatment_BiologicalPlant_BulkEdit,\n  Activity_Monitoring_ChemicalTerrestrialAquaticPlant,\n  Activity_Monitoring_MechanicalTerrestrialAquaticPlant,\n  Activity_Monitoring_BiologicalTerrestrialPlant\n};\n\nexport default RootUISchemas;\n","import Checkbox from '@material-ui/core/Checkbox';\nimport TextField from '@material-ui/core/TextField';\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport { WidgetProps } from '@rjsf/core';\nimport React from 'react';\n\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\n\n// Custom type to support this widget\nexport type AutoCompleteMultiSelectOption = { label: string; value: any };\n\n/**\n * A widget that supports a multi-select dropdown field with search filtering.\n *\n * Example schemas:\n *\n * JSON-Schema:\n *\n * ```JSON\n * {\n *   type: 'array',\n *   title: 'Multi Select Field Title',\n *   items: {\n *     type: 'number',\n *     anyOf: [\n *       {\n *         type: 'number',\n *         title: 'Option 1',\n *         enum: [1]\n *       },\n *       {\n *         type: 'number',\n *         title: 'Option 2',\n *         enum: [2]\n *       },\n *       {\n *         type: 'number',\n *         title: 'Option 3',\n *         enum: [3]\n *       }\n *     ]\n *   },\n *   uniqueItems: true\n * }\n * ```\n *\n * uiSchema (assuming you register the widget as `multi-select-autocomplete`:\n *\n * ```JSON\n * {\n *   'ui:widget': 'multi-select-autocomplete'\n * }\n * ```\n *\n * @param {WidgetProps} props standard RJSF widget props\n * @return {*}\n */\nconst MultiSelectAutoComplete = (props: WidgetProps) => {\n  const enumDisabled = props.options.enumDisabled;\n  const enumOptions = (props.options.enumOptions as AutoCompleteMultiSelectOption[]) || [];\n\n  /**\n   * On a value selected or un-selected, call the parents onChange event to inform the form of the new value of the\n   * widget.\n   *\n   * @param {React.ChangeEvent<{}>} event\n   * @param {AutoCompleteMultiSelectOption[]} value\n   */\n  const handleOnChange = (event: React.ChangeEvent<{}>, value: AutoCompleteMultiSelectOption[]): void => {\n    const newValue: any[] = [];\n    value.forEach((item) => newValue.push(item.value));\n\n    props.onChange(newValue);\n  };\n\n  /**\n   * Custom comparator to determine if a given option is selected.\n   *\n   * @param {AutoCompleteMultiSelectOption} option\n   * @param {AutoCompleteMultiSelectOption} value\n   * @return {*}  {boolean}\n   */\n  const handleGetOptionSelected = (\n    option: AutoCompleteMultiSelectOption,\n    value: AutoCompleteMultiSelectOption\n  ): boolean => {\n    if (!option?.value || !value?.value) {\n      return false;\n    }\n\n    return option.value === value.value;\n  };\n\n  /**\n   * Parses an existing array of values into an array of options.\n   *\n   * @return {*}  {AutoCompleteMultiSelectOption[]}\n   */\n  const getExistingValue = (): AutoCompleteMultiSelectOption[] => {\n    if (!props.value) {\n      return [];\n    }\n\n    return enumOptions.filter((option) => props.value.includes(option.value));\n  };\n\n  return (\n    <Autocomplete\n      multiple\n      autoHighlight={true}\n      id={props.id}\n      value={getExistingValue()}\n      getOptionSelected={handleGetOptionSelected}\n      disabled={props.disabled}\n      options={enumOptions}\n      disableCloseOnSelect\n      filterOptions={createFilterOptions({ limit: 50 })}\n      getOptionLabel={(option) => option.label}\n      onChange={handleOnChange}\n      renderOption={(option, { selected }) => {\n        const disabled: any = enumDisabled && (enumDisabled as any).indexOf(option.value) !== -1;\n        return (\n          <>\n            <Checkbox\n              icon={icon}\n              checkedIcon={checkedIcon}\n              style={{ marginRight: 8 }}\n              checked={selected}\n              disabled={disabled}\n              value={option.value}\n            />\n            {option.label}\n          </>\n        );\n      }}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          variant=\"outlined\"\n          required={props.required}\n          label={props.label || props.schema.title}\n          placeholder={'Begin typing to filter results...'}\n        />\n      )}\n    />\n  );\n};\n\nexport default MultiSelectAutoComplete;\n","import React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport { WidgetProps } from '@rjsf/core';\n\n// Custom type to support this widget\nexport type AutoCompleteSelectOption = { label: string; value: any; title: any };\n\n/**\n * A widget that supports a single-select dropdown field with search filtering.\n *\n * Example schemas:\n *\n * JSON-Schema:\n *\n * ```JSON\n * {\n *   type: 'array',\n *   title: 'Single Select Field Title',\n *   items: {\n *     type: 'number',\n *     anyOf: [\n *       {\n *         type: 'number',\n *         title: 'Option 1',\n *         enum: [1]\n *       },\n *       {\n *         type: 'number',\n *         title: 'Option 2',\n *         enum: [2]\n *       },\n *       {\n *         type: 'number',\n *         title: 'Option 3',\n *         enum: [3]\n *       }\n *     ]\n *   },\n *   uniqueItems: true\n * }\n * ```\n *\n * uiSchema (assuming you register the widget as `single-select-autocomplete`:\n *\n * ```JSON\n * {\n *   'ui:widget': 'single-select-autocomplete'\n * }\n * ```\n *\n * @param {WidgetProps} props standard RJSF widget props\n * @return {*}\n */\n\nconst SingleSelectAutoComplete = (props: WidgetProps) => {\n  let enumOptions = props.options.enumOptions as AutoCompleteSelectOption[];\n  if (!enumOptions) enumOptions = [];\n\n  let optionValueLabels = {};\n  let optionValues = Object.values(enumOptions).map((option) => {\n    optionValueLabels[option.value] = option.label || option.title || option.value;\n    return option.value;\n  });\n  const startingValue = props.value || '';\n  const [value, setValue] = useState(startingValue);\n  const [inputValue, setInputValue] = useState(startingValue ? optionValueLabels[startingValue] : '');\n\n  return (\n    <div>\n      <Autocomplete\n        autoComplete\n        autoHighlight\n        autoSelect={props.required}\n        blurOnSelect\n        openOnFocus\n        selectOnFocus\n        clearOnEscape={!props.required}\n        disableClearable={props.required}\n        id={props.id}\n        disabled={props.disabled}\n        clearOnBlur={false}\n        value={value}\n        onLoad={() => {\n          props.onChange(startingValue);\n        }}\n        onChange={(event: any, option: string, reason: string) => {\n          if (reason === 'clear') {\n            // NOTE: currently disabled.\n            // Creates validaton issues where an empty value will pass even if required\n            setValue('');\n            props.onChange('');\n          } else {\n            setValue(option);\n            // NOTE: passing string value to onChange, which might be expecting format\n            // object: { value, label }\n            // this will likely result in future compatibility errors with custom onChange functions\n            // but can't change this easily without creating many validation errors\n            props.onChange(option);\n          }\n        }}\n        options={optionValues}\n        getOptionSelected={(option) => option === value}\n        filterOptions={createFilterOptions({\n          // limit: 500, // NOTE: removed for now, but might want with very long lists\n          stringify: (option) => option + ' ' + optionValueLabels[option]\n        })}\n        getOptionLabel={(option) => (option ? optionValueLabels[option] : '')}\n        inputValue={inputValue}\n        onInputChange={(event, newInputValue) => setInputValue(newInputValue)}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            variant=\"outlined\"\n            required={props.required}\n            label={props.label || props.schema.title}\n            placeholder={'Begin typing to filter results...'}\n          />\n        )}\n      />\n    </div>\n  );\n};\n\nexport default SingleSelectAutoComplete;\n","import { createMuiTheme } from '@material-ui/core';\nimport appTheme from './appTheme';\n\nconst rjsfTheme = createMuiTheme({\n  ...appTheme,\n  props: {\n    MuiTextField: {\n      variant: 'outlined'\n    }\n  }\n});\n\nexport default rjsfTheme;\n","import { Button, Grid } from '@material-ui/core';\nimport React from 'react';\n\nexport interface IFormControlsComponentProps {\n  classes?: any;\n  isDisabled?: boolean;\n  onSubmit?: Function;\n  onCopy?: Function;\n  onPaste?: Function;\n  activitySubtype?: string;\n  hideCheckFormForErrors?: boolean;\n}\n\nconst FormControlsComponent: React.FC<IFormControlsComponentProps> = (props) => {\n  const isDisabled = props.isDisabled || false;\n\n  return (\n    <>\n      <Grid container spacing={3}>\n        <Grid container item spacing={3}>\n          <Grid item>\n            {!props.hideCheckFormForErrors && (\n              <Button\n                disabled={isDisabled}\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => {\n                  if (!props.onSubmit) {\n                    return;\n                  }\n\n                  props.onSubmit();\n                }}>\n                Check Form For Errors\n              </Button>\n            )}\n          </Grid>\n          {props.onCopy && (\n            <Grid item>\n              <Button disabled={isDisabled} variant=\"contained\" color=\"primary\" onClick={() => props.onCopy()}>\n                Copy Form Data\n              </Button>\n            </Grid>\n          )}\n          {sessionStorage.getItem('copiedFormData') &&\n            sessionStorage.getItem('activitySubtype') === props.activitySubtype &&\n            props.onPaste && (\n              <Grid item>\n                <Button disabled={isDisabled} variant=\"contained\" color=\"primary\" onClick={() => props.onPaste()}>\n                  Paste Form Data\n                </Button>\n              </Grid>\n            )}\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default FormControlsComponent;\n","import { Box, CircularProgress, ThemeProvider, Typography } from '@material-ui/core';\nimport { IChangeEvent, ISubmitEvent } from '@rjsf/core';\nimport Form from '@rjsf/material-ui';\nimport { ActivitySyncStatus } from 'constants/activities';\nimport { useInvasivesApi } from 'hooks/useInvasivesApi';\nimport React, { useEffect, useState } from 'react';\nimport ArrayFieldTemplate from 'rjsf/templates/ArrayFieldTemplate';\nimport FieldTemplate from 'rjsf/templates/FieldTemplate';\nimport ObjectFieldTemplate from 'rjsf/templates/ObjectFieldTemplate';\nimport RootUISchemas from 'rjsf/uiSchema/RootUISchemas';\nimport MultiSelectAutoComplete from 'rjsf/widgets/MultiSelectAutoComplete';\nimport SingleSelectAutoComplete from 'rjsf/widgets/SingleSelectAutoComplete';\nimport rjsfTheme from 'themes/rjsfTheme';\nimport FormControlsComponent, { IFormControlsComponentProps } from './FormControlsComponent';\n\nexport interface IFormContainerProps extends IFormControlsComponentProps {\n  classes?: any;\n  activity: any;\n  customValidation?: any;\n  customErrorTransformer?: any;\n  isDisabled?: boolean;\n  pasteFormData?: Function;\n  copyFormData?: Function;\n  setParentFormRef?: Function;\n  hideCheckFormForErrors?: boolean;\n  /**\n   * A function executed everytime the form changes.\n   *\n   * Note: This will fire frequently, so consider wrapping it in a debounce function (see utils.ts > debounced).\n   */\n  onFormChange?: (event: IChangeEvent<any>, formRef: any) => any;\n  /**\n   * A function executed when the form submit hook fires, and form validation errors are found.\n   */\n  onFormSubmitError?: (errors: any[], formRef: any) => any;\n  /**\n   * A function executed everytime the form submit hook fires.\n   *\n   * Note: Form validation rules will run, and must succeed, before this will be called.\n   */\n  onFormSubmitSuccess?: (event: ISubmitEvent<any>, formRef: any) => any;\n}\n\nconst FormContainer: React.FC<IFormContainerProps> = (props) => {\n  const invasivesApi = useInvasivesApi();\n\n  const [schemas, setSchemas] = useState<{ schema: any; uiSchema: any }>({ schema: null, uiSchema: null });\n\n  const [formRef, setFormRef] = useState(null);\n\n  useEffect(() => {\n    const getApiSpec = async () => {\n      const response = await invasivesApi.getCachedApiSpec();\n\n      setSchemas({\n        schema: { ...response.components.schemas[props.activity.activitySubtype], components: response.components },\n        uiSchema: RootUISchemas[props.activity.activitySubtype]\n      });\n    };\n\n    getApiSpec();\n  }, [props.activity.activitySubtype]);\n\n  if (!schemas.schema || !schemas.uiSchema) {\n    return <CircularProgress />;\n  }\n\n  const isDisabled = props.isDisabled || props.activity?.sync?.status === ActivitySyncStatus.SYNC_SUCCESSFUL || false;\n\n  return (\n    <Box width=\"100%\">\n      <Box mb={3}>\n        <FormControlsComponent\n          onSubmit={() => formRef.submit()}\n          isDisabled={isDisabled}\n          onCopy={props.copyFormData ? () => props.copyFormData() : null}\n          onPaste={props.pasteFormData ? () => props.pasteFormData() : null}\n          activitySubtype={props.activity.activitySubtype}\n          hideCheckFormForErrors={props.hideCheckFormForErrors}\n        />\n      </Box>\n\n      <ThemeProvider theme={rjsfTheme}>\n        <Form\n          ObjectFieldTemplate={ObjectFieldTemplate}\n          FieldTemplate={FieldTemplate}\n          ArrayFieldTemplate={ArrayFieldTemplate}\n          widgets={{\n            'multi-select-autocomplete': MultiSelectAutoComplete,\n            'single-select-autocomplete': SingleSelectAutoComplete\n          }}\n          key={props.activity?._id}\n          disabled={isDisabled}\n          formData={props.activity?.formData || null}\n          schema={schemas.schema}\n          uiSchema={schemas.uiSchema}\n          liveValidate={false}\n          showErrorList={true}\n          validate={props.customValidation}\n          transformErrors={props.customErrorTransformer}\n          autoComplete=\"off\"\n          ErrorList={() => {\n            return (\n              <div>\n                <Typography color=\"error\" variant=\"h5\">\n                  The form contains one or more errors!\n                </Typography>\n                <Typography color=\"error\" variant=\"h6\">\n                  Incorrect fields are highlighted below.\n                </Typography>\n              </div>\n            );\n          }}\n          onChange={(event) => {\n            if (!props.onFormChange) {\n              return;\n            }\n\n            props.onFormChange(event, formRef);\n          }}\n          onError={(error) => {\n            if (!props.onFormSubmitError) {\n              return;\n            }\n\n            props.onFormSubmitError(error, formRef);\n          }}\n          onSubmit={(event) => {\n            if (!props.onFormSubmitSuccess) {\n              return;\n            }\n\n            props.onFormSubmitSuccess(event, formRef);\n          }}\n          // `ref` does exist, but currently is missing from the `index.d.ts` types file.\n          // @ts-ignore: No overload matches this call ts(2769)\n          ref={(form) => {\n            if (!form) {\n              return;\n            }\n\n            if (props.setParentFormRef) {\n              props.setParentFormRef(form);\n            }\n            setFormRef(form);\n          }}>\n          <React.Fragment />\n        </Form>\n      </ThemeProvider>\n\n      <Box mt={3}>\n        <FormControlsComponent\n          onSubmit={() => formRef.submit()}\n          isDisabled={isDisabled}\n          onCopy={props.copyFormData ? () => props.copyFormData() : null}\n          onPaste={props.pasteFormData ? () => props.pasteFormData() : null}\n          activitySubtype={props.activity.activitySubtype}\n          hideCheckFormForErrors={props.hideCheckFormForErrors}\n        />\n      </Box>\n    </Box>\n  );\n};\n\nexport default FormContainer;\n","import React from 'react';\nimport './Spinner.css';\n\nconst Spinner: React.FC = () => {\n  return (\n    <svg viewBox=\"0 0 50 50\" className=\"spinner\">\n      <circle\n        cx=\"25\"\n        cy=\"25\"\n        r=\"20\"\n        className=\"path\"\n        fill=\"none\"\n        stroke=\"rgba(0,0,0,0.7)\"\n        strokeWidth=\"3\"\n        strokeLinecap=\"round\"></circle>\n    </svg>\n  );\n};\n\nexport default Spinner;\n","import { CameraResultType, CameraSource } from '@capacitor/core';\nimport { useCamera } from '@ionic/react-hooks/camera';\nimport { Box, Button, Card, CardActions, CardMedia, CircularProgress, Grid, IconButton } from '@material-ui/core';\nimport { AddAPhoto, DeleteForever } from '@material-ui/icons';\nimport React from 'react';\n\nexport interface IPhoto {\n  filepath: string;\n  webviewPath?: string;\n  base64?: string;\n  dataUrl?: string;\n}\n\nexport interface IPhotoContainerProps {\n  classes?: any;\n  photoState: { photos: IPhoto[]; setPhotos: (photo: IPhoto[]) => void };\n  isDisabled?: boolean;\n}\n\nconst PhotoContainer: React.FC<IPhotoContainerProps> = (props) => {\n  const { getPhoto } = useCamera();\n\n  const takePhoto = async () => {\n    const cameraPhoto = await getPhoto({\n      resultType: CameraResultType.DataUrl,\n      source: CameraSource.Camera,\n      quality: 100\n    });\n\n    const fileName = new Date().getTime() + '.' + cameraPhoto.format;\n    const photo = {\n      filepath: fileName,\n      dataUrl: cameraPhoto.dataUrl\n    };\n\n    props.photoState.setPhotos([...props.photoState.photos, photo]);\n  };\n\n  const deletePhotos = async () => {\n    props.photoState.setPhotos([]);\n  };\n\n  const deletePhoto = async (filepath: any) => {\n    const reducedPhotos = props.photoState.photos.filter((photo) => photo.filepath !== filepath);\n    props.photoState.setPhotos(reducedPhotos);\n  };\n\n  if (!props.photoState) {\n    return <CircularProgress />;\n  }\n\n  return (\n    <Box width={1}>\n      <Box mb={3}>\n        <Grid container>\n          <Grid container item>\n            {props.photoState.photos.map((photo, index) => (\n              <Grid item xs={12} sm={6} md={4} lg={3} key={index}>\n                <Card>\n                  <CardMedia src={photo.dataUrl} component=\"img\" />\n                  {!props.isDisabled && (\n                    <CardActions>\n                      <IconButton onClick={() => deletePhoto(photo.filepath)}>\n                        <DeleteForever />\n                      </IconButton>\n                    </CardActions>\n                  )}\n                </Card>\n              </Grid>\n            ))}\n          </Grid>\n        </Grid>\n      </Box>\n      {!props.isDisabled && (\n        <Box>\n          <Grid container>\n            <Grid container item spacing={3} justify=\"center\">\n              <Grid item>\n                <Button variant=\"contained\" color=\"primary\" startIcon={<AddAPhoto />} onClick={() => takePhoto()}>\n                  Add A Photo\n                </Button>\n              </Grid>\n              <Grid item>\n                <Button variant=\"contained\" startIcon={<DeleteForever />} onClick={() => deletePhotos()}>\n                  Remove All Photos\n                </Button>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default PhotoContainer;\n","import { Accordion, AccordionDetails, AccordionSummary, Button, Grid, Typography } from '@material-ui/core';\nimport { ExpandMore } from '@material-ui/icons';\nimport FormContainer, { IFormContainerProps } from 'components/form/FormContainer';\nimport MapContainer, { IMapContainerProps } from 'components/map/MapContainer';\nimport PhotoContainer, { IPhotoContainerProps } from 'components/photo/PhotoContainer';\nimport { DatabaseContext } from 'contexts/DatabaseContext';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { notifySuccess } from 'utils/NotificationUtils';\nimport { useCurrentPosition, useWatchPosition } from '@ionic/react-hooks/geolocation';\nimport * as turf from '@turf/turf';\nimport { Feature } from 'geojson';\n\nexport interface IActivityComponentProps extends IMapContainerProps, IFormContainerProps, IPhotoContainerProps {\n  classes?: any;\n  activity: any;\n  linkedActivity?: any;\n  customValidation?: any;\n  customErrorTransformer?: any;\n  pasteFormData?: Function;\n  copyFormData?: Function;\n  cloneActivityButton?: Function;\n  setParentFormRef?: Function;\n  hideCheckFormForErrors?: boolean;\n}\n\nconst ActivityComponent: React.FC<IActivityComponentProps> = (props) => {\n  const { currentPosition: watchPosition, startWatch, clearWatch } = useWatchPosition();\n  const { getPosition } = useCurrentPosition();\n  const [workingPolyline, setWorkingPolyline] = useState([]);\n  const databaseContext = useContext(DatabaseContext);\n\n  useEffect(() => {\n    getPosition();\n  }, []);\n\n  const isGreaterDistanceThan = (from, to, distance) => {\n    let returnVal = null;\n    try {\n      var fromAsPoint = turf.point(from);\n      var toAsPoint = turf.point(to);\n\n      returnVal = turf.distance(fromAsPoint, toAsPoint, { units: 'kilometers' }) > distance;\n    } catch (e) {\n      console.dir(e);\n    }\n    return returnVal;\n  };\n\n  const startTrack = async () => {\n    startWatch({ enableHighAccuracy: true });\n    notifySuccess(databaseContext, JSON.stringify('Starting track.'));\n  };\n\n  const endTrack = async () => {\n    // convert poly to polygon\n    if (workingPolyline.length >= 4) {\n      var line = turf.lineString(workingPolyline);\n      var polygon = turf.lineToPolygon(line);\n      if (window.confirm('Convert track to polygon?')) {\n        props.geometryState.setGeometry([polygon as any]);\n        notifySuccess(databaseContext, JSON.stringify('Made a polygon!!  '));\n        clearWatch();\n      } else {\n        notifySuccess(databaseContext, JSON.stringify('Made a polyine!!  '));\n        clearWatch();\n      }\n    } else {\n      if (window.confirm(\"Sure you're done walkin'?  Didn't collect 4 points.\")) {\n        alert('Cancelled track.');\n        clearWatch();\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (watchPosition) {\n      if (workingPolyline.length == 0) {\n        let newPolyline = [[watchPosition.coords.longitude, watchPosition.coords.latitude]];\n        setWorkingPolyline(newPolyline);\n\n        const userTrack: Feature = JSON.parse(\n          `\n          {\n            \"type\": \"Feature\",\n            \"geometry\": {\n              \"type\": \"LineString\",\n              \"coordinates\": ` +\n            JSON.stringify(newPolyline) +\n            `\n            },\n            \"properties\": {\n            }\n          }\n          `\n        );\n\n        props.geometryState.setGeometry([userTrack as any]);\n      } else {\n        try {\n          if (\n            isGreaterDistanceThan(\n              [watchPosition.coords.longitude, watchPosition.coords.latitude],\n              workingPolyline[workingPolyline.length - 1],\n              0.001\n            )\n          ) {\n            setWorkingPolyline([...workingPolyline, [watchPosition.coords.longitude, watchPosition.coords.latitude]]);\n\n            const userTrack = JSON.parse(\n              `\n          {\n            \"type\": \"Feature\",\n            \"geometry\": {\n              \"type\": \"LineString\",\n              \"coordinates\": ` +\n                JSON.stringify(workingPolyline) +\n                `\n            },\n            \"properties\": {\n            }\n          }\n          `\n            );\n            props.geometryState.setGeometry([userTrack as any]);\n          }\n        } catch (e) {\n          notifySuccess(databaseContext, JSON.stringify('Computer says no.  ' + JSON.stringify(e)));\n        }\n      }\n    }\n  }, [watchPosition]);\n\n  return (\n    <>\n      {props.cloneActivityButton && props.cloneActivityButton()}\n\n      {/* Display the linked activity record information alongside the actual activity record */}\n      {props.linkedActivity && (\n        <>\n          <Accordion>\n            <AccordionSummary expandIcon={<ExpandMore />} aria-controls=\"panel-form-content\" id=\"panel-form-header\">\n              <Typography className={props.classes.heading}>Linked Activity Form</Typography>\n            </AccordionSummary>\n            <AccordionDetails className={props.classes.formContainer}>\n              <FormContainer {...{ ...props, activity: props.linkedActivity, isDisabled: true }} />\n            </AccordionDetails>\n          </Accordion>\n          {props.linkedActivity.photos.length > 0 && (\n            <Accordion>\n              <AccordionSummary expandIcon={<ExpandMore />} aria-controls=\"panel-photo-content\" id=\"panel-photo-header\">\n                <Typography className={props.classes.heading}>Linked Activity Photos</Typography>\n              </AccordionSummary>\n              <AccordionDetails className={props.classes.photoContainer}>\n                <PhotoContainer {...{ ...props, activity: props.linkedActivity, isDisabled: true }} />\n              </AccordionDetails>\n            </Accordion>\n          )}\n        </>\n      )}\n\n      <Accordion defaultExpanded={true}>\n        <AccordionSummary expandIcon={<ExpandMore />} aria-controls=\"panel-map-content\" id=\"panel-map-header\">\n          <Typography className={props.classes.heading}>Map</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Grid xs={12} alignItems=\"flex-start\" container>\n            <Grid xs={2} item>\n              <Button variant=\"contained\" color=\"primary\" onClick={startTrack}>\n                Record a Polygon!\n              </Button>\n            </Grid>\n            <Grid xs={2} item>\n              <Button disabled={true} variant=\"contained\" color=\"primary\" onClick={startTrack}>\n                Record Buffered Line!\n              </Button>\n            </Grid>\n            <Grid xs={2} item>\n              <Button variant=\"contained\" color=\"secondary\" onClick={endTrack}>\n                End Track Recording\n              </Button>\n            </Grid>\n            <Grid xs={12} className={props.classes.mapContainer} item>\n              <MapContainer {...props} />\n            </Grid>\n          </Grid>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary expandIcon={<ExpandMore />} aria-controls=\"panel-form-content\" id=\"panel-form-header\">\n          <Typography className={props.classes.heading}>Activity Form</Typography>\n        </AccordionSummary>\n        <AccordionDetails className={props.classes.formContainer}>\n          <FormContainer {...props} />\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary expandIcon={<ExpandMore />} aria-controls=\"panel-photo-content\" id=\"panel-photo-header\">\n          <Typography className={props.classes.heading}>Activity Photos</Typography>\n        </AccordionSummary>\n        <AccordionDetails className={props.classes.photoContainer}>\n          <PhotoContainer {...props} />\n        </AccordionDetails>\n      </Accordion>\n    </>\n  );\n};\n\nexport default ActivityComponent;\n","/**\n * Wraps a function in a debounce function, which prevents it from being called until a delay period has elapsed.\n * Repeated calls within the delay period will reset the delay.\n *\n * @param {number} delay delay in milliseconds between calls that must elapse before the function will be executed\n * @param {(...args: any) => any} fn function to debounce\n * @returns {(...args: any) => any}\n */\nexport const debounced = function (delay: number, fn: (...args: any) => any): (...args: any) => any {\n  let timerId: NodeJS.Timeout;\n\n  return (...args) => {\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n\n    timerId = setTimeout(() => {\n      fn(...args);\n      timerId = null;\n    }, delay);\n  };\n};\n","/*\n  Herbicides and their respective application rates\n  For custom business rule that when user selects a herbicide, the application rate should autopopulate\n  Editing should still be allowed, but autopopulation is the main requirement\n*/\n\nexport const HerbicideApplicationRates = {\n  '14725': 9.5,\n  '9528': 4.75,\n  '5931': 4,\n  '14726': 5.5,\n  '23713': 3,\n  '31641': 11.5,\n  '23957': 4.6,\n  '29249': 5.2,\n  '29888': 8,\n  '27856': 3.25,\n  '21053': 8,\n  '29334': 8,\n  '28945': 5,\n  '27634': 9.3,\n  '31642': 6.2,\n  '30841': 7,\n  '27801': 12,\n  '23545': 0.83,\n  '32957': 0.292,\n  '28517': 0.5,\n  '26722': 4.6,\n  '27884': 3,\n  '30203': 4.68,\n  '30063': 1.7,\n  '28551': 0.5,\n  '28552': 2.6,\n  '26271': 0.02,\n  '22759': 10,\n  '28198': 8,\n  '27487': 8,\n  '29498': 8,\n  '9007': 17.3,\n  '9005': 4.67,\n  '27972': 5.5,\n  '26980': 9.2,\n  '27615': 9,\n  '29994': 9,\n  '28840': 9\n};\n","import { FormValidation } from '@rjsf/core';\nimport { HerbicideApplicationRates } from 'rjsf/business-rules/constants/herbicideApplicationRates';\n\ntype rjsfValidator = (formData: any, errors: FormValidation) => FormValidation;\n\n// keep track of all business rules for custom form validation logic\nexport function getCustomValidator(validators: rjsfValidator[]): rjsfValidator {\n  return (formData: any, errors: FormValidation): FormValidation => {\n    for (const validator of validators) {\n      errors = validator(formData, errors);\n    }\n\n    return errors;\n  };\n}\n\n/*\n  Function to validate that the total percent value of all jurisdictions combined = 100\n*/\nexport function getJurisdictionPercentValidator(): rjsfValidator {\n  return (formData: any, errors: FormValidation): FormValidation => {\n    if (!formData || !formData.activity_data || !formData.activity_data.jurisdictions) {\n      return errors;\n    }\n\n    const { jurisdictions } = formData.activity_data;\n    let totalPercent = 0;\n\n    jurisdictions.forEach((jurisdiction: any) => {\n      totalPercent += jurisdiction.percent_covered;\n    });\n\n    errors.activity_data['jurisdictions'].__errors = [];\n\n    if (totalPercent !== 100) {\n      errors.activity_data['jurisdictions'].addError(\n        'Total percentage of area covered by jurisdictions must equal 100%'\n      );\n    }\n\n    return errors;\n  };\n}\n\n/*\n  Function to validate that the net geo area selected does not exceed the limits\n  specified by business area for various activity types\n*/\nexport function getAreaValidator(activitySubtype: string): rjsfValidator {\n  return (formData: any, errors: FormValidation): FormValidation => {\n    let areaLimit = Number.POSITIVE_INFINITY;\n    const tenThousandAreaLimitSubtypes = [\n      'Activity_Treatment_MechanicalPlant',\n      'Activity_Observation_PlantTerrestrial',\n      'Activity_Treatment_ChemicalPlant'\n    ];\n\n    if (tenThousandAreaLimitSubtypes.includes(activitySubtype)) {\n      areaLimit = 50000;\n    }\n\n    // validate reported area limit\n    errors.activity_data['reported_area'].__errors = [];\n    if (formData.activity_data['reported_area'] > areaLimit) {\n      errors.activity_data['reported_area'].addError(`Area cannot exceed ${areaLimit} m\\u00B2`);\n    }\n\n    return errors;\n  };\n}\n\n/*\n  Function to validate duplicate invasive plant species on terrestrial plant form\n*/\nexport function getDuplicateInvasivePlantsValidator(activitySubtype: string): rjsfValidator {\n  return (formData: any, errors: FormValidation): FormValidation => {\n    if (\n      activitySubtype !== 'Activity_Observation_PlantTerrestrial' ||\n      !formData ||\n      !formData.activity_subtype_data ||\n      !formData.activity_subtype_data.invasive_plants ||\n      !formData.activity_subtype_data.invasive_plants.length\n    ) {\n      return errors;\n    }\n\n    const invasivePlants = formData.activity_subtype_data.invasive_plants;\n    let plantCodeList = [];\n\n    invasivePlants.forEach((invasivePlant: any) => {\n      plantCodeList.push(invasivePlant.invasive_plant_code);\n    });\n\n    if (!errors || !errors.activity_subtype_data || !errors.activity_subtype_data['invasive_plants']) {\n      return errors;\n    }\n\n    // validate duplicates of the invasive_plant_code within invasive_plants\n    errors.activity_subtype_data['invasive_plants'].__errors = [];\n\n    if (new Set(plantCodeList).size !== plantCodeList.length) {\n      errors.activity_subtype_data['invasive_plants'].addError(\n        `There are duplicated invasive plant species identified.\n        Please remove or fix duplicated species.`\n      );\n    }\n\n    return errors;\n  };\n}\n\n/*\n  Function to validate temperature field on chemical treatment form\n*/\nexport function getTemperatureValidator(activitySubtype: string): rjsfValidator {\n  return (formData: any, errors: FormValidation): FormValidation => {\n    if (activitySubtype !== 'Activity_Treatment_ChemicalPlant') {\n      return errors;\n    }\n\n    // validate temperature\n    errors.activity_subtype_data['temperature'].__errors = [];\n    const { temperature } = formData.activity_subtype_data;\n\n    if (temperature < 10 || temperature > 30) {\n      errors.activity_subtype_data['temperature'].addError('Temperature should ideally be between 15 and 22 degrees');\n    }\n\n    return errors;\n  };\n}\n\n/*\n  Function to validate wind fields on chemical treatment forms\n\n  If no wind there should be no wind direction\n  If wind, there must be a wind direction\n*/\nexport function getWindValidator(activitySubtype: string): rjsfValidator {\n  return (formData: any, errors: FormValidation): FormValidation => {\n    if (activitySubtype !== 'Activity_Treatment_ChemicalPlant') {\n      return errors;\n    }\n\n    // validate wind speed with wind direction\n    errors.activity_subtype_data['wind_direction_code'].__errors = [];\n    const { wind_speed, wind_direction_code } = formData.activity_subtype_data;\n\n    if (wind_speed > 0 && wind_direction_code === 'No Wind') {\n      errors.activity_subtype_data['wind_direction_code'].addError(\n        'Must specify a wind direction when wind speed is > 0'\n      );\n    }\n\n    if (wind_speed === 0 && wind_direction_code !== 'No Wind') {\n      errors.activity_subtype_data['wind_direction_code'].addError(\n        'Cannot specify a wind direction when wind speed is 0'\n      );\n    }\n\n    return errors;\n  };\n}\n\n/*\n  Function to validate that the value selected for invasive plant in dropdown\n  is one of the plants from the linked record\n\n  Ex: cannot create a treatment for a plant that was not observed in linked observation\n*/\nexport function getInvasivePlantsValidator(linkedActivity: any): rjsfValidator {\n  return (formData: any, errors: FormValidation): FormValidation => {\n    const linkedActivityInvasivePlants = linkedActivity?.formData?.activity_subtype_data?.invasive_plants;\n    const { invasive_plant_code } = formData?.activity_subtype_data;\n    if (!linkedActivityInvasivePlants || !invasive_plant_code) return errors;\n\n    errors.activity_subtype_data['invasive_plant_code'].__errors = [];\n    if (!linkedActivityInvasivePlants.some((lip: any) => lip.invasive_plant_code === invasive_plant_code)) {\n      errors.activity_subtype_data['invasive_plant_code'].addError(\n        'You must select a species that was previously observed in the linked activity'\n      );\n    }\n\n    return errors;\n  };\n}\n\n/*\n  Function to validate that the application rate specified for a given herbicide\n  does not exceed the limit based on guideline values\n*/\nexport function getHerbicideApplicationRateValidator(): rjsfValidator {\n  return (formData: any, errors: FormValidation): FormValidation => {\n    if (\n      !formData ||\n      !formData.activity_subtype_data ||\n      !formData.activity_subtype_data.herbicide ||\n      !formData.activity_subtype_data.herbicide.length\n    ) {\n      return errors;\n    }\n\n    const herbicides = formData.activity_subtype_data.herbicide;\n\n    herbicides.forEach((herbicide: any, index: number) => {\n      if (\n        !errors ||\n        !errors.activity_subtype_data ||\n        !errors.activity_subtype_data['herbicide'] ||\n        !errors.activity_subtype_data['herbicide'][index] ||\n        !errors.activity_subtype_data['herbicide'][index]['application_rate']\n      ) {\n        return errors;\n      }\n\n      // validate herbicide application rate maximums\n      errors.activity_subtype_data['herbicide'][index]['application_rate'].__errors = [];\n\n      if (\n        herbicide.application_rate &&\n        herbicide.application_rate > HerbicideApplicationRates[herbicide.liquid_herbicide_code]\n      ) {\n        errors.activity_subtype_data['herbicide'][index]['application_rate'].addError(\n          `Application rate exceeds maximum applicable rate of ${\n            HerbicideApplicationRates[herbicide.liquid_herbicide_code]\n          } L/ha for this herbicide`\n        );\n      }\n    });\n\n    return errors;\n  };\n}\n\n/*\n  Function used by offset distance validation function to identify and set error\n  on specific field of nested object structure based on transect type\n*/\nconst determineErrorStateOnTransectPoint = (\n  isVegetationTransect: boolean,\n  transectPoint: any,\n  transectLineLength: number,\n  errorState: any\n) => {\n  if (isVegetationTransect) {\n    // If offset distance field has not been entered, no need to validate anything\n    if (!transectPoint.vegetation_transect_points.offset_distance) {\n      return null;\n    }\n    // Clear all existing errors to validate properly at start\n    errorState.vegetation_transect_points['offset_distance'].__errors = [];\n  } else {\n    // If offset distance field has not been entered, no need to validate anything\n    if (!transectPoint.offset_distance) {\n      return null;\n    }\n    // Clear all existing errors to validate properly at start\n    errorState['offset_distance'].__errors = [];\n  }\n\n  const transectPointOffsetDistance = isVegetationTransect\n    ? transectPoint.vegetation_transect_points.offset_distance\n    : transectPoint.offset_distance;\n\n  if (transectPointOffsetDistance > transectLineLength) {\n    const errorMessage =\n      'Offset distance for a transect point cannot exceed the length of the associated transect line';\n\n    if (isVegetationTransect) {\n      errorState.vegetation_transect_points['offset_distance'].addError(errorMessage);\n    } else {\n      errorState['offset_distance'].addError(errorMessage);\n    }\n  }\n\n  return errorState;\n};\n\n/*\n  Function to validate that the offset distance for a point on a transect line\n  does not exceed the length of the associated transect line\n*/\nexport function getTransectOffsetDistanceValidator(): rjsfValidator {\n  return (formData: any, errors: FormValidation): FormValidation => {\n    if (!formData || !formData.activity_subtype_data) {\n      return errors;\n    }\n\n    const transectLinesMatchingKeys = Object.keys(formData.activity_subtype_data).filter((key) =>\n      key.includes('transect_lines')\n    );\n\n    // If transect lines field is not present at all\n    if (!transectLinesMatchingKeys.length) {\n      return errors;\n    }\n\n    const isVegetationTransect = transectLinesMatchingKeys[0] === 'vegetation_transect_lines';\n    const transectLinesList = [...formData.activity_subtype_data[transectLinesMatchingKeys[0]]];\n\n    transectLinesList.forEach((transectLineObj: any, lineIndex: number) => {\n      const transectLineLength = transectLineObj?.transect_line?.transect_length;\n      const transectPointsMatchingKeys = Object.keys(transectLineObj).filter((key) => key.includes('transect_points'));\n\n      // If transect points field is not present at all\n      if (!transectPointsMatchingKeys.length) {\n        return errors;\n      }\n\n      const transectPointsList = transectLineObj[transectPointsMatchingKeys[0]];\n\n      transectPointsList.forEach((transectPoint: any, pointIndex: any) => {\n        let errorState =\n          errors.activity_subtype_data[transectLinesMatchingKeys[0]][lineIndex][transectPointsMatchingKeys[0]][\n            pointIndex\n          ];\n\n        errorState = determineErrorStateOnTransectPoint(\n          isVegetationTransect,\n          transectPoint,\n          transectLineLength,\n          errorState\n        );\n\n        if (!errorState) {\n          return errors;\n        }\n      });\n    });\n\n    return errors;\n  };\n}\n","/*\n  NOTE:\n\n  Need to spread and create new objects anywhere while accessing fields within objects because\n  if the object is mutated then the form field autopopulation will not happen as expected\n*/\n\n/*\n  Function that calculates the herbicide dilution rate and specific treatment area\n*/\nexport function populateHerbicideDilutionAndArea(newSubtypeData: any): any {\n  let updatedActivitySubtypeData = { ...newSubtypeData };\n\n  // If herbicide field is not edited at all just return existing activity subtype data\n  if (!newSubtypeData || !newSubtypeData.herbicide || JSON.stringify(newSubtypeData.herbicide[0]) === '{}') {\n    return newSubtypeData;\n  }\n\n  /*\n    Otherwise, check to see if herbicide fields have been populated\n    If yes, calculate the overall specific treatment area and dilution rate\n  */\n  const herbicides = [...newSubtypeData.herbicide];\n  const updatedHerbicides = [];\n\n  herbicides.forEach((herbicide: any) => {\n    const herbicideToUpdate = { ...herbicide };\n\n    if (\n      herbicideToUpdate.application_rate &&\n      herbicideToUpdate.herbicide_amount &&\n      herbicideToUpdate.liquid_herbicide_code &&\n      herbicideToUpdate.mix_delivery_rate\n    ) {\n      herbicideToUpdate.specific_treatment_area = parseFloat(\n        (herbicideToUpdate.herbicide_amount / herbicideToUpdate.mix_delivery_rate).toFixed(4)\n      );\n      herbicideToUpdate.dilution = parseFloat(\n        ((herbicideToUpdate.application_rate * 100) / herbicideToUpdate.mix_delivery_rate).toFixed(4)\n      );\n      herbicideToUpdate.tank_volume = parseFloat(\n        ((herbicideToUpdate.herbicide_amount * 100) / herbicideToUpdate.dilution).toFixed(4)\n      );\n    } else {\n      delete herbicideToUpdate.specific_treatment_area;\n      delete herbicideToUpdate.dilution;\n      delete herbicideToUpdate.tank_volume;\n    }\n\n    updatedHerbicides.push(herbicideToUpdate);\n  });\n\n  /*\n    Update the activity subtype data with the new herbicide values\n  */\n  updatedActivitySubtypeData = {\n    ...newSubtypeData,\n    herbicide: (JSON.stringify(updatedHerbicides[0]) !== '{}' && updatedHerbicides) || newSubtypeData.herbicide\n  };\n\n  return updatedActivitySubtypeData;\n}\n\n/*\n  Function that calculates the transect line and point data\n\n  Specifically the transect line length and bearing and\n  the transect point utm x/y values based on offset distance\n\n  If biocontrol efficacy transect, also calculates the phen total percentage\n*/\nexport function populateTransectLineAndPointData(newSubtypeData: any): any {\n  let updatedActivitySubtypeData = { ...newSubtypeData };\n\n  // Can be different keys for the object depending on the transect type, so extract it here\n  const transectLinesMatchingKeys = Object.keys(updatedActivitySubtypeData).filter((key) =>\n    key.includes('transect_lines')\n  );\n\n  // If transect lines field is not edited at all just return existing activity subtype data\n  if (!transectLinesMatchingKeys.length) {\n    return newSubtypeData;\n  }\n\n  /*\n    Determine if we are dealing with a biocontrol efficacy/vegetation transect/biological dispersal because those cases\n    need to be handled slightly differently\n  */\n  const isBiocontrolEfficacyTransect = transectLinesMatchingKeys[0] === 'biocontrol_efficacy_transect_lines';\n  const isBiocontrolDispersal = transectLinesMatchingKeys[0] === 'biological_dispersals';\n  const isVegetationTransect = transectLinesMatchingKeys[0] === 'vegetation_transect_lines';\n\n  /*\n    Otherwise, check to see if transect lines fields have been populated\n    If yes, calculate the bearing and length of each transect line\n  */\n  const transectLinesList = [...newSubtypeData[transectLinesMatchingKeys[0]]];\n  const updatedTransectLinesList = [];\n\n  transectLinesList.forEach((transectLineObj: any) => {\n    const transectLineObjToUpdate = { ...transectLineObj };\n\n    // Can be different keys for the object depending on the transect type, so extract it here\n    const transectPointsMatchingKeys = Object.keys(transectLineObjToUpdate).filter((key) =>\n      key.includes('transect_points')\n    );\n\n    const transectLine = { ...transectLineObjToUpdate.transect_line };\n    const { start_x_utm, end_x_utm, start_y_utm, end_y_utm } = transectLine;\n    const deltaX = end_x_utm - start_x_utm;\n    const deltaY = end_y_utm - start_y_utm;\n\n    if (start_x_utm && end_x_utm && start_y_utm && end_y_utm) {\n      let angle = Math.atan(deltaX / deltaY) * (180 / Math.PI);\n\n      /*\n        Because we want the angle relative from the North direction, depending on quadrant\n        we have to modify the calculated angle to get the northing version\n      */\n      if (deltaX > 0 && deltaY < 0) {\n        angle = angle + 180;\n      } else if (deltaX < 0 && deltaY < 0) {\n        angle = angle - 180;\n      }\n\n      transectLine.transect_bearing = parseFloat(angle.toFixed(1));\n      transectLine.transect_length = parseFloat(Math.hypot(deltaX, deltaY).toFixed(1));\n    } else {\n      delete transectLine.transect_bearing;\n      delete transectLine.transect_length;\n    }\n\n    // If transect points field is not edited at all no need to calculate point UTM values\n    if (!transectPointsMatchingKeys.length) {\n      updatedTransectLinesList.push({ ...transectLineObjToUpdate, transect_line: transectLine });\n    } else {\n      // If yes, calculate the UTM X and Y values of each transect point\n      const transectPointsList = [...transectLineObjToUpdate[transectPointsMatchingKeys[0]]];\n      const updatedTransectPointsList = [];\n\n      transectPointsList.forEach((transectPointObj: any) => {\n        const transectPointToUpdate = { ...transectPointObj };\n        const vegetationTransectPoints = { ...transectPointToUpdate.vegetation_transect_points };\n        const { offset_distance } = vegetationTransectPoints || transectPointToUpdate;\n\n        if (offset_distance && offset_distance <= transectLine.transect_length) {\n          const ratio = offset_distance / transectLine.transect_length;\n          const utmX = parseFloat((start_x_utm + ratio * deltaX).toFixed(1));\n          const utmY = parseFloat((start_y_utm + ratio * deltaY).toFixed(1));\n\n          /*\n            The utm x and y values are located in a different section of the object if it is\n            a vegetation transect, so access it as required and update the values\n          */\n          if (isVegetationTransect) {\n            vegetationTransectPoints.utm_x = utmX;\n            vegetationTransectPoints.utm_y = utmY;\n            transectPointToUpdate.vegetation_transect_points = vegetationTransectPoints;\n          } else {\n            transectPointToUpdate.utm_x = utmX;\n            transectPointToUpdate.utm_y = utmY;\n          }\n        } else {\n          /*\n            If one of the fields is no longer filled in, remove autopopulated fields\n          */\n          if (isVegetationTransect) {\n            delete vegetationTransectPoints.utm_x;\n            delete vegetationTransectPoints.utm_y;\n            transectPointToUpdate.vegetation_transect_points = vegetationTransectPoints;\n          } else {\n            delete transectPointToUpdate.utm_x;\n            delete transectPointToUpdate.utm_y;\n          }\n        }\n\n        /*\n          If biocontrol efficacy transect, need to calculate sum of all veg levels for total %\n        */\n        if (isBiocontrolEfficacyTransect) {\n          const {\n            veg_transect_native_forbs,\n            veg_transect_grasses,\n            veg_transect_bare_ground,\n            veg_transect_shrubs,\n            veg_transect_bryophytes,\n            veg_transect_litter\n          } = transectPointToUpdate;\n\n          if (\n            veg_transect_native_forbs &&\n            veg_transect_grasses &&\n            veg_transect_bare_ground &&\n            veg_transect_shrubs &&\n            veg_transect_bryophytes &&\n            veg_transect_litter\n          ) {\n            transectPointToUpdate.veg_total_percentage =\n              veg_transect_native_forbs +\n              veg_transect_grasses +\n              veg_transect_bare_ground +\n              veg_transect_shrubs +\n              veg_transect_bryophytes +\n              veg_transect_litter;\n          } else {\n            delete transectPointToUpdate.veg_total_percentage;\n          }\n        }\n\n        /*\n          If biocontrol dispersal, need to calculate sum of all phen levels for total %\n        */\n        if (isBiocontrolDispersal) {\n          const {\n            phen_level_se,\n            phen_level_ro,\n            phen_level_bo,\n            phen_level_fl,\n            phen_level_sf,\n            phen_level_sc\n          } = transectPointToUpdate;\n\n          if (phen_level_se && phen_level_ro && phen_level_bo && phen_level_fl && phen_level_sf && phen_level_sc) {\n            transectPointToUpdate.phen_total_percentage =\n              phen_level_se + phen_level_ro + phen_level_bo + phen_level_fl + phen_level_sf + phen_level_sc;\n          } else {\n            delete transectPointToUpdate.phen_total_percentage;\n          }\n        }\n\n        updatedTransectPointsList.push(transectPointToUpdate);\n      });\n\n      updatedTransectLinesList.push({\n        ...transectLineObjToUpdate,\n        transect_line: transectLine,\n        [transectPointsMatchingKeys[0]]: updatedTransectPointsList\n      });\n    }\n  });\n\n  /*\n    Update the activity subtype data with the new transect line values\n  */\n  updatedActivitySubtypeData = {\n    ...newSubtypeData,\n    [transectLinesMatchingKeys[0]]: updatedTransectLinesList.length && updatedTransectLinesList\n  };\n\n  return updatedActivitySubtypeData;\n}\n","import { getFieldsToCopy } from 'rjsf/business-rules/formDataCopyFields';\n\n/*\n  Function that takes in formData to save and the activitySubtype\n  and stores both into session storage for pasting ability later\n*/\nexport function saveFormDataToSession(formData: any, activitySubtype: string): void {\n  const activityData = { ...formData.activity_data };\n  const activitySubtypeData = { ...formData.activity_subtype_data };\n\n  // call business rule function to exclude certain fields of the activity_data of the form data\n  const activityDataToCopy = getFieldsToCopy(activityData, activitySubtypeData).activityData;\n\n  const formDataToCopy = {\n    ...formData,\n    activity_data: activityDataToCopy\n  };\n\n  sessionStorage.setItem('copiedFormData', JSON.stringify(formDataToCopy));\n  sessionStorage.setItem('activitySubtype', activitySubtype);\n}\n\n/*\n  Function to get the saved form data from session storage\n  and return it after ensuring the activity_data is not completely overriden\n  (due to business rule)\n*/\nexport function retrieveFormDataFromSession(activity: any): any {\n  const formData = activity.formData;\n  const activityData = { ...formData.activity_data };\n  const newActivityData = { ...activityData, ...JSON.parse(sessionStorage.getItem('copiedFormData')).activity_data };\n\n  return {\n    ...JSON.parse(sessionStorage.getItem('copiedFormData')),\n    activity_data: newActivityData\n  };\n}\n","import { Feature } from 'geojson';\nimport * as turf from '@turf/turf';\n\n/**\n * Calculate the net area for the total geometry\n *\n * @param {Feature[]} geoJSON The geometry in GeoJSON format\n */\nexport function calculateGeometryArea(geometry: Feature[]) {\n  let totalArea = 0;\n\n  if (!geometry || !geometry.length || geometry[geometry.length - 1].geometry.type === 'LineString') {\n    return totalArea;\n  }\n\n  /*\n    Use the last index because sometimes we allow multiple geos on map\n  */\n  const geo = geometry[geometry.length - 1];\n\n  /*\n    If the geometry is a point, then the area is nominally 1 square metre\n\n    Since circles are represented as points, if the geo has the radius property\n    we use it to calculate the area of the circle\n\n    Otherwise, calculate the area of the polygon using turf\n  */\n  if (geo.geometry.type === 'Point' && !geo.properties.hasOwnProperty('radius')) {\n    totalArea = 1;\n  } else if (geo.geometry.type === 'Point' && geo.properties.hasOwnProperty('radius')) {\n    totalArea = Math.PI * Math.pow(geo.properties.radius, 2);\n  } else if (geo.geometry.type === 'Polygon') {\n    totalArea = turf.area(turf.polygon(geo.geometry['coordinates']));\n  }\n\n  return parseFloat(totalArea.toFixed(0));\n}\n\n/**\n * Calculate the anchor point lat/lng for the geometry\n *\n * @param {Feature[]} geoJSON The geometry in GeoJSON format\n */\nexport function calculateLatLng(geom: Feature[]) {\n  if (!geom || !geom[geom.length - 1] || !geom[geom.length - 1].geometry) return;\n\n  const geo = geom[geom.length - 1].geometry;\n  const firstCoord = geo['coordinates'][0];\n\n  let latitude = null;\n  let longitude = null;\n\n  /*\n    Calculations based on business rules as to how anchor points need to be calculated\n    for different geometry types\n  */\n  if (geo.type === 'Point') {\n    latitude = geo.coordinates[1];\n    longitude = firstCoord;\n  } else if (geo.type === 'LineString') {\n    latitude = firstCoord[1];\n    longitude = firstCoord[0];\n  } else if (!geom[0].properties.isRectangle) {\n    latitude = firstCoord[0][1];\n    longitude = firstCoord[0][0];\n  } else {\n    const centerPoint = turf.center(turf.polygon(geo['coordinates'])).geometry;\n    latitude = centerPoint.coordinates[1];\n    longitude = centerPoint.coordinates[0];\n  }\n\n  const latlng = {\n    latitude: parseFloat(latitude.toFixed(6)),\n    longitude: parseFloat(longitude.toFixed(6))\n  };\n\n  return latlng;\n}\n","import { CircularProgress, Container, makeStyles, Box, Button, Typography } from '@material-ui/core';\nimport { FileCopy } from '@material-ui/icons';\nimport ActivityComponent from 'components/activity/ActivityComponent';\nimport { IPhoto } from 'components/photo/PhotoContainer';\nimport { ActivityStatus, FormValidationStatus } from 'constants/activities';\nimport { DocType } from 'constants/database';\nimport { DatabaseContext } from 'contexts/DatabaseContext';\nimport { Feature } from 'geojson';\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { debounced } from 'utils/FunctionUtils';\nimport { MapContextMenuData } from '../map/MapContextMenu';\nimport {\n  getCustomValidator,\n  getAreaValidator,\n  getWindValidator,\n  getTemperatureValidator,\n  getHerbicideApplicationRateValidator,\n  getTransectOffsetDistanceValidator,\n  getJurisdictionPercentValidator,\n  getInvasivePlantsValidator,\n  getDuplicateInvasivePlantsValidator\n} from 'rjsf/business-rules/customValidation';\nimport { getCustomErrorTransformer } from 'rjsf/business-rules/customErrorTransformer';\nimport {\n  populateHerbicideDilutionAndArea,\n  populateTransectLineAndPointData\n} from 'rjsf/business-rules/populateCalculatedFields';\nimport { notifySuccess, notifyError } from 'utils/NotificationUtils';\nimport { retrieveFormDataFromSession, saveFormDataToSession } from 'utils/saveRetrieveFormData';\nimport { calculateLatLng, calculateGeometryArea } from 'utils/geometryHelpers';\nimport { addClonedActivityToDB } from 'utils/addActivity';\n\nconst useStyles = makeStyles((theme) => ({\n  heading: {\n    fontSize: theme.typography.pxToRem(18),\n    fontWeight: theme.typography.fontWeightRegular\n  },\n  mapContainer: {\n    height: '600px'\n  },\n  map: {\n    height: '100%',\n    width: '100%',\n    zIndex: 0\n  }\n}));\n\ninterface IActivityPageProps {\n  classes?: any;\n  activityId?: string;\n  setObservation?: Function;\n  setFormHasErrors?: Function;\n  setParentFormRef?: Function;\n}\n\n//why does this page think I need a map context menu ?\nconst ActivityPage: React.FC<IActivityPageProps> = (props) => {\n  const classes = useStyles();\n\n  const databaseContext = useContext(DatabaseContext);\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [linkedActivity, setLinkedActivity] = useState(null);\n  const [isCloned, setIsCloned] = useState(false);\n  const [geometry, setGeometry] = useState<Feature[]>([]);\n  const [extent, setExtent] = useState(null);\n  // \"is it open?\", \"what coordinates of the mouse?\", that kind of thing:\n  const initialContextMenuState: MapContextMenuData = { isOpen: false, lat: 0, lng: 0 };\n  const [contextMenuState, setContextMenuState] = useState(initialContextMenuState);\n\n  /* commented out for sonar cloud, but this will be needed to close the context menu for this page:\n    const handleContextMenuClose = () => {\n      setContextMenuState({ ...contextMenuState, isOpen: false });\n    };\n  */\n\n  const [doc, setDoc] = useState(null);\n  const docId = doc && doc._id;\n\n  const [photos, setPhotos] = useState<IPhoto[]>([]);\n\n  /**\n   * Set the default form data values\n   *\n   * @param {*} activity The doc/activity object\n   */\n  const getDefaultFormDataValues = (activity: any) => {\n    const { activity_data } = activity.formData || {};\n\n    return {\n      ...activity.formData,\n      activity_data: {\n        ...activity_data,\n        reported_area: calculateGeometryArea(activity.geometry)\n      }\n    };\n  };\n\n  /**\n   * Save the geometry added by the user\n   *\n   * @param {Feature} geoJSON The geometry in GeoJSON format\n   */\n  const saveGeometry = useCallback(\n    (geom: Feature[]) => {\n      setDoc((activity: any) => {\n        const { latitude, longitude } = calculateLatLng(geom) || {};\n        const formData = activity.formData;\n        const areaOfGeometry = calculateGeometryArea(geom);\n\n        const updatedFormData = {\n          ...formData,\n          activity_data: {\n            ...formData.activity_data,\n            latitude,\n            longitude,\n            reported_area: areaOfGeometry\n          }\n        };\n\n        databaseContext.database.upsert(activity._id, (dbDoc) => {\n          return {\n            ...dbDoc,\n            ...activity,\n            formData: updatedFormData,\n            geometry: geom,\n            status: ActivityStatus.EDITED,\n            dateUpdated: new Date()\n          };\n        });\n\n        return {\n          ...activity,\n          formData: updatedFormData,\n          geometry: geom,\n          status: ActivityStatus.EDITED,\n          dateUpdated: new Date()\n        };\n      });\n    },\n    [databaseContext.database]\n  );\n\n  /**\n   * Save the map Extent within the database\n   *\n   * @param {*} extent The leaflet bounds object\n   */\n  const saveExtent = useCallback(\n    async (newExtent: any) => {\n      await databaseContext.database.upsert(doc._id, (dbDoc) => {\n        return { ...dbDoc, extent: newExtent };\n      });\n    },\n    [databaseContext.database, doc]\n  );\n\n  /**\n   * Save the photos.\n   *\n   * @param {IPhoto} photosArr An array of photo objects.\n   */\n  const savePhotos = useCallback(\n    async (photosArr: IPhoto[]) => {\n      await databaseContext.database.upsert(doc._id, (dbDoc) => {\n        return { ...dbDoc, photos: photosArr, dateUpdated: new Date() };\n      });\n    },\n    [databaseContext.database, doc]\n  );\n\n  /*\n    Function that runs if the form submit fails and has errors\n  */\n  const onFormSubmitError = () => {\n    notifyError(\n      databaseContext,\n      'There are errors in your form. Please make sure your form contains no errors and try again.'\n    );\n  };\n\n  /**\n   * Save the form when it is submitted.\n   *\n   * @param {*} event the form submit event\n   */\n  const onFormSubmitSuccess = async (event: any, formRef: any) => {\n    if (props.setFormHasErrors) {\n      props.setFormHasErrors(false);\n    }\n\n    const updatedFormValues = {\n      formData: event.formData,\n      status: ActivityStatus.EDITED,\n      dateUpdated: new Date(),\n      formStatus: FormValidationStatus.VALID\n    };\n\n    formRef.setState({ ...formRef.state, schemaValidationErrors: [], schemaValidationErrorSchema: {} }, () => {\n      setDoc({ ...doc, ...updatedFormValues });\n    });\n\n    await databaseContext.database.upsert(doc._id, (activity) => {\n      return {\n        ...activity,\n        ...updatedFormValues\n      };\n    });\n  };\n\n  /**\n   * Save the form whenever it changes.\n   *\n   * Note: debouncing will prevent this from running more than once every `100` milliseconds.\n   *\n   * @param {*} event the form change event\n   */\n  const onFormChange = useCallback(\n    debounced(100, async (event: any) => {\n      let updatedActivitySubtypeData = populateHerbicideDilutionAndArea(event.formData.activity_subtype_data);\n      updatedActivitySubtypeData = populateTransectLineAndPointData(updatedActivitySubtypeData);\n\n      const updatedFormValues = {\n        formData: { ...event.formData, activity_subtype_data: updatedActivitySubtypeData },\n        status: ActivityStatus.EDITED,\n        dateUpdated: new Date(),\n        formStatus: FormValidationStatus.VALID\n      };\n\n      setDoc({ ...doc, ...updatedFormValues });\n\n      await databaseContext.database.upsert(docId, (activity) => {\n        return {\n          ...activity,\n          ...updatedFormValues\n        };\n      });\n    }),\n    [doc]\n  );\n\n  /**\n   * Paste copied form data saved in session storage\n   * Update the doc (activity) with the latest form data and store it in DB\n   */\n  const pasteFormData = async () => {\n    const formDataToPaste = retrieveFormDataFromSession(doc);\n\n    const updatedFormValues = {\n      formData: formDataToPaste,\n      status: ActivityStatus.EDITED,\n      dateUpdated: new Date(),\n      formStatus: FormValidationStatus.VALID\n    };\n\n    setDoc({ ...doc, ...updatedFormValues });\n\n    notifySuccess(databaseContext, 'Successfully pasted form data.');\n\n    await databaseContext.database.upsert(docId, (activity) => {\n      return {\n        ...activity,\n        ...updatedFormValues\n      };\n    });\n  };\n\n  /**\n   * Copy form data into session storage\n   */\n  const copyFormData = () => {\n    const { formData, activitySubtype } = doc;\n\n    saveFormDataToSession(formData, activitySubtype);\n    notifySuccess(databaseContext, 'Successfully copied form data.');\n  };\n\n  /*\n    Function to pull activity results from the DB given an activityId if present\n  */\n  const getActivityResultsFromDB = async (activityId: any): Promise<any> => {\n    const appStateResults = await databaseContext.database.find({ selector: { _id: DocType.APPSTATE } });\n\n    if (!appStateResults || !appStateResults.docs || !appStateResults.docs.length) {\n      return;\n    }\n\n    const activityResults = await databaseContext.database.find({\n      selector: { _id: activityId || appStateResults.docs[0].activeActivity }\n    });\n\n    return activityResults;\n  };\n\n  /*\n    Function to set the active activity in the DB context and the current activity view\n  */\n  const setActiveActivity = async (activeActivity: any) => {\n    await databaseContext.database.upsert(DocType.APPSTATE, (appStateDoc) => {\n      const updatedActivity = { ...appStateDoc, activeActivity: activeActivity._id };\n\n      setIsCloned(true);\n\n      return updatedActivity;\n    });\n  };\n\n  /*\n    Function to generate clone activity button component\n  */\n  const generateCloneActivityButton = () => {\n    return (\n      <Box mb={3} display=\"flex\" flexDirection=\"row-reverse\">\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          startIcon={<FileCopy />}\n          onClick={async () => {\n            const addedActivity = await addClonedActivityToDB(databaseContext, doc);\n            setActiveActivity(addedActivity);\n            notifySuccess(databaseContext, 'Successfully cloned activity. You are now viewing the cloned activity.');\n          }}>\n          Clone Activity\n        </Button>\n      </Box>\n    );\n  };\n\n  /*\n    Function to extract linked record id from record if it exists\n    and then set the linkedActivity in state for reference within\n    the form as an accordion and for population of certain fields later/validation\n  */\n  const handleRecordLinking = async (updatedDoc: any) => {\n    let linkedRecordId: string = null;\n\n    if (updatedDoc.activitySubtype.includes('ChemicalPlant')) {\n      linkedRecordId = updatedDoc.formData.activity_subtype_data.activity_id;\n    } else if (\n      ['Treatment', 'Monitoring'].includes(updatedDoc.activityType) &&\n      updatedDoc.activitySubtype.includes('Plant')\n    ) {\n      linkedRecordId = updatedDoc.formData.activity_type_data.activity_id;\n    }\n\n    if (linkedRecordId) {\n      const linkedRecordActivityResults = await getActivityResultsFromDB(linkedRecordId);\n      setLinkedActivity(linkedRecordActivityResults.docs[0]);\n    }\n  };\n\n  useEffect(() => {\n    const getActivityData = async () => {\n      const activityResults = await getActivityResultsFromDB(props.activityId || null);\n\n      if (!activityResults) {\n        setIsLoading(false);\n        return;\n      }\n\n      const updatedFormData = getDefaultFormDataValues(activityResults.docs[0]);\n      const updatedDoc = { ...activityResults.docs[0], formData: updatedFormData };\n\n      await handleRecordLinking(updatedDoc);\n\n      setGeometry(updatedDoc.geometry);\n      setExtent(updatedDoc.extent);\n      setPhotos(updatedDoc.photos || []);\n      setDoc(updatedDoc);\n\n      setIsLoading(false);\n    };\n\n    getActivityData();\n  }, [databaseContext, isCloned]);\n\n  useEffect(() => {\n    if (isLoading || !doc) {\n      return;\n    }\n\n    saveGeometry(geometry);\n  }, [geometry, isLoading, saveGeometry]);\n\n  useEffect(() => {\n    if (isLoading || !doc) {\n      return;\n    }\n\n    saveExtent(extent);\n  }, [extent, isLoading, saveExtent]);\n\n  useEffect(() => {\n    if (isLoading || !doc) {\n      return;\n    }\n\n    savePhotos(photos);\n  }, [photos, isLoading, savePhotos]);\n\n  useEffect(() => {\n    if (props.setObservation && doc) {\n      props.setObservation(doc);\n    }\n  }, [doc]);\n\n  if (isLoading) {\n    return <CircularProgress />;\n  }\n\n  return (\n    <Container className={props.classes.container}>\n      {!doc && (\n        <>\n          <Box mb={3}>\n            <Typography variant=\"h4\">Current Activity </Typography>\n          </Box>\n          <Typography>\n            There is no current activity. When you start creating an activity, it will become your current activity and\n            show up in this tab.\n          </Typography>\n        </>\n      )}\n      {doc && (\n        <ActivityComponent\n          customValidation={getCustomValidator([\n            getAreaValidator(doc.activitySubtype),\n            getWindValidator(doc.activitySubtype),\n            getTemperatureValidator(doc.activitySubtype),\n            getDuplicateInvasivePlantsValidator(doc.activitySubtype),\n            getHerbicideApplicationRateValidator(),\n            getTransectOffsetDistanceValidator(),\n            getJurisdictionPercentValidator(),\n            getInvasivePlantsValidator(linkedActivity)\n          ])}\n          customErrorTransformer={getCustomErrorTransformer()}\n          classes={classes}\n          activity={doc}\n          linkedActivity={linkedActivity}\n          onFormChange={onFormChange}\n          onFormSubmitSuccess={onFormSubmitSuccess}\n          onFormSubmitError={onFormSubmitError}\n          photoState={{ photos, setPhotos }}\n          mapId={doc._id}\n          geometryState={{ geometry, setGeometry }}\n          extentState={{ extent, setExtent }}\n          contextMenuState={{ state: contextMenuState, setContextMenuState }} // whether someone clicked, and click x & y\n          pasteFormData={() => pasteFormData()}\n          copyFormData={() => copyFormData()}\n          cloneActivityButton={generateCloneActivityButton}\n          setParentFormRef={props.setParentFormRef}\n          showDrawControls={true}\n        />\n      )}\n    </Container>\n  );\n};\n\nexport default ActivityPage;\n","import { AjvError } from '@rjsf/core';\n\n/**\n * Returns a custom error transformer.\n *\n * @return {*}\n */\nexport const getCustomErrorTransformer = () => {\n  return (errors: AjvError[]) => {\n    return errors.filter((error) => {\n      if (error.message === 'should be equal to one of the allowed values') {\n        return false;\n      }\n\n      if (error.message === 'should match exactly one schema in oneOf') {\n        return false;\n      }\n\n      if (error.message === 'should match some schema in anyOf') {\n        return false;\n      }\n\n      return true;\n    });\n  };\n};\n","import { AppBar, Toolbar, Tabs, Tab } from '@material-ui/core';\nimport { NetworkContext } from 'contexts/NetworkContext';\nimport React, { useContext, useEffect, useState } from 'react';\n\ninterface IFooterProps {\n  classes?: any;\n}\n\nconst Footer: React.FC<IFooterProps> = () => {\n  const networkContext = useContext(NetworkContext);\n\n  const defaultConnectionStatusString = (!window['cordova'] && 'Online') || '';\n\n  const [networkStatusString, setNetworkStatusString] = useState(defaultConnectionStatusString);\n\n  const tabs = [\n    { label: `Network Status: ${networkStatusString}`, url: '/' },\n    { label: 'Disclaimer', url: 'https://www.gov.bc.ca/gov/content/home/disclaimer' },\n    { label: 'Privacy', url: 'https://www.gov.bc.ca/gov/content/home/privacy' },\n    { label: 'Accessibility', url: 'https://www.gov.bc.ca/gov/content/home/accessible-government' },\n    { label: 'Copyright', url: 'https://www.gov.bc.ca/gov/content/home/copyright' }\n  ];\n\n  useEffect(() => {\n    if (!networkContext) {\n      return;\n    }\n\n    const connectionStatus = (networkContext.connected && 'Online') || 'Offline';\n    const connectionStatusString = `${connectionStatus} (type: ${networkContext.connectionType})`;\n\n    setNetworkStatusString(connectionStatusString);\n  }, [networkContext]);\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar style={{ justifyContent: 'flex-end' }}>\n        <Tabs value={false} variant=\"scrollable\" scrollButtons=\"on\">\n          {tabs.map((tab) => (\n            <Tab label={tab.label} key={tab.label} onClick={() => window.open(tab.url)} />\n          ))}\n        </Tabs>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Footer;\n","import { useKeycloak } from '@react-keycloak/web';\n\n/**\n * Represents the userinfo provided by keycloak.\n *\n * @export\n * @interface IUserInfo\n */\nexport interface IUserInfo {\n  displayName?: string;\n  username: string;\n  name?: string;\n  preferred_username?: string;\n  firstName?: string;\n  lastName?: string;\n  email: string;\n  groups: string[];\n  roles: string[];\n  given_name?: string;\n  family_name?: string;\n  sub?: string;\n}\n\n/**\n * Represents the keycloak object for the authenticated user.\n *\n * @export\n * @interface IKeycloak\n */\nexport interface IKeycloak {\n  obj: any;\n  displayName?: string;\n  username: string;\n  name?: string;\n  preferred_username?: string;\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n  roles: string[];\n  sub: string;\n  hasRole(role?: string | string[]): boolean;\n}\n\n/**\n * Provides extension methods to interact with the `keycloak` object.\n */\nfunction useKeycloakWrapper(): IKeycloak {\n  const { keycloak } = useKeycloak();\n\n  const userInfo = keycloak?.userInfo as IUserInfo;\n\n  /**\n   * Determine if the user belongs to the specified role(s).\n   * The user's role(s) must match at least 1 of the valid roles.\n   *\n   * @param {(string | string[])} [validRoles] a role, or array of roles, that the user must match.\n   * @return {*} {boolean} true if the user's role(s) match at least 1 of the valid roles, false otherwise.\n   */\n  const hasRole = (validRoles?: string | string[]): boolean => {\n    if (!validRoles || !validRoles.length) {\n      return false;\n    }\n\n    if (Array.isArray(validRoles)) {\n      return validRoles.some((role) => getRoles().includes(role));\n    }\n\n    return getRoles().includes(validRoles);\n  };\n\n  /**\n   * Return the array of roles that the user belongs to.\n   */\n  const getRoles = (): string[] => {\n    return keycloak?.resourceAccess?.['invasives-bc']?.roles || [];\n  };\n\n  /**\n   * Return the user's username\n   */\n  const getUsername = (): string => {\n    return userInfo?.username;\n  };\n\n  /**\n   * Return the user's preferred_username\n   */\n  const getPreferredUsername = (): string => {\n    return userInfo?.preferred_username;\n  };\n\n  /**\n   * Return the user's display name\n   */\n  const getDisplayName = (): string | undefined => {\n    return userInfo?.name ?? userInfo?.preferred_username;\n  };\n\n  /**\n   * Return the user's first name\n   */\n  const getFirstName = (): string | undefined => {\n    return userInfo?.firstName ?? userInfo?.given_name;\n  };\n\n  /**\n   * Return the user's last name\n   */\n  const getLastName = (): string | undefined => {\n    return userInfo?.lastName ?? userInfo?.family_name;\n  };\n\n  /**\n   * Return the user's email\n   */\n  const getEmail = (): string | undefined => {\n    return userInfo?.email;\n  };\n\n  /**\n   * Return the user's sub (unique identifier)\n   */\n  const getSub = (): string | undefined => {\n    return userInfo?.sub;\n  };\n\n  return {\n    obj: keycloak,\n    username: getUsername(),\n    preferred_username: getPreferredUsername(),\n    displayName: getDisplayName(),\n    firstName: getFirstName(),\n    lastName: getLastName(),\n    email: getEmail(),\n    roles: getRoles(),\n    sub: getSub(),\n    hasRole: hasRole\n  };\n}\n\nexport default useKeycloakWrapper;\n","import { AppBar, CircularProgress, Tab, Tabs, Toolbar, Grid, makeStyles, Theme } from '@material-ui/core';\nimport { Assignment, Bookmarks, Explore, HomeWork, Map, Search, Home } from '@material-ui/icons';\nimport { ALL_ROLES } from 'constants/roles';\nimport useKeycloakWrapper from 'hooks/useKeycloakWrapper';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  pointer: {\n    cursor: 'pointer'\n  },\n  alignment: {\n    justifyContent: 'inherit',\n    '@media (max-device-width: 1430px)': {\n      justifyContent: 'center'\n    }\n  }\n}));\n\nexport interface ITabConfig {\n  path: string;\n  childPaths?: string[];\n  label: string;\n  icon: React.ReactElement;\n}\n\nexport interface ITabsContainerProps {\n  isMobileNoNetwork: boolean;\n}\n\n//const bcGovLogoRev = 'https://bcgov.github.io/react-shared-components/images/bcid-logo-rev-en.svg';\nconst invbclogo = require('InvasivesBC_Icon.svg');\n\nconst TabsContainer: React.FC<ITabsContainerProps> = (props: any) => {\n  const keycloak = useKeycloakWrapper();\n\n  const classes = useStyles();\n  const history = useHistory();\n\n  const [tabConfig, setTabConfig] = useState<ITabConfig[]>([]);\n\n  /**\n   * Determine the active tab index, based on the current url path.\n   *\n   * @param {number} activeTabNumber The current active tab index, to be used as backup if no matching paths are found.\n   * @return {*}  {number}\n   */\n  const getActiveTab = useCallback(\n    (activeTabNumber: number): number => {\n      for (let index = 0; index < tabConfig.length; index++) {\n        const pathsToMatchAgainst = [tabConfig[index].path, ...(tabConfig[index].childPaths || [])];\n\n        // If the current url path contains any of the paths for a tab, return its index as the new active tab index.\n        if (\n          pathsToMatchAgainst.some((pathToMatch) => {\n            return history.location.pathname.includes(pathToMatch);\n          })\n        ) {\n          return index;\n        }\n      }\n\n      // Otherwise return the current active tab index as a fallback\n      return activeTabNumber;\n    },\n    [history.location.pathname]\n  );\n\n  const [activeTab, setActiveTab] = React.useState(getActiveTab(0));\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setActiveTab(newValue);\n  };\n\n  useEffect(() => {\n    setActiveTab((activeTabNumber) => getActiveTab(activeTabNumber));\n  }, [history.location.pathname, getActiveTab]);\n\n  useEffect(() => {\n    const setTabConfigBasedOnRoles = () => {\n      setTabConfig(() => {\n        const tabsUserHasAccessTo: ITabConfig[] = [];\n\n        if (keycloak.hasRole(ALL_ROLES) || props.isMobileNoNetwork) {\n          tabsUserHasAccessTo.push({\n            label: 'Home',\n            path: '/home/landing',\n            icon: <Home />\n          });\n\n          tabsUserHasAccessTo.push({\n            label: 'Search',\n            path: '/home/search',\n            icon: <Search />\n          });\n\n          tabsUserHasAccessTo.push({\n            label: 'Plan My Trip',\n            path: '/home/plan',\n            icon: <Explore />\n          });\n\n          tabsUserHasAccessTo.push({\n            label: 'Cached Records',\n            path: '/home/references',\n            childPaths: ['/home/references/activity'],\n            icon: <Bookmarks />\n          });\n\n          tabsUserHasAccessTo.push({\n            label: 'My Records',\n            path: '/home/activities',\n            icon: <HomeWork />\n          });\n\n          tabsUserHasAccessTo.push({\n            label: 'Map',\n            path: '/home/map',\n            icon: <Map />\n          });\n\n          tabsUserHasAccessTo.push({\n            label: 'Current Activity',\n            path: '/home/activity',\n            icon: <Assignment />\n          });\n        }\n\n        return tabsUserHasAccessTo;\n      });\n    };\n\n    if (!tabConfig || !tabConfig.length) {\n      setTabConfigBasedOnRoles();\n    }\n  }, [keycloak]);\n\n  if (!tabConfig || !tabConfig.length) {\n    return <CircularProgress />;\n  }\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Grid className={classes.alignment} flex-direction=\"row\" container>\n          <Grid xs={1} item>\n            <img\n              className={classes.pointer}\n              src={invbclogo}\n              width=\"50\"\n              height=\"50\"\n              alt=\"B.C. Government Logo\"\n              onClick={() => history.push('/')}\n            />\n          </Grid>\n          <Grid xs={11} item>\n            <Tabs value={activeTab} onChange={handleChange} variant=\"scrollable\" scrollButtons=\"on\">\n              {tabConfig.map((tab) => (\n                <Tab\n                  label={tab.label}\n                  key={tab.label.split(' ').join('_')}\n                  icon={tab.icon}\n                  onClick={() => history.push(tab.path)}\n                />\n              ))}\n            </Tabs>\n          </Grid>\n        </Grid>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default TabsContainer;\n","import { Box, Collapse, IconButton } from '@material-ui/core';\nimport Badge from '@material-ui/core/Badge';\nimport { Close, MarkunreadMailbox } from '@material-ui/icons';\nimport { Alert } from '@material-ui/lab';\nimport Footer from 'components/Footer/Footer';\nimport TabsContainer from 'components/tabs/TabsContainer';\nimport { DocType } from 'constants/database';\nimport { DatabaseChangesContext } from 'contexts/DatabaseChangesContext';\nimport { DatabaseContext } from 'contexts/DatabaseContext';\nimport React, { useContext, useEffect, useState, useCallback } from 'react';\n\nexport interface IHomeLayoutProps {\n  children: any;\n}\n\nconst HomeLayout: React.FC<IHomeLayoutProps> = (props: any) => {\n  const databaseContext = useContext(DatabaseContext);\n  const databaseChangesContext = useContext(DatabaseChangesContext);\n\n  const [isOpen, setIsOpen] = useState(false);\n  const [notification, setNotification] = useState(null);\n  const [notificationCount, setNotificationCount] = useState(0);\n\n  const addNotificationsToPage = useCallback(async () => {\n    let notifications = await databaseContext.database.find({\n      selector: {\n        docType: DocType.NOTIFICATION,\n        acknowledged: false\n      },\n      fields: ['dateCreated', '_id', 'notificationType', 'text', 'docType', 'acknowledged'],\n      use_index: 'notificationsIndex'\n    });\n\n    notifications.docs = notifications.docs.filter((note) => note._id && note.notificationType && note.text);\n    notifications.docs.sort((a, b) => {\n      if (a.dateCreated < b.dateCreated) return 1;\n      if (a.dateCreated > b.dateCreated) return -1;\n      return 0;\n    });\n\n    setNotificationCount(notifications.docs.length);\n\n    if (notifications.docs.length > 0) {\n      setNotification(notifications.docs[0]);\n      setIsOpen(true);\n    }\n  }, [databaseContext.database]);\n\n  useEffect(() => {\n    const updateComponent = () => {\n      addNotificationsToPage();\n    };\n\n    updateComponent();\n  }, [databaseChangesContext, addNotificationsToPage]);\n\n  const acknowledgeNotification = (docId: string) => {\n    databaseContext.database.upsert(docId, (doc) => {\n      return { ...doc, acknowledged: true };\n    });\n\n    setIsOpen(false);\n  };\n\n  return (\n    <Box width=\"inherit\" height=\"100%\" display=\"flex\" flex=\"1\" flexDirection=\"column\">\n      <TabsContainer isMobileNoNetwork={props.children.props.isMobileNoNetwork} />\n      <Collapse timeout={50} in={isOpen}>\n        <Alert\n          // severity can't be null so this is a workaround\n          severity={notification == null ? 'success' : notification.notificationType}\n          action={\n            <IconButton\n              aria-label=\"close\"\n              color=\"inherit\"\n              size=\"medium\"\n              onClick={() => {\n                acknowledgeNotification(notification._id);\n              }}>\n              <Badge badgeContent={notificationCount}>\n                <MarkunreadMailbox />\n              </Badge>\n              <Close fontSize=\"inherit\" />\n            </IconButton>\n          }>\n          <strong>{notification == null ? null : notification.text}</strong>\n        </Alert>\n      </Collapse>\n      <Box mb=\"43px\" height=\"inherit\" width=\"inherit\" overflow=\"auto\">\n        {props.children}\n      </Box>\n      <Box position=\"absolute\" bottom=\"0\" left=\"0\" right=\"0\" bgcolor=\"primary.main\" color=\"primary.contrastText\">\n        <Footer />\n      </Box>\n    </Box>\n  );\n};\n\nexport default HomeLayout;\n","import {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Box,\n  Button,\n  Checkbox,\n  Collapse,\n  IconButton,\n  makeStyles,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TablePagination,\n  TableRow,\n  TableSortLabel,\n  Toolbar,\n  Tooltip,\n  Typography\n} from '@material-ui/core';\nimport { lighten } from '@material-ui/core/styles';\nimport { useHistory } from 'react-router-dom';\nimport { DocType } from 'constants/database';\nimport { Edit, Delete, KeyboardArrowUp, KeyboardArrowDown, ExpandMore, FilterList } from '@material-ui/icons';\nimport { notifyError } from 'utils/NotificationUtils';\nimport React, { useState, useContext, useEffect, useCallback, useMemo } from 'react';\nimport { DatabaseContext } from 'contexts/DatabaseContext';\nimport RootUISchemas from 'rjsf/uiSchema/RootUISchemas';\nimport { useInvasivesApi } from 'hooks/useInvasivesApi';\nimport clsx from 'clsx';\n\nconst snakeToPascal = (string, spaces = false) =>\n  string\n    .split('/')\n    .map((snake) =>\n      snake\n        .split('_')\n        .map((substr) => substr.charAt(0).toUpperCase() + substr.slice(1))\n        .join(spaces ? ' ' : '')\n    )\n    .join('/');\n\nconst arraysEqual = (a, b) => {\n  if (a === b) return true;\n  if (!a || !b) return true;\n  if (a.length !== b.length) return false;\n\n  // If you don't care about the order of the elements inside\n  // the array, you should sort both arrays here.\n  // Please note that calling sort on an array will modify that array.\n  // you might want to clone your array first.\n\n  for (var i = 0; i < a.length; ++i) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n};\n\nconst useStyles = makeStyles((theme) => ({\n  component: {\n    marginTop: '15px'\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1\n  },\n  paper: {\n    textAlign: 'left',\n    color: theme.palette.text.primary,\n    flexDirection: 'column'\n  },\n  table: {\n    minWidth: 750,\n    width: 'auto',\n    tableLayout: 'auto'\n  },\n  tableRow: {\n    verticalAlign: 'top'\n  },\n  tableContainer: {\n    display: 'table-row'\n  },\n  cell: {\n    whiteSpace: 'nowrap',\n    width: 1,\n    borderBottom: 0\n  },\n  wideCell: {\n    minWidth: 500,\n    maxWidth: 500\n  },\n  missingValue: {\n    fontStyle: 'italic',\n    color: '#777'\n  },\n  header: {\n    backgroundColor: 'rgba(0, 0, 0, 0.06)'\n  },\n  dropdown: {\n    paddingBottom: 0,\n    paddingTop: 0,\n    paddingLeft: '1em'\n  },\n  dropdownCol: {\n    width: 1\n  },\n  openRow: {\n    overflow: 'inherit',\n    whiteSpace: 'inherit',\n    maxWidth: 600 // give it a bit more room to breathe,\n    // but still shouldn't be too wide (has vertical space now)\n  },\n  closedRow: {\n    overflow: 'hidden',\n    whiteSpace: 'nowrap',\n    textOverflow: 'ellipsis',\n    maxWidth: 350\n  },\n  emptyTable: {\n    paddingLeft: 30\n  },\n  button: {\n    marginLeft: 10,\n    marginRight: 10,\n    whiteSpace: 'nowrap',\n    minWidth: 'max-content'\n  },\n  numberCell: {\n    align: 'right'\n  },\n  dateCell: {}\n}));\n\nconst useToolbarStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1)\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85)\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark\n        },\n  title: {\n    flex: '1 1 100%',\n    fontSize: theme.typography.pxToRem(18),\n    fontWeight: theme.typography.fontWeightRegular\n  },\n  toolbar: {\n    height: '1px'\n  },\n  button: {\n    marginLeft: 10,\n    marginRight: 10,\n    whiteSpace: 'nowrap',\n    minWidth: 'max-content'\n  }\n}));\n\nconst getValue = (row, header) => {\n  const cell = row[header.id];\n  const valueMap = header.valueMap;\n  const numeric = header.type === 'number';\n  switch (typeof cell) {\n    case 'object':\n      if (cell === null)\n        // this might be worth throwing an error\n        return null;\n      if (Array.isArray(cell)) return cell.map((value) => valueMap[value] || value).join(' ');\n      return valueMap[cell?.children] || cell?.children;\n    case 'function':\n      const result = cell(row);\n      return valueMap[result] || result;\n    case 'string':\n    default:\n      return numeric ? +valueMap[cell] || +cell : valueMap[cell] || cell;\n  }\n};\n\nfunction stableSort(rows, header, ascending) {\n  if (!header) return rows;\n  const valueIndexPairs = rows.map((row, index) => [getValue(row, header), index, row]);\n  valueIndexPairs.sort((a, b) => {\n    if (a[0] > b[0]) return ascending ? 1 : -1;\n    if (b[0] > a[0]) return ascending ? -1 : 1;\n    // else sort by index\n    return a[1] - b[1];\n  });\n  return valueIndexPairs.map((row) => row[2]);\n}\n\n/*\n  OUTDATED:\n  headers: an array of (string/numeric) values (or objects if you want to get fancy and define other object cell properties)\n  rows: an array of arrays of columns, which can each contain (string/numeric) values or objects defining overrides to each cell\n  dropdown: if defined, gives a function to build the content of a dropdown section for each row, based on the 'source' and the current column index\n  pagination: object defining pagination settings, or just boolean true to use defaults.  No pagination if undefined/false\n  startsOpen: boolean to set the dropdown of each row to open by default or not (default closed)\n*/\nexport interface RecordTablePropType {\n  headers: Array<any>;\n  rows: any;\n  tableName?: string;\n  tableSchemaType?: any;\n  expandable?: boolean;\n  startExpanded?: boolean;\n  keyField?: string;\n  startingOrder?: string;\n  startingOrderBy?: string;\n  startingRowsPerPage?: number;\n  rowsPerPageOptions?: Array<number>;\n  densePadding?: boolean;\n  padEmptyRows?: boolean;\n  enableSelection?: boolean;\n  selected?: Array<any>;\n  setSelected?: (newSelected: Array<any>) => any;\n  enableFiltering?: boolean;\n  enableTooltips?: boolean;\n  className?: any;\n  dropdown?: (row: any) => any;\n  dropdownLimit?: boolean;\n  onToggleExpandRow?: (row: any, expandedRows?: Array<any>, selectedRows?: Array<any>) => any;\n  overflowDropdown?: boolean;\n  overflowLimit?: number;\n  pagination?: any;\n  actions?: any;\n  rowActionStyle?: string;\n}\n\nconst RecordTable: React.FC<RecordTablePropType> = (props) => {\n  const classes = useStyles();\n  const history = useHistory();\n  const databaseContext = useContext(DatabaseContext);\n  const invasivesApi = useInvasivesApi();\n\n  const {\n    tableName = '',\n    keyField = '_id', // defaults to doc _id used by PouchDB\n    startingOrder = 'asc',\n    // dropdown, // default none\n    dropdownLimit = true,\n    onToggleExpandRow, // callback fired when row is expanded (or contracted, for now)\n    overflowDropdown = true, // overflow into a dropdown when a cell is very verbose\n    overflowLimit = 50, // char limit\n    expandable = true,\n    startExpanded = true,\n    startingRowsPerPage = 10,\n    rowsPerPageOptions = false, // disable ability to change rows per page by default\n    enableSelection = false,\n    enableFiltering = false,\n    enableTooltips = true,\n    pagination = 'overflow', // by default, only shows paging options when more total rows than can fit on page 1\n    // className: tableClassName,\n    densePadding = false,\n    padEmptyRows = false, // whitespace added to make the table the same height\n    // even on the last page with only e.g. 1 row\n    rowActionStyle = 'dropdown' // || 'column'\n  } = props;\n  // Cached props to prevent constant rebuilds:\n  const rows = useMemo(() => props.rows, [props.rows?.length]);\n  const dropdown = useCallback((row) => !!props.dropdown && props.dropdown(row), [!!props.dropdown]);\n  const tableSchemaType = useMemo(() => props.tableSchemaType, [props.tableSchemaType?.length]);\n  const [schemas, setSchemas] = useState<{ schema: any; uiSchema: any }>({ schema: null, uiSchema: null });\n  const [schemasLoaded, setSchemasLoaded] = useState(false);\n  const headers = useMemo(() => {\n    let headers2;\n    if (props.headers) headers2 = props.headers;\n    else headers2 = rows.length ? Object.keys(rows[0]) : [];\n    return headers2.map((header: any, i) => {\n      let headerOverrides;\n      let id;\n      if (typeof header === 'string' || typeof header === 'number') {\n        id = header || i;\n        headerOverrides = {\n          id: id\n        };\n      }\n      if (typeof header === 'object') {\n        id = header.id || i;\n        headerOverrides = {\n          // defaults:\n          id: id,\n          align: header.type === 'number' ? 'right' : 'left',\n          padding: 'default',\n          defaultOrder: 'asc',\n          ...header\n        };\n      }\n      if (!headerOverrides) throw new Error('Table header not defined correctly - must be a string, number or object');\n      const headerSchema = schemas?.schema?.properties?.[id];\n      const valueMap = {};\n      schemas?.schema?.properties?.[id]?.anyOf?.forEach((value) => {\n        if (value.enum[0] && value.title) valueMap[value.enum[0]] = value.title;\n      });\n\n      return {\n        title: snakeToPascal(id, true),\n        ...headerSchema,\n        valueMap: {\n          ...valueMap,\n          ...headerOverrides.valueMap\n        },\n        tooltip: headerSchema?.['x-tooltip-text'],\n        ...headerOverrides\n      };\n    });\n  }, [rows, props.headers?.length, schemasLoaded]);\n  const actions =\n    props.actions === false\n      ? {}\n      : {\n          ...props.actions,\n          edit: {\n            // NOTE: this might be a good candidate to be broken out to a parent class\n            // since it breaks generality of this multi-purpose table\n            key: 'edit',\n            enabled: enableSelection,\n            action: async (rows) => {\n              const selectedIds = rows.map((row) => row[keyField]);\n              if (selectedIds.length === 1) {\n                // TODO switch by activity type, I guess...\n                await databaseContext.database.upsert(DocType.APPSTATE, (appStateDoc: any) => {\n                  return { ...appStateDoc, activeActivity: selectedIds[0] };\n                });\n                history.push({ pathname: `/home/activity` });\n              } else {\n                history.push({\n                  pathname: `/home/search/bulkedit`,\n                  search: '?activities=' + selectedIds.join(','),\n                  state: { activityIdsToEdit: selectedIds }\n                });\n              }\n            },\n            label: 'Edit',\n            icon: <Edit />,\n            bulkAction: true,\n            rowAction: true,\n            bulkCondition: (rows) => rows.every((a, _, [b]) => a.subtype === b.subtype),\n            // TODO limit to only some subtypes too\n            // TODO IAPP POIs not editable\n            rowCondition: undefined,\n            displayInvalid: 'error',\n            invalidError: 'All selected rows must be of the same SubType to Bulk Edit',\n            ...props.actions?.edit\n          },\n          delete: {\n            key: 'delete',\n            enabled: enableSelection,\n            action: (rows) => {},\n            label: 'Delete',\n            icon: <Delete />,\n            bulkAction: true,\n            rowAction: true,\n            bulkCondition: undefined, // TODO\n            rowCondition: undefined,\n            displayInvalid: 'disable',\n            ...props.actions?.delete\n          }\n        };\n  const { startingOrderBy = headers.length ? headers[0].id : 'id' } = props; // defaults to the first header\n  const bulkActions: Array<any> = Object.values(actions).filter((action: any) => action.enabled && action.bulkAction);\n  const rowActions: Array<any> = Object.values(actions).filter((action: any) => action.enabled && action.rowAction);\n\n  const [order, setOrder] = useState(startingOrder);\n  const [orderBy, setOrderBy] = useState(startingOrderBy);\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(startingRowsPerPage);\n  const [expandedRows, setExpandedRows] = useState([]);\n  const [selected, setSelected] = useState(props.selected || []);\n\n  const getApiSpec = useCallback(\n    async (tableSchemaInput) => {\n      const apiSpecResponse = await invasivesApi.getCachedApiSpec();\n      const schemaTypeList = typeof tableSchemaInput === 'string' ? [tableSchemaInput] : tableSchemaInput || [];\n\n      await setSchemas({\n        schema: schemaTypeList.reduce(\n          (prevSchema, schemaType) => ({\n            ...prevSchema,\n            properties: {\n              ...prevSchema.properties,\n              ...apiSpecResponse.components.schemas[schemaType].properties\n            }\n          }),\n          {}\n        ),\n        uiSchema: schemaTypeList.reduce(\n          (prevSchema, schemaType) => ({\n            ...prevSchema,\n            ...RootUISchemas[schemaType]\n          }),\n          {}\n        )\n      });\n      setSchemasLoaded(true);\n    },\n    [tableSchemaType]\n  );\n\n  useEffect(() => {\n    getApiSpec(tableSchemaType);\n  }, [tableSchemaType]);\n\n  useEffect(() => {\n    setSelected(props.selected || []);\n  }, [JSON.stringify(props.selected)]);\n\n  useEffect(() => {\n    if (props.setSelected) props.setSelected(selected);\n  }, [JSON.stringify(selected)]);\n\n  const selectedRows = useMemo(\n    () =>\n      selected\n        .map((id) => {\n          const matches = rows.find((row) => row[keyField] === id);\n          return matches ? matches : undefined;\n        })\n        .filter((row) => row),\n    [JSON.stringify(selected), rows]\n  );\n\n  // sort and limit the rows:\n  const orderHeader = useMemo(() => headers.find((col) => col.id === orderBy), [headers, orderBy]);\n  const pageRows = useMemo(() => {\n    // Note: this is O(nlog(n)) so important that we cache this with useMemo\n    return stableSort(rows, orderHeader, order === 'asc').slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);\n  }, [rows, orderHeader, order, page, rowsPerPage]);\n  // determine if any rows on the current page have a dropdown:\n  // render all dropdowns\n  const renderedDropdowns = useMemo(() => pageRows.map((row) => (dropdown ? dropdown(row) : undefined)), [\n    pageRows,\n    dropdown\n  ]);\n  // search for any potential overflows (fields too long).\n  // This returns a list of booleans whether each row overflows\n  const verboseOverflows = useMemo(\n    () => pageRows.map((row) => headers.filter(({ id }) => String(row[id]).length > overflowLimit).length > 0),\n    [pageRows, headers, overflowLimit]\n  );\n  const pageHasDropdown = useMemo(\n    () =>\n      (!!dropdown && renderedDropdowns.filter((rendered) => rendered).length > 0) ||\n      (overflowDropdown && verboseOverflows.filter((hasOverflow) => hasOverflow).length > 0) ||\n      (rowActions?.length > 0 && rowActionStyle === 'dropdown'),\n    [dropdown, renderedDropdowns, overflowDropdown, verboseOverflows, rowActions?.length, rowActionStyle]\n  );\n  const showPagination = pagination === 'overflow' ? rows.length > rowsPerPage : !!pagination;\n\n  const handleRequestSort = useCallback(\n    (event, property) => {\n      const isAsc = orderBy === property && order === 'asc';\n      setOrder(isAsc ? 'desc' : 'asc');\n      setOrderBy(property);\n      setPage(0);\n    },\n    [orderBy, order]\n  );\n\n  const handleSelectAllClick = useCallback(\n    (event) => {\n      if (event.target.checked) {\n        const newSelecteds = rows.map((row) => row[keyField]);\n        setSelected(newSelecteds);\n        return;\n      }\n      setSelected([]);\n    },\n    [rows]\n  );\n\n  const selectRow = useCallback((prevSelected, key) => {\n    const selectedIndex = prevSelected.indexOf(key);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(prevSelected, key);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(prevSelected.slice(1));\n    } else if (selectedIndex === prevSelected.length - 1) {\n      newSelected = newSelected.concat(prevSelected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(prevSelected.slice(0, selectedIndex), prevSelected.slice(selectedIndex + 1));\n    }\n    setSelected(newSelected);\n  }, []);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n  const toggleExpandedRow = useCallback(\n    (key) => {\n      let newExpandedRows;\n      if (expandedRows.indexOf(key) !== -1) {\n        newExpandedRows = expandedRows.filter((rowKey) => rowKey !== key);\n      } else {\n        if (dropdownLimit) {\n          // only supports dropdown limit of 0-1 here\n          newExpandedRows = [key];\n        } else newExpandedRows = [...expandedRows, key];\n      }\n      setExpandedRows(newExpandedRows);\n      if (onToggleExpandRow)\n        onToggleExpandRow(\n          rows.find((row) => row[keyField] === key),\n          newExpandedRows,\n          selectedRows\n        );\n    },\n    [expandedRows?.length, JSON.stringify(expandedRows), dropdownLimit, selectedRows, rows]\n  );\n\n  const CachedTableHead = useMemo(\n    () => (\n      <RecordTableHead\n        classes={classes}\n        numSelected={selected.length}\n        order={order}\n        orderBy={orderBy}\n        onSelectAllClick={handleSelectAllClick}\n        onRequestSort={handleRequestSort}\n        rowCount={rows.length}\n        headers={headers}\n        enableSelection={enableSelection}\n        enableTooltips={enableTooltips}\n        pageHasDropdown={pageHasDropdown}\n      />\n    ),\n    [\n      selected?.length,\n      order,\n      orderBy,\n      handleSelectAllClick,\n      handleRequestSort,\n      rows.length,\n      headers,\n      enableSelection,\n      enableTooltips,\n      pageHasDropdown\n    ]\n  );\n\n  const loading = !schemasLoaded && tableSchemaType?.length > 0;\n\n  return useMemo(\n    () => (\n      <div className={classes.component}>\n        <Accordion defaultExpanded={startExpanded || !rows.length}>\n          {(enableSelection || enableFiltering || tableName.length > 0) && (\n            <RecordTableToolbar\n              selectedRows={enableSelection ? selectedRows : []}\n              tableName={tableName}\n              enableFiltering={enableFiltering}\n              actions={bulkActions}\n              databaseContext={databaseContext}\n            />\n          )}\n          <AccordionDetails className={classes.paper}>\n            {loading && <div className={classes.emptyTable}>Loading</div>}\n            {!loading && !rows.length && <div className={classes.emptyTable}>No data to display</div>}\n            {!loading && !!rows.length && (\n              <TableContainer>\n                <Table\n                  className={classes.table}\n                  aria-labelledby=\"tableTitle\"\n                  size={densePadding ? 'small' : 'medium'}\n                  aria-label=\"enhanced table\">\n                  {CachedTableHead}\n                  <TableBody>\n                    {pageRows.map((row, index) => (\n                      <RecordTableRow\n                        key={row[keyField]}\n                        keyField={keyField}\n                        headers={headers}\n                        row={row}\n                        dropdown={dropdown}\n                        pageHasDropdown={pageHasDropdown}\n                        hasOverflow={verboseOverflows[index]}\n                        isExpanded={expandedRows.indexOf(row[keyField]) !== -1}\n                        isSelected={selected.indexOf(row[keyField]) !== -1}\n                        enableSelection={enableSelection}\n                        toggleExpanded={(event) => {\n                          event.stopPropagation();\n                          toggleExpandedRow(row[keyField]);\n                        }}\n                        toggleSelected={(event) => {\n                          event.stopPropagation();\n                          selectRow(selected, row[keyField]);\n                        }}\n                        actions={rowActions}\n                        actionStyle={rowActionStyle}\n                        databaseContext={databaseContext}\n                      />\n                    ))}\n                    {padEmptyRows && emptyRows > 0 && (\n                      <TableRow style={{ height: (densePadding ? 33 : 53) * emptyRows }}>\n                        <TableCell colSpan={headers.length} />\n                      </TableRow>\n                    )}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            )}\n            {!loading && !!rows.length && showPagination && (\n              <TablePagination\n                rowsPerPageOptions={rowsPerPageOptions === false ? undefined : rowsPerPageOptions}\n                component=\"div\"\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n              />\n            )}\n          </AccordionDetails>\n        </Accordion>\n      </div>\n    ),\n    [rows, schemasLoaded, page, rowsPerPage, JSON.stringify(selected), JSON.stringify(expandedRows), order, orderBy]\n  );\n};\n\nfunction RecordTableHead(props) {\n  const {\n    classes,\n    onSelectAllClick,\n    order,\n    orderBy,\n    numSelected,\n    rowCount,\n    onRequestSort,\n    headers,\n    pageHasDropdown,\n    enableSelection,\n    enableTooltips\n  } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead className={classes.header}>\n      <TableRow>\n        {(enableSelection || pageHasDropdown) && (\n          <TableCell padding=\"checkbox\" className={classes.cell}>\n            {enableSelection && (\n              <Checkbox\n                indeterminate={numSelected > 0 && numSelected < rowCount}\n                checked={rowCount > 0 && numSelected === rowCount}\n                onChange={onSelectAllClick}\n                inputProps={{ 'aria-label': 'select all desserts' }}\n              />\n            )}\n            {pageHasDropdown && <IconButton aria-label=\"expand row\" size=\"small\" />}\n          </TableCell>\n        )}\n        {headers.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            padding={headCell.padding}\n            sortDirection={orderBy === headCell.id ? order : false}\n            className={`${classes.cell} ${headCell.className}`}>\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : headCell.defaultOrder}\n              onClick={createSortHandler(headCell.id)}>\n              {enableTooltips && !!headCell.tooltip && (\n                <Tooltip title={headCell.tooltip} arrow>\n                  <div>{headCell.title}</div>\n                </Tooltip>\n              )}\n              {!headCell.tooltip && headCell.title}\n              {orderBy === headCell.id && (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n              )}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nconst RecordTableToolbar = (props) => {\n  const classes = useToolbarStyles();\n  const { selectedRows, tableName, enableFiltering, actions, databaseContext } = props;\n  const numSelected = selectedRows?.length || 0;\n\n  const bulkActions: Array<any> = actions\n    .map((action: any) => {\n      const isValid = action.bulkCondition ? action.bulkCondition(selectedRows) : true;\n      if ((!action.displayInvalid || action.displayInvalid === 'hidden') && !isValid) return;\n      return (\n        <Button\n          key={action.key}\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"small\"\n          disabled={action.displayInvalid === 'disable' && !isValid}\n          className={classes.button}\n          startIcon={action.icon}\n          onClick={async (e) => {\n            e.stopPropagation();\n            if (\n              action.displayInvalid === 'error' &&\n              action.bulkCondition &&\n              !action.bulkCondition(selectedRows) &&\n              action.invalidError\n            )\n              notifyError(databaseContext, action.invalidError);\n            else action.action(selectedRows);\n          }}>\n          {action.label}\n        </Button>\n      );\n    })\n    .filter((button) => button); // remove hidden actions\n\n  return (\n    <AccordionSummary\n      className={classes.toolbar}\n      expandIcon={<ExpandMore />}\n      aria-controls=\"panel-map-content\"\n      id=\"panel-map-header\">\n      <Toolbar\n        className={clsx(classes.root, {\n          [classes.highlight]: numSelected > 0\n        })}>\n        {numSelected > 0 ? (\n          <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n            {numSelected} selected\n          </Typography>\n        ) : (\n          <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n            {tableName}\n          </Typography>\n        )}\n\n        {numSelected > 0 && bulkActions}\n        {enableFiltering && !numSelected && (\n          <Tooltip title=\"Filter list\">\n            <IconButton aria-label=\"filter list\">\n              <FilterList />\n            </IconButton>\n          </Tooltip>\n        )}\n      </Toolbar>\n    </AccordionSummary>\n  );\n};\n\nconst RecordTableCell = ({ row, header, className, valueMap }) => {\n  const ifApplicable = (val) => (val && String(val).trim().length ? val : ' N/A');\n  const id = header.id;\n\n  let overrideProps;\n  if (typeof row[id] === 'object' && !Array.isArray(row[id])) overrideProps = row[id];\n  const value = getValue(row, header);\n\n  return (\n    <TableCell\n      component=\"th\"\n      scope=\"row\"\n      align={header.align}\n      padding={header.padding}\n      className={className}\n      {...overrideProps}>\n      {ifApplicable(value)}\n    </TableCell>\n  );\n};\n\nconst RecordTableRow = (props) => {\n  const {\n    keyField,\n    headers,\n    row,\n    isExpanded,\n    toggleExpanded,\n    enableSelection,\n    isSelected,\n    toggleSelected,\n    pageHasDropdown,\n    dropdown,\n    hasOverflow,\n    actions,\n    actionStyle,\n    databaseContext\n  } = props;\n  const classes = useStyles();\n\n  const key = row[keyField];\n  if (key === undefined) throw new Error('Error: table row has no matching key defined');\n\n  const renderedDropdown = !!dropdown && dropdown(row);\n  const labelId = `record-table-checkbox-${key}`;\n  const rowActions = actions\n    .map((action: any) => {\n      const isValid = action.rowCondition ? action.rowCondition(row) : true;\n      if ((!action.displayInvalid || action.displayInvalid === 'hidden') && !isValid) return;\n      return (\n        <Button\n          key={action.key}\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"small\"\n          disabled={action.displayInvalid === 'disable' && !isValid}\n          className={classes.button}\n          startIcon={action.icon}\n          onClick={async (e) => {\n            e.stopPropagation();\n            if (\n              action.displayInvalid === 'error' &&\n              action.rowCondition &&\n              !action.rowCondition(row) &&\n              action.invalidError\n            )\n              notifyError(databaseContext, action.invalidError);\n            else action.action([row]);\n          }}>\n          {action.label}\n        </Button>\n      );\n    })\n    .filter((button) => button); // remove hidden actions\n  const rowHasDropdown = !!renderedDropdown || (actionStyle === 'dropdown' && rowActions?.length > 0);\n\n  return (\n    <React.Fragment key={key}>\n      <TableRow\n        hover\n        role=\"checkbox\"\n        aria-checked={isSelected}\n        tabIndex={-1}\n        selected={isSelected}\n        onClick={toggleExpanded}>\n        {(enableSelection || pageHasDropdown) && (\n          <TableCell padding=\"checkbox\" className={classes.cell}>\n            {enableSelection && (\n              <Checkbox checked={isSelected} onClick={toggleSelected} inputProps={{ 'aria-labelledby': labelId }} />\n            )}\n            {pageHasDropdown && (\n              <IconButton aria-label=\"expand row\" size=\"small\">\n                {(rowHasDropdown || hasOverflow) && (isExpanded ? <KeyboardArrowUp /> : <KeyboardArrowDown />)}\n              </IconButton>\n            )}\n          </TableCell>\n        )}\n        {headers.map((header) => (\n          <RecordTableCell\n            header={header}\n            key={header.id}\n            row={row}\n            className={`\n            ${classes.cell}\n            ${header.className}\n            ${header.type === 'number' && classes.numberCell}\n            ${hasOverflow && (isExpanded ? classes.openRow : classes.closedRow)}\n          `}\n            valueMap={header.valueMap}\n          />\n        ))}\n      </TableRow>\n      {rowHasDropdown && (\n        <TableRow className={classes.tableRow}>\n          <TableCell className={classes.dropdown} colSpan={100}>\n            <Collapse in={isExpanded} timeout=\"auto\">\n              {actionStyle === 'dropdown' && rowActions?.length > 0 && rowActions}\n              <Box margin={2}>{renderedDropdown}</Box>\n            </Collapse>\n          </TableCell>\n        </TableRow>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default RecordTable;\n","//import classes from '*.module.css';\nimport {\n  Dialog,\n  AppBar,\n  Toolbar,\n  IconButton,\n  Typography,\n  Button,\n  ListItemText,\n  Divider,\n  Slide,\n  SlideProps,\n  makeStyles,\n  ListItemIcon\n} from '@material-ui/core';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport SearchIcon from '@material-ui/icons/Search';\nimport DirectionsWalkIcon from '@material-ui/icons/DirectionsWalk';\nimport CloseIcon from '@material-ui/icons/Close';\nimport React, { useContext } from 'react';\nimport { DocType } from 'constants/database';\nimport { Feature } from 'geojson';\nimport { DatabaseContext } from 'contexts/DatabaseContext';\nimport { notifySuccess } from 'utils/NotificationUtils';\n\nconst Transition = React.forwardRef<React.FC, SlideProps>((TransitionProps, ref) => {\n  return <Slide direction=\"up\" ref={ref} {...TransitionProps} />;\n});\n\nexport enum contextMenuType {\n  default = 'default',\n  passThrough = 'passThrough'\n}\n\ninterface MapContextMenuProps {\n  contextMenuState: {\n    state: MapContextMenuData;\n    setContextMenuState: (contextMenuState: MapContextMenuData) => void;\n  };\n  handleClose: Function;\n}\n\nexport interface MapContextMenuData {\n  isOpen: boolean;\n  lat?: number;\n  lng?: number;\n}\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    position: 'relative'\n  },\n  title: {\n    marginLeft: theme.spacing(2),\n    flex: 1\n  },\n  contextMenuItem: {\n    textAlign: 'center',\n    height: 300\n  },\n  contextMenuIcon: {\n    fontSize: 'large',\n    height: 100\n  }\n}));\n\ninterface MenuItemProps {\n  heading: string;\n  description: string;\n  //icon: any;\n  onSelectFunction?: Function;\n}\n\n/*\n{\n  \"type\": \"Feature\",\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [125.6, 10.1]\n  },\n  \"properties\": {\n    \"name\": \"Dinagat Islands\"\n  }\n}\n*/\n\n//todo: pass icon\n//todo: make list a grid\nconst MenuItem: React.FC<MenuItemProps> = (props) => {\n  const classes = useStyles();\n  return (\n    <ListItem\n      className={classes.contextMenuItem}\n      onClick={(e) => {\n        props.onSelectFunction();\n      }}\n      button>\n      <ListItemText primary={props.heading} secondary={props.description} />\n    </ListItem>\n  );\n};\n\nexport const MapContextMenu: React.FC<MapContextMenuProps> = (props) => {\n  const classes = useStyles();\n  const databaseContext = useContext(DatabaseContext);\n\n  const coordinatesToGeo: any = (lat: number, lng: number) => {\n    return [\n      {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [parseFloat(lat.toFixed(6)), parseFloat(lng.toFixed(6))] //@popkinj is this ok?\n        },\n        properties: {\n          name: 'Sasquatch Siting'\n        }\n      }\n    ] as Feature[];\n  };\n\n  /**\n   * Save the point of interest added by the user\n   *\n   * @param {Feature} geoJSON The geometry in GeoJSON format\n   */\n  const savePoint = async (geometry: Feature[]) => {\n    await databaseContext.database.upsert('sasquatch', () => {\n      return { docType: DocType.POINT_OF_INTEREST, geometry: geometry, dateUpdated: new Date() };\n    });\n    notifySuccess(databaseContext, 'Saved New Point of Interest');\n  };\n\n  return (\n    <>\n      <Dialog\n        fullScreen\n        open={props.contextMenuState.state.isOpen}\n        onClose={(e) => {\n          props.handleClose();\n        }}\n        TransitionComponent={Transition}>\n        <AppBar className={classes.appBar}>\n          <Toolbar>\n            <IconButton\n              edge=\"start\"\n              color=\"inherit\"\n              onClick={(e) => {\n                props.handleClose();\n              }}\n              aria-label=\"close\">\n              <CloseIcon />\n            </IconButton>\n            <Typography variant=\"h5\" className={classes.title}>\n              Choose something to do here: ({props.contextMenuState.state.lat}, {props.contextMenuState.state.lng})\n            </Typography>\n            <Button\n              autoFocus\n              color=\"inherit\"\n              onClick={(e) => {\n                props.handleClose();\n              }}>\n              select\n            </Button>\n          </Toolbar>\n        </AppBar>\n        <List>\n          <MenuItem\n            heading=\"Mark a new point of interest here\"\n            description=\"Points of interest can be used to capture something that isn't already in a layer\n            and isn't representative of a field activity\"\n            onSelectFunction={() => {\n              props.contextMenuState.setContextMenuState({ ...props.contextMenuState.state, isOpen: false });\n              const newPointAsGeo = coordinatesToGeo(\n                props.contextMenuState.state.lng,\n                props.contextMenuState.state.lat\n              );\n              savePoint(newPointAsGeo);\n            }}\n          />\n          <Divider />\n          <ListItem className={classes.contextMenuItem} button>\n            <ListItemIcon className={classes.contextMenuIcon}>\n              <SearchIcon />\n            </ListItemIcon>\n            <ListItemText\n              primary=\"Find things near here.\"\n              secondary=\"Use this location as a starting point for a search.  You can look for planned or past\n            activities, or points of interest.\"\n            />\n          </ListItem>\n          <Divider />\n          <ListItem className={classes.contextMenuItem} button>\n            <ListItemIcon className={classes.contextMenuIcon}>\n              <DirectionsWalkIcon />\n            </ListItemIcon>\n            <ListItemText\n              primary=\"Start doing something here.\"\n              secondary=\"Use this location as a starting point for an activity.  It can be a planned activity,\n            a plan for multiple activities, or it can just be one field activity.\"\n            />\n          </ListItem>\n        </List>\n      </Dialog>\n    </>\n  );\n};\n","import {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Box,\n  Collapse,\n  Container,\n  Grid,\n  IconButton,\n  makeStyles,\n  Paper,\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TablePagination,\n  TableRow\n} from '@material-ui/core';\nimport { KeyboardArrowUp, KeyboardArrowDown, ExpandMore, DeleteForever } from '@material-ui/icons';\nimport React from 'react';\nimport RecordTable from '../../common/RecordTable';\n\nconst useStyles = makeStyles((theme) => ({\n  heading: {\n    fontSize: theme.typography.pxToRem(18),\n    fontWeight: theme.typography.fontWeightRegular,\n    align: 'center'\n  },\n  wideCell: {\n    minWidth: 500,\n    maxWidth: 500\n  },\n  missingValue: {\n    fontStyle: 'italic',\n    color: '#777'\n  }\n}));\n\nexport interface IAPPSitePropType {\n  record: any;\n}\n\nexport const IAPPSite: React.FC<IAPPSitePropType> = (props) => {\n  const classes = useStyles();\n  const form_data = props?.record?.point_of_interest_payload?.form_data;\n  const site = {\n    ...form_data?.point_of_interest_data,\n    ...form_data?.point_of_interest_type_data\n  };\n  const {\n    surveys,\n    mechanical_treatments,\n    chemical_treatments,\n    biological_treatments,\n    biological_dispersals\n  } = form_data;\n  const coordinates = props?.record?.point_of_interest_payload?.geometry[0]?.geometry?.coordinates;\n  const longitude = parseFloat(coordinates[0]).toFixed(6);\n  const latitude = parseFloat(coordinates[1]).toFixed(6);\n\n  const ifApplicable = (value) =>\n    value && String(value).trim() ? value : <div className={classes.missingValue}>N/A</div>;\n\n  return (\n    <Container>\n      <Accordion defaultExpanded={true}>\n        <AccordionSummary expandIcon={<ExpandMore />} aria-controls=\"panel-map-content\" id=\"panel-map-header\">\n          <Typography className={classes.heading}>Legacy IAPP Site: {site.site_id}</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Grid container spacing={1}>\n            <Grid item xs={3} sm={2}>\n              Created\n            </Grid>\n            <Grid item xs={9} sm={4}>\n              {ifApplicable(site.created_date_on_device)}\n            </Grid>\n            <Grid item xs={3} sm={2}>\n              Slope\n            </Grid>\n            <Grid item xs={9} sm={4}>\n              {ifApplicable(site.slope_code)}\n            </Grid>\n\n            <Grid item xs={3} sm={2}>\n              PaperFile\n            </Grid>\n            <Grid item xs={9} sm={4}>\n              {ifApplicable(site.project_code[0].description)}\n            </Grid>\n            <Grid item xs={3} sm={2}>\n              Aspect\n            </Grid>\n            <Grid item xs={9} sm={4}>\n              {ifApplicable(site.aspect_code)}\n            </Grid>\n\n            <Grid item xs={3} sm={2}>\n              Longitude\n            </Grid>\n            <Grid item xs={9} sm={4}>\n              {ifApplicable(longitude)}\n            </Grid>\n            <Grid item xs={3} sm={2}>\n              Latitude\n            </Grid>\n            <Grid item xs={9} sm={4}>\n              {ifApplicable(latitude)}\n            </Grid>\n\n            <Grid item xs={3} sm={2}>\n              Elevation\n            </Grid>\n            <Grid item xs={9} sm={4}>\n              {ifApplicable(site.elevation)}\n            </Grid>\n            <Grid item xs={3} sm={2}>\n              Specific Use\n            </Grid>\n            <Grid item xs={9} sm={4}>\n              {ifApplicable(site.specific_use_code)}\n            </Grid>\n\n            <Grid item xs={3} sm={2}>\n              Mapsheet\n            </Grid>\n            <Grid item xs={9} sm={4}>\n              {ifApplicable(site.map_sheet)}\n            </Grid>\n            <Grid item xs={3} sm={2}>\n              Soil Texture\n            </Grid>\n            <Grid item xs={9} sm={4}>\n              {ifApplicable(site.soil_texture_code)}\n            </Grid>\n\n            <Grid item xs={3} sm={2}>\n              Jurisdiction\n            </Grid>\n            <Grid item xs={3}>\n              {(surveys?.[0]?.jurisdictions?.length > 0 &&\n                ifApplicable(surveys[0].jurisdictions[0].jurisdiction_code) +\n                  ' (' +\n                  surveys[0].jurisdictions[0].percent_covered +\n                  '%)') ||\n                'Not Provided'}\n            </Grid>\n            <Grid item xs={3}>\n              {surveys?.[0]?.jurisdictions?.length > 1 &&\n                ifApplicable(surveys[0].jurisdictions[1].jurisdiction_code) +\n                  ' (' +\n                  surveys[0].jurisdictions[1].percent_covered +\n                  '%)'}\n            </Grid>\n            <Grid item xs={3}>\n              {surveys?.[0]?.jurisdictions?.length > 2 &&\n                ifApplicable(surveys[0].jurisdictions[2].jurisdiction_code) +\n                  ' (' +\n                  surveys[0].jurisdictions[2].percent_covered +\n                  '%)'}\n            </Grid>\n\n            <Grid item xs={3} sm={2}>\n              Access Description\n            </Grid>\n            <Grid item xs={9} sm={10}>\n              {ifApplicable(site.access_description)}\n            </Grid>\n\n            <Grid item xs={3} sm={2}>\n              Comments\n            </Grid>\n            <Grid item xs={9} sm={10}>\n              {ifApplicable(site.general_comment)}\n            </Grid>\n          </Grid>\n        </AccordionDetails>\n      </Accordion>\n\n      <RecordTable\n        tableName={'Survey Details on Site ' + site.site_id}\n        keyField=\"survey_id\"\n        startingOrderBy=\"survey_id\"\n        startingOrder=\"desc\"\n        actions={false}\n        headers={[\n          {\n            id: 'survey_id',\n            title: 'Survey ID',\n            type: 'number'\n          },\n          {\n            id: 'common_name',\n            title: 'Common Name'\n          },\n          {\n            id: 'species',\n            title: 'Species'\n          },\n          {\n            id: 'genus',\n            title: 'Genus'\n          },\n          {\n            id: 'survey_date',\n            title: 'Survey Date'\n          },\n          {\n            id: 'invasive_species_agency_code',\n            title: 'Agency'\n          },\n          {\n            id: 'reported_area',\n            title: 'Area (m\\u00B2)',\n            type: 'number'\n          },\n          {\n            id: 'density',\n            align: 'center',\n            title: 'Density'\n          },\n          {\n            id: 'distribution',\n            align: 'center',\n            title: 'Distribution'\n          },\n          {\n            id: 'general_comment',\n            title: 'Comments'\n          }\n        ]}\n        rows={\n          !surveys?.length\n            ? []\n            : surveys.map((row) => ({\n                ...row,\n                density: row.density + (row.density ? ' (' + row.invasive_plant_density_code + ')' : ''),\n                distribution:\n                  row.distribution + (row.distribution ? ' (' + row.invasive_plant_distribution_code + ')' : '')\n              }))\n        }\n      />\n\n      <RecordTable\n        tableName=\"Mechanical Treatments and Efficacy Monitoring\"\n        startExpanded={false}\n        keyField=\"treatment_id\"\n        startingOrderBy=\"treatment_id\"\n        startingOrder=\"desc\"\n        actions={false}\n        headers={[\n          {\n            id: 'treatment_id',\n            title: 'Treatment ID',\n            type: 'number'\n          },\n          {\n            id: 'common_name',\n            title: 'Species (Common)'\n          },\n          {\n            id: 'treatment_date',\n            title: 'Treatment Date'\n          },\n          {\n            id: 'invasive_species_agency_code',\n            title: 'Agency'\n          },\n          {\n            id: 'reported_area',\n            title: 'Reported Area (m\\u00B2)',\n            type: 'number'\n          },\n          {\n            id: 'mechanical_method_code_label', // custom\n            title: 'Mech Method'\n          },\n          {\n            id: 'project_code_label',\n            title: 'Project Code'\n          },\n          {\n            id: 'general_comment',\n            title: 'Comments'\n          }\n        ]}\n        rows={\n          !mechanical_treatments.length\n            ? []\n            : mechanical_treatments.map((row) => ({\n                ...row,\n                mechanical_method_code_title: '(' + row.mechanical_method_code + ') ' + row.mechanical_method,\n                project_code_title: row.project_code[0].description\n              }))\n        }\n        dropdown={(row) =>\n          !row.monitoring?.length ? undefined : (\n            <RecordTable\n              tableName=\"Monitoring\"\n              startExpanded={true}\n              startingOrderBy=\"monitoring_id\"\n              startingOrder=\"desc\"\n              keyField=\"monitoring_id\"\n              actions={false}\n              headers={[\n                {\n                  id: 'monitoring_id',\n                  title: 'Monitoring ID',\n                  type: 'number'\n                },\n                {\n                  id: 'monitoring_date',\n                  title: 'Monitoring Date'\n                },\n                {\n                  id: 'invasive_species_agency_code',\n                  title: 'Agency'\n                },\n                {\n                  id: 'efficacy_percent',\n                  title: 'Efficacy',\n                  type: 'number'\n                },\n                {\n                  id: 'project_code_label',\n                  title: 'Project Code'\n                },\n                {\n                  id: 'general_comment',\n                  title: 'Comments'\n                }\n              ]}\n              rows={\n                !row.monitoring.length\n                  ? []\n                  : row.monitoring.map((monitor, j) => ({\n                      ...monitor,\n                      project_code_title: monitor.project_code[0].description\n                    }))\n              }\n            />\n          )\n        }\n      />\n\n      <RecordTable\n        tableName=\"Chemical Treatments and Efficacy Monitoring\"\n        startExpanded={false}\n        keyField=\"treatment_id\"\n        startingOrderBy=\"treatment_id\"\n        startingOrder=\"desc\"\n        actions={false}\n        headers={[\n          {\n            id: 'treatment_id',\n            title: 'Treatment ID',\n            type: 'number'\n          },\n          {\n            id: 'common_name',\n            title: 'Species (Common)'\n          },\n          {\n            id: 'treatment_date',\n            title: 'Treatment Date'\n          },\n          {\n            id: 'invasive_species_agency_code',\n            title: 'Agency'\n          },\n          {\n            id: 'reported_area',\n            title: 'Reported Area (m\\u00B2)',\n            type: 'number'\n          },\n          {\n            id: 'chemical_method', // custom\n            title: 'Method'\n          },\n          {\n            id: 'project_code_label',\n            title: 'Project Code'\n          },\n          {\n            id: 'general_comment',\n            title: 'Comments'\n          }\n        ]}\n        rows={\n          !chemical_treatments.length\n            ? []\n            : chemical_treatments.map((row) => ({\n                ...row,\n                project_code_title: row.project_code[0].description\n              }))\n        }\n        dropdown={(row) => (\n          <React.Fragment key={row.treatment_id + '_expanded'}>\n            <RecordTable\n              startExpanded={true}\n              keyField=\"treatment_id\"\n              actions={false}\n              headers={[\n                {\n                  id: 'pmp_confirmation_number',\n                  title: 'PMP Confirmation #'\n                },\n                {\n                  id: 'herbicide_description',\n                  title: 'Herbicide'\n                },\n                {\n                  id: 'pmra_reg_number',\n                  title: 'PMRA Reg #'\n                },\n                {\n                  id: 'temperature',\n                  title: 'Temperature',\n                  type: 'number'\n                },\n                {\n                  id: 'humidity',\n                  title: 'Humidity'\n                },\n                {\n                  id: 'wind_speed',\n                  title: 'Wind Velocity',\n                  type: 'number'\n                },\n                {\n                  id: 'wind_direction',\n                  title: 'Wind Direction'\n                },\n                {\n                  id: 'application_rate',\n                  title: 'Application Rate'\n                },\n                {\n                  id: 'herbicide_amount',\n                  title: 'Amount Used',\n                  type: 'number'\n                },\n                {\n                  id: 'dilution',\n                  title: 'Dilution Rate'\n                },\n                {\n                  id: 'mix_delivery_rate',\n                  title: 'Mix Delivery Rate'\n                }\n              ]}\n              rows={[row]} // singleton expanded table\n              enableFiltering={false}\n            />\n            <RecordTable\n              tableName=\"Monitoring\"\n              startExpanded={true}\n              startingOrderBy=\"monitoring_date\"\n              keyField=\"monitoring_id\"\n              actions={false}\n              headers={[\n                {\n                  id: 'monitoring_id',\n                  title: 'Monitoring ID',\n                  type: 'number'\n                },\n                {\n                  id: 'monitoring_date',\n                  title: 'Monitoring Date'\n                },\n                {\n                  id: 'invasive_species_agency_code',\n                  title: 'Agency'\n                },\n                {\n                  id: 'efficacy_percent',\n                  title: 'Efficacy',\n                  type: 'number'\n                },\n                {\n                  id: 'project_code_label',\n                  title: 'Project Code'\n                },\n                {\n                  id: 'general_comment',\n                  title: 'Comments'\n                }\n              ]}\n              rows={\n                !row.monitoring.length\n                  ? []\n                  : row.monitoring.map((monitor, j) => ({\n                      ...monitor,\n                      project_code_title: monitor.project_code[0].description\n                    }))\n              }\n            />\n          </React.Fragment>\n        )}\n      />\n\n      <RecordTable\n        tableName=\"Biological Treatments and Efficacy Monitoring\"\n        startExpanded={false}\n        keyField=\"treatment_id\"\n        startingOrderBy=\"treatment_id\"\n        startingOrder=\"desc\"\n        actions={false}\n        headers={[\n          {\n            id: 'treatment_id',\n            title: 'Treatment ID',\n            type: 'number'\n          },\n          {\n            id: 'common_name',\n            title: 'Species (Common)'\n          },\n          {\n            id: 'treatment_date',\n            title: 'Treatment Date'\n          },\n          {\n            id: 'collection_date',\n            title: 'Collection Date'\n          },\n          {\n            id: 'bioagent_source',\n            title: 'Bioagent Source'\n          },\n          {\n            id: 'invasive_species_agency_code',\n            title: 'Agency'\n          },\n          {\n            id: 'stage_larva_ind',\n            title: 'Larvae?'\n          },\n          {\n            id: 'stage_egg_ind',\n            title: 'Eggs?'\n          },\n          {\n            id: 'stage_pupa_ind',\n            title: 'Pupae?'\n          },\n          {\n            id: 'stage_other_ind',\n            title: 'Other?'\n          },\n          {\n            id: 'release_quantity',\n            title: 'Release Quantity'\n          },\n          {\n            id: 'area_classification_code',\n            title: 'Area Classification Code'\n          },\n          {\n            id: 'biological_agent_code',\n            title: 'Biological Agent Code'\n          },\n          {\n            id: 'project_code_label',\n            title: 'Project Code'\n          },\n          {\n            id: 'general_comment',\n            title: 'Comments'\n          }\n        ]}\n        rows={\n          !biological_treatments.length\n            ? []\n            : biological_treatments.map((row) => ({\n                ...row,\n                project_code_title: row.project_code[0].description\n              }))\n        }\n        dropdown={(row) =>\n          !row.monitoring?.length ? undefined : (\n            <RecordTable\n              tableName=\"Monitoring\"\n              startExpanded={true}\n              startingOrderBy=\"monitoring_id\"\n              startingOrder=\"desc\"\n              keyField=\"monitoring_id\"\n              actions={false}\n              headers={[\n                {\n                  id: 'monitoring_id',\n                  title: 'Monitoring ID',\n                  type: 'number'\n                },\n                {\n                  id: 'monitoring_date',\n                  title: 'Monitoring Date'\n                },\n                {\n                  id: 'plant_count',\n                  title: 'Plant Count',\n                  type: 'number'\n                },\n                {\n                  id: 'agent_count',\n                  title: 'Agent Count',\n                  type: 'number'\n                },\n                {\n                  id: 'count_duration',\n                  title: 'Count Duration'\n                },\n                {\n                  id: 'agent_destroyed_ind',\n                  title: 'Agent Destroyed?'\n                },\n                {\n                  id: 'legacy_presence_ind',\n                  title: 'Legacy Presence?'\n                },\n                {\n                  id: 'foliar_feeding_damage_ind',\n                  title: 'Foliar Feeding Damage?'\n                },\n                {\n                  id: 'root_feeding_damage_ind',\n                  title: 'Root Feeding Damage?'\n                },\n                {\n                  id: 'seed_feeding_damage_ind',\n                  title: 'Seed Feeding Damage?'\n                },\n                {\n                  id: 'oviposition_marks_ind',\n                  title: 'Oviposition Marks?'\n                },\n                {\n                  id: 'eggs_present_ind',\n                  title: 'Eggs Present?'\n                },\n                {\n                  id: 'larvae_present_ind',\n                  title: 'Larvae Present?'\n                },\n                {\n                  id: 'pupae_present_ind',\n                  title: 'Pupae Present?'\n                },\n                {\n                  id: 'adults_present_ind',\n                  title: 'Adults Present?'\n                },\n                {\n                  id: 'tunnels_present_ind',\n                  title: 'Tunnels Present?'\n                },\n                {\n                  id: 'project_code_label',\n                  title: 'Project Code'\n                },\n                {\n                  id: 'general_comment',\n                  title: 'Comments'\n                }\n              ]}\n              rows={\n                !row.monitoring.length\n                  ? []\n                  : row.monitoring.map((monitor, j) => ({\n                      ...monitor,\n                      project_code_title: monitor.project_code[0].description\n                    }))\n              }\n            />\n          )\n        }\n      />\n\n      <RecordTable\n        tableName=\"Biological Dispersals\"\n        startExpanded={false}\n        keyField=\"biological_id\"\n        startingOrderBy=\"biological_id\"\n        startingOrder=\"desc\"\n        actions={false}\n        headers={[\n          {\n            id: 'treatment_id',\n            title: 'Treatment ID',\n            type: 'number'\n          },\n          {\n            id: 'common_name',\n            title: 'Species (Common)'\n          },\n          {\n            id: 'monitoring_date',\n            title: 'Inspection Date'\n          },\n          {\n            id: 'project_code_label',\n            title: 'Project Code'\n          },\n          {\n            id: 'plant_count',\n            title: 'Plant Count',\n            type: 'number'\n          },\n          {\n            id: 'agent_count',\n            title: 'Agent Count',\n            type: 'number'\n          },\n          {\n            id: 'count_duration',\n            title: 'Count Duration'\n          },\n          {\n            id: 'biological_agent_code',\n            title: 'Agent Code'\n          },\n          {\n            id: 'foliar_feeding_damage_ind',\n            title: 'Foliar Feeding Damage?'\n          },\n          {\n            id: 'root_feeding_damage_ind',\n            title: 'Root Feeding Damage?'\n          },\n          {\n            id: 'seed_feeding_damage_ind',\n            title: 'Seed Feeding Damage?'\n          },\n          {\n            id: 'oviposition_marks_ind',\n            title: 'Oviposition Marks?'\n          },\n          {\n            id: 'eggs_present_ind',\n            title: 'Eggs?'\n          },\n          {\n            id: 'pupae_present_ind',\n            title: 'Pupae?'\n          },\n          {\n            id: 'adults_present_ind',\n            title: 'Adults?'\n          },\n          {\n            id: 'tunnels_present_ind',\n            title: 'Tunnels?'\n          },\n          {\n            id: 'general_comment',\n            title: 'Comments'\n          }\n        ]}\n        rows={\n          !biological_dispersals.length\n            ? []\n            : biological_dispersals.map((row) => ({\n                ...row,\n                project_code_title: row.project_code[0].description\n              }))\n        }\n      />\n\n      <br />\n      <br />\n      <br />\n      <br />\n    </Container>\n  );\n};\n","import { Accordion, AccordionDetails, AccordionSummary, makeStyles, Typography } from '@material-ui/core';\nimport { ExpandMore } from '@material-ui/icons';\nimport React from 'react';\nimport FormContainer from 'components/form/FormContainer';\nimport PhotoContainer from 'components/photo/PhotoContainer';\n\nconst useStyles = makeStyles((theme) => ({\n  heading: {\n    fontSize: theme.typography.pxToRem(18),\n    fontWeight: theme.typography.fontWeightRegular\n  }\n}));\n\nexport interface ActivityPOIPropType {\n  containerProps: any;\n}\n\nexport const ActivitiesPOI: React.FC<ActivityPOIPropType> = (props) => {\n  const classes = useStyles();\n\n  const { containerProps } = props;\n\n  return (\n    <>\n      <Typography align=\"center\" className={classes.heading}>\n        {containerProps.activity.activityType}: {containerProps.activity.activityId}\n      </Typography>\n      <br />\n      <Accordion>\n        <AccordionSummary expandIcon={<ExpandMore />} aria-controls=\"panel-form-content\" id=\"panel-form-header\">\n          <Typography className={classes.heading}>Form</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <FormContainer {...containerProps} />\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary expandIcon={<ExpandMore />} aria-controls=\"panel-photo-content\" id=\"panel-photo-header\">\n          <Typography className={classes.heading}>Photos</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <PhotoContainer {...containerProps} />\n        </AccordionDetails>\n      </Accordion>\n    </>\n  );\n};\n","import { makeStyles } from '@material-ui/core';\nimport React from 'react';\nimport CheckCircleTwoToneIcon from '@material-ui/icons/CheckCircleTwoTone';\nimport HighlightOffTwoToneIcon from '@material-ui/icons/HighlightOffTwoTone';\nimport CancelTwoToneIcon from '@material-ui/icons/CancelTwoTone';\nimport AutorenewTwoToneIcon from '@material-ui/icons/AutorenewTwoTone';\n\nconst useStyles = makeStyles((theme) => ({\n  status: {}\n}));\n\nexport interface ITripStepStatus {\n  statusCode: TripStatusCode;\n}\n\nexport enum TripStatusCode {\n  initial = 'initial',\n  ready = 'ready',\n  error = 'error'\n}\n\nexport const TripStepStatus: React.FC<ITripStepStatus> = (props) => {\n  useStyles();\n\n  if (props.statusCode == TripStatusCode.initial) {\n    return (\n      <>\n        <CheckCircleTwoToneIcon color=\"disabled\" fontSize=\"large\" />\n      </>\n    );\n  } else if (props.statusCode == TripStatusCode.ready) {\n    return (\n      <>\n        <CheckCircleTwoToneIcon color=\"primary\" fontSize=\"large\" />\n      </>\n    );\n  } else {\n    return (\n      <>\n        <HighlightOffTwoToneIcon color=\"error\" fontSize=\"large\" />\n      </>\n    );\n  }\n};\n\nexport default TripStepStatus;\n","import { Button, CircularProgress, Container, Grid, makeStyles, Theme, Box } from '@material-ui/core';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport { IPhoto } from 'components/photo/PhotoContainer';\nimport { interactiveGeoInputData } from 'components/map/GeoMeta';\nimport MapContainer, { getZIndex } from 'components/map/MapContainer';\nimport { IAPPSite } from 'components/points-of-interest/IAPP/IAPP-Site';\nimport { ActivitiesPOI } from 'components/points-of-interest/ActivitiesPOI/ActivitiesPOI';\nimport { DocType } from 'constants/database';\nimport { DatabaseChangesContext } from 'contexts/DatabaseChangesContext';\nimport { DatabaseContext } from 'contexts/DatabaseContext';\nimport { Feature } from 'geojson';\nimport React, { useContext, useEffect, useState, useCallback } from 'react';\nimport { MapContextMenu, MapContextMenuData } from './MapContextMenu';\n\nconst GEO_UPDATE_MIN_INTERVAL = 60000; // 60s\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  mapContainer: {\n    height: '100%'\n  },\n  map: {\n    height: '100%',\n    width: '100%',\n    zIndex: 0\n  },\n  mainGrid: {\n    height: '100%',\n    width: '100%'\n  },\n  mapGridItemExpanded: {\n    height: '100%',\n    width: '100%'\n  },\n  mapGridItemShrunk: {\n    height: '60%',\n    width: '100%'\n  },\n  popOutGridItemExpanded: {\n    height: '40%',\n    display: 'inherit',\n    width: '100%'\n  },\n  popOutGridItemShrunk: {\n    height: '0%',\n    display: 'none',\n    width: '100%'\n  },\n  popOutComponent: {\n    width: '100%',\n    backgroundColor: theme.palette.background.paper\n  }\n}));\n\ninterface IMapProps {\n  classes?: any;\n}\n\nconst PointOfInterestPopUp = (name: string) => {\n  return '<div>' + name + '</div>';\n};\n\ninterface popOutComponentProps {\n  classes?: any;\n  selectedGeo?: any;\n  buttonCloseCallback: Function;\n}\n\nconst PopOutComponent: React.FC<popOutComponentProps> = (props) => {\n  const classes = useStyles();\n  const buttonLabels = ['Close', 'Edit', 'Photos', 'Show related activities'];\n\n  //very quick and dirty style for demo:\n  return (\n    <div className={classes.popOutComponent}>\n      <br />\n      <blockquote>\n        <Grid container spacing={3}>\n          {buttonLabels.map((item) => (\n            <Grid item key={item}>\n              <Button\n                disabled={item !== 'Close'}\n                color=\"primary\"\n                variant=\"contained\"\n                onClick={() => {\n                  props.buttonCloseCallback();\n                }}>\n                {item}\n              </Button>\n            </Grid>\n          ))}\n        </Grid>\n      </blockquote>\n      <br />\n      {props.children}\n    </div>\n  );\n};\n\nconst MapPage: React.FC<IMapProps> = (props) => {\n  const classes = useStyles();\n\n  const databaseContext = useContext(DatabaseContext);\n  const databaseChangesContext = useContext(DatabaseChangesContext);\n\n  const [geometry, setGeometry] = useState<Feature[]>([]);\n  const [interactiveGeometry, setInteractiveGeometry] = useState<interactiveGeoInputData[]>(null);\n  const [selectedInteractiveGeometry, setSelectedInteractiveGeometry] = useState<interactiveGeoInputData>(null);\n\n  const [isReadyToLoadMap, setIsReadyToLoadMap] = useState(false);\n  const [showPopOut, setShowPopOut] = useState(false);\n\n  const [extent, setExtent] = useState(null);\n  const [formActivityData, setFormActivityData] = useState(null);\n  const [photos, setPhotos] = useState<IPhoto[]>([]);\n  const [geoUpdateTimestamp, setGeoUpdateTimestamp] = useState(null);\n\n  // \"is it open?\", \"what coordinates of the mouse?\", that kind of thing:\n  const initialContextMenuState: MapContextMenuData = { isOpen: false, lat: 0, lng: 0 };\n  const [contextMenuState, setContextMenuState] = useState(initialContextMenuState);\n\n  // don't load the map until interactive geos ready\n  useEffect(() => {\n    const didInteractiveGeosLoad = interactiveGeometry ? true : false;\n    setIsReadyToLoadMap(didInteractiveGeosLoad);\n  }, [databaseChangesContext, interactiveGeometry]);\n\n  const handleContextMenuClose = () => {\n    setContextMenuState({ ...contextMenuState, isOpen: false });\n  };\n\n  const handleGeoClick = async (geo: any) => {\n    setShowPopOut(true);\n    // fetch all data for the given geo\n    const results = await databaseContext.database.find({ selector: { _id: geo._id } });\n\n    setSelectedInteractiveGeometry(results.docs[0]);\n  };\n\n  const getActivityData = useCallback(async () => {\n    const appStateResults = await databaseContext.database.find({ selector: { _id: DocType.APPSTATE } });\n\n    if (!appStateResults || !appStateResults.docs || !appStateResults.docs.length) {\n      return;\n    }\n\n    const activityResults = await databaseContext.database.find({\n      selector: { _id: appStateResults.docs[0].activeActivity }\n    });\n\n    if (activityResults && activityResults.docs[0]) {\n      setFormActivityData(activityResults.docs[0]);\n      setPhotos(activityResults.docs[0].photos || []);\n    }\n  }, [databaseContext.database]);\n\n  const getEverythingWithAGeo = useCallback(async () => {\n    const now = moment().valueOf();\n    if (geoUpdateTimestamp !== null && now < geoUpdateTimestamp + GEO_UPDATE_MIN_INTERVAL) {\n      return;\n    }\n\n    setGeoUpdateTimestamp(now);\n\n    let docs = await databaseContext.database.find({\n      selector: {\n        docType: {\n          $in: [\n            DocType.REFERENCE_ACTIVITY,\n            DocType.ACTIVITY,\n            DocType.REFERENCE_POINT_OF_INTEREST,\n            DocType.POINT_OF_INTEREST,\n            DocType.SPATIAL_UPLOADS,\n            DocType.OFFLINE_EXTENT,\n            DocType.OFFLINE_DATA\n          ]\n        }\n        /*\n        // Only needed if memory size from too many points on the map becomes an issue.\n        // currently the main problem is just update frequency\n        // so this isn't needed with a long interval timer.\n        // Leaving this here just in case it's needed:\n        $or: [\n          {\n            $exists: 'lat'\n          },\n          extent\n            ? {\n              lat: {\n                $gte: extent._southWest.lat,\n                $lte: extent._northEast.lat\n              },\n              lon: {\n                $gte: extent._southWest.lng,\n                $lte: extent._northEast.lng\n              }\n            }\n            : {}\n        ]*/\n      },\n      use_index: 'docTypeIndex',\n      // limit to only necessary fields:\n      fields: ['_id', 'docType', 'geometry', 'lat', 'lon']\n    });\n\n    if (!docs || !docs.docs || !docs.docs.length) {\n      return;\n    }\n\n    let geos = [];\n    let interactiveGeos = [];\n\n    docs.docs.forEach((row) => {\n      if (!row.geometry || !row.geometry.length) {\n        return;\n      }\n\n      // geos.push(row.geometry[0]); // deprecated(?): points only need to be interactive geos now\n\n      let coordinatesString = 'Polygon';\n\n      const coords = row.geometry[0]?.geometry.coordinates;\n      const zIndex = getZIndex(row);\n      if (row.geometry[0].geometry.type !== 'Polygon')\n        coordinatesString = `(${Number(coords[1]).toFixed(2)}, ${Number(coords[0]).toFixed(2)})`;\n\n      switch (row.docType) {\n        case DocType.OFFLINE_DATA:\n          interactiveGeos.push({\n            recordDocID: row._id,\n            recordDocType: row.docType,\n            description: 'Offline Data',\n            geometry: row.geometry,\n            color: 'blue',\n            popUpComponent: PointOfInterestPopUp\n          });\n          break;\n        case DocType.OFFLINE_EXTENT:\n          // TODO push this into the interactiveGeos array\n          // Then in the layer addition logic... handle behaviour\n          // If still downloading display differently\n          break;\n        case DocType.SPATIAL_UPLOADS:\n          interactiveGeos.push({\n            recordDocID: row._id,\n            recordDocType: row.docType,\n            description: 'Uploaded spatial content:\\n ' + row._id + '\\n' + coordinatesString,\n            geometry: row.geometry,\n            color: 'orange',\n            onClickCallback: () => {\n              console.log('uploaded content clicked');\n            },\n            popUpComponent: PointOfInterestPopUp\n          });\n          break;\n        case DocType.POINT_OF_INTEREST:\n          interactiveGeos.push({\n            //mapContext: MapContext.MAIN_MAP,\n            recordDocID: row._id,\n            recordDocType: row.docType,\n            description: 'New Point of Interest:\\n ' + row._id + '\\n' + coordinatesString,\n\n            // basic display:\n            geometry: row.geometry,\n            color: '#99E472',\n            zIndex: zIndex,\n\n            // interactive\n            onClickCallback: () => {\n              //setInteractiveGeometry([interactiveGeos])\n              console.log('clicked geo');\n              handleGeoClick(row);\n            }, //try to get this one working first\n            popUpComponent: PointOfInterestPopUp\n          });\n          /* isSelected?: boolean;\n\n          markerComponent?: FunctionComponent;\n          showMarkerAtZoom?: number;\n          showMarker: boolean;\n\n          */\n          /*\n          showPopUp: boolean;})*/\n          break;\n        case DocType.REFERENCE_ACTIVITY:\n          interactiveGeos.push({\n            //mapContext: MapContext.MAIN_MAP,\n            recordDocID: row._id,\n            recordDocType: row.docType,\n            description: 'Past Activity:\\n ' + row._id + '\\n' + coordinatesString,\n\n            // basic display:\n            geometry: row.geometry[0],\n            color: '#F3C911',\n            zIndex: zIndex,\n\n            // interactive\n            onClickCallback: () => {\n              //setInteractiveGeometry([interactiveGeos])\n              console.log('before handle geo');\n              handleGeoClick(row);\n            }, //try to get this one working first\n            popUpComponent: PointOfInterestPopUp\n          });\n          break;\n        case DocType.ACTIVITY:\n          interactiveGeos.push({\n            //mapContext: MapContext.MAIN_MAP,\n            recordDocID: row._id,\n            recordDocType: row.docType,\n            description: 'Activity:\\n ' + row._id + '\\n' + coordinatesString,\n\n            // basic display:\n            geometry: row.geometry[0],\n            color: '#E044A7',\n            zIndex: zIndex,\n\n            // interactive\n            onClickCallback: () => {\n              //setInteractiveGeometry([interactiveGeos])\n              console.log('before handle geo');\n              handleGeoClick(row);\n            }, //try to get this one working first\n            popUpComponent: PointOfInterestPopUp\n          });\n          /* isSelected?: boolean;\n\n          markerComponent?: FunctionComponent;\n          showMarkerAtZoom?: number;\n          showMarker: boolean;\n\n          */\n          /*\n          showPopUp: boolean;})*/\n          break;\n        case DocType.REFERENCE_POINT_OF_INTEREST:\n          interactiveGeos.push({\n            //mapContext: MapContext.MAIN_MAP,\n            recordDocID: row._id,\n            recordDocType: row.docType,\n            description: 'Point of Interest:\\n ' + row._id + '\\n' + coordinatesString,\n\n            // basic display:\n            geometry: row.geometry[0],\n            color: '#FF5733',\n            zIndex: zIndex,\n\n            // interactive\n            onClickCallback: () => {\n              //setInteractiveGeometry([interactiveGeos])\n              console.log('before handle geo');\n              handleGeoClick(row);\n            }, //try to get this one working first\n            popUpComponent: PointOfInterestPopUp\n          });\n          /* isSelected?: boolean;\n\n          markerComponent?: FunctionComponent;\n          showMarkerAtZoom?: number;\n          showMarker: boolean;\n\n          */\n          /*\n          showPopUp: boolean;})*/\n          break;\n        default:\n          break;\n      }\n    });\n\n    setGeometry(geos);\n    setInteractiveGeometry(interactiveGeos);\n\n    //setIsReadyToLoadMap(true)\n  }, [extent]);\n\n  useEffect(() => {\n    const updateComponent = () => {\n      getEverythingWithAGeo();\n    };\n\n    updateComponent();\n  }, [databaseChangesContext, showPopOut, getEverythingWithAGeo]);\n\n  useEffect(() => {\n    console.log('chosen geo');\n    console.dir(selectedInteractiveGeometry);\n  }, [selectedInteractiveGeometry]);\n\n  useEffect(() => {\n    getActivityData();\n  }, [getActivityData]);\n\n  const photoState = {\n    photos,\n    setPhotos\n  };\n\n  const containerProps = {\n    activity: formActivityData,\n    photoState\n  };\n\n  return (\n    <Box height=\"inherit\" width=\"inherit\">\n      <Grid className={classes.mainGrid} container>\n        <Grid className={showPopOut ? classes.mapGridItemShrunk : classes.mapGridItemExpanded} item>\n          <Container className={clsx(classes.mapContainer)} maxWidth={false} disableGutters={true}>\n            {isReadyToLoadMap ? (\n              <MapContainer\n                classes={classes}\n                showDrawControls={false}\n                mapId={'mainMap'}\n                geometryState={{ geometry, setGeometry }}\n                interactiveGeometryState={{ interactiveGeometry, setInteractiveGeometry }}\n                extentState={{ extent, setExtent }}\n                contextMenuState={{ state: contextMenuState, setContextMenuState }} // whether someone clicked, and click x & y\n              />\n            ) : (\n              <CircularProgress />\n            )}\n          </Container>\n        </Grid>\n        <Grid className={showPopOut ? classes.popOutGridItemExpanded : classes.popOutGridItemShrunk} item>\n          <PopOutComponent\n            buttonCloseCallback={() => {\n              setShowPopOut(false);\n            }}\n            selectedGeo={selectedInteractiveGeometry}>\n            {(selectedInteractiveGeometry as any)?.docType === DocType.REFERENCE_POINT_OF_INTEREST ? (\n              <IAPPSite record={selectedInteractiveGeometry} />\n            ) : (\n              <>{formActivityData && <ActivitiesPOI containerProps={containerProps} />}</>\n            )}\n            {/*<ActivityPage activityId={selectedInteractiveGeometry?.recordDocID} />*/}\n          </PopOutComponent>\n        </Grid>\n      </Grid>\n      <MapContextMenu\n        contextMenuState={{ state: contextMenuState, setContextMenuState }}\n        handleClose={handleContextMenuClose}\n      />\n    </Box>\n  );\n};\n\nexport default MapPage;\n","import DateFnsUtils from '@date-io/date-fns';\nimport {\n  Box,\n  Button,\n  Grid,\n  InputLabel,\n  List,\n  ListItem,\n  makeStyles,\n  MenuItem,\n  Paper,\n  Select,\n  Switch\n} from '@material-ui/core';\nimport { Add, DeleteForever } from '@material-ui/icons';\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport { DatabaseChangesContext } from 'contexts/DatabaseChangesContext';\nimport { DatabaseContext } from 'contexts/DatabaseContext';\nimport React, { useContext, useEffect, useState, useCallback } from 'react';\n\ninterface IActivityChoices {\n  activityType: string;\n  includePhotos: boolean;\n  includeForms: boolean;\n  species: number[];\n  startDate: string;\n  endDate: string;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary\n  },\n  activityRecordsChoice: {\n    padding: theme.spacing(2)\n  }\n}));\n\nexport const ActivityDataFilter: React.FC<any> = (props) => {\n  const databaseContext = useContext(DatabaseContext);\n  const [activityChoices, setActivityChoices] = useState([]);\n\n  const getActivityChoicesFromTrip = useCallback(async () => {\n    let docs = await databaseContext.database.find({\n      selector: {\n        _id: props.trip_ID\n      }\n    });\n    if (docs.docs.length > 0) {\n      let tripDoc = docs.docs[0];\n      if (tripDoc.activityChoices) {\n        setActivityChoices([...tripDoc.activityChoices]);\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    const updateComponent = () => {\n      getActivityChoicesFromTrip();\n    };\n    updateComponent();\n  }, [getActivityChoicesFromTrip]);\n\n  const saveChoices = async (newActivityChoices) => {\n    console.log('updating trip ' + props.trip_ID + ' activity filters');\n    await databaseContext.database.upsert(props.trip_ID, (tripDoc) => {\n      return { ...tripDoc, activityChoices: newActivityChoices };\n    });\n    setActivityChoices([...newActivityChoices]);\n  };\n\n  const addActivityChoice = (newActivity: IActivityChoices) => {\n    saveChoices([...activityChoices, newActivity]);\n  };\n\n  const updateActivityChoice = (updatedActivity: IActivityChoices, index: number) => {\n    let updatedActivityChoices = [...activityChoices];\n    updatedActivityChoices[index] = updatedActivity;\n    saveChoices([...updatedActivityChoices]);\n  };\n\n  const deleteActivityChoice = (index: number) => {\n    let copy = [...activityChoices];\n    copy.splice(index, 1);\n    saveChoices(copy);\n  };\n\n  const classes = useStyles();\n  const [memoHash, setMemoHash] = useState();\n\n  return (\n    <>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <List>\n          {activityChoices.map((activityChoice, index) => {\n            return (\n              <ListItem key={index}>\n                <Paper className={classes.activityRecordsChoice}>\n                  <Grid xs={8} container spacing={3}>\n                    <Grid item xs={4}>\n                      <div>\n                        <InputLabel id=\"demo-simple-select-label\">Activity Type</InputLabel>\n                        <Select\n                          labelId=\"demo-simple-select-label\"\n                          id=\"demo-simple-select\"\n                          value={activityChoice.activityType}\n                          onChange={(e) => {\n                            updateActivityChoice({ ...activityChoice, activityType: e.target.value }, index);\n                          }}>\n                          <MenuItem value={'All'}>All</MenuItem>\n                          <MenuItem value={'Observation'}>Observation</MenuItem>\n                          <MenuItem value={'Treatment'}>Treatment</MenuItem>\n                          <MenuItem value={'Monitoring'}>Monitoring</MenuItem>\n                        </Select>\n                      </div>\n                    </Grid>\n                    <Grid item xs={4}>\n                      <InputLabel>Photos</InputLabel>\n                      <Switch\n                        color=\"primary\"\n                        checked={activityChoice.includePhotos}\n                        value={activityChoice.includePhotos}\n                        onChange={() => {\n                          updateActivityChoice(\n                            { ...activityChoice, includePhotos: !activityChoice.includePhotos },\n                            index\n                          );\n                        }}\n                      />\n                    </Grid>\n                    <Grid item xs={4}>\n                      <InputLabel>Forms</InputLabel>\n                      <Switch\n                        color=\"primary\"\n                        checked={activityChoice.includeForms}\n                        value={activityChoice.includeForms}\n                        onChange={() => {\n                          updateActivityChoice(\n                            { ...activityChoice, includeForms: !activityChoice.includeForms },\n                            index\n                          );\n                        }}\n                      />\n                    </Grid>\n                    <Grid item xs={6}>\n                      <KeyboardDatePicker\n                        autoOk\n                        variant=\"inline\"\n                        format=\"MM/dd/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-inline\"\n                        label=\"Earliest Date\"\n                        value={activityChoice.startDate}\n                        onChange={(e) => {\n                          updateActivityChoice({ ...activityChoice, startDate: e }, index);\n                        }}\n                        KeyboardButtonProps={{\n                          'aria-label': 'change date start'\n                        }}\n                      />\n                    </Grid>\n                    <Grid item xs={6}>\n                      <KeyboardDatePicker\n                        autoOk\n                        variant=\"inline\"\n                        format=\"MM/dd/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-inline\"\n                        label=\"Latest Date\"\n                        value={activityChoice.endDate}\n                        onChange={(e) => {\n                          updateActivityChoice({ ...activityChoice, endDate: e }, index);\n                        }}\n                        KeyboardButtonProps={{\n                          'aria-label': 'change date end'\n                        }}\n                      />\n                    </Grid>\n                    <Grid container item justify=\"flex-end\">\n                      <Button\n                        variant=\"contained\"\n                        startIcon={<DeleteForever />}\n                        onClick={() => deleteActivityChoice(index)}>\n                        Remove\n                      </Button>\n                    </Grid>\n                  </Grid>\n                </Paper>\n              </ListItem>\n            );\n          })}\n        </List>\n        <Box>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<Add />}\n            onClick={() => {\n              addActivityChoice({\n                activityType: '',\n                includePhotos: false,\n                includeForms: false,\n                species: [],\n                startDate: null,\n                endDate: null\n              });\n            }}>\n            Add New\n          </Button>\n        </Box>\n      </MuiPickersUtilsProvider>\n    </>\n  );\n};\n\nexport default ActivityDataFilter;\n","import DateFnsUtils from '@date-io/date-fns';\nimport moment from 'moment';\nimport { Button, Grid, List, ListItem, makeStyles, MenuItem, Paper, Select, TextField } from '@material-ui/core';\nimport { Add, DeleteForever } from '@material-ui/icons';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport { DatabaseChangesContext } from 'contexts/DatabaseChangesContext';\nimport { DatabaseContext } from 'contexts/DatabaseContext';\nimport { useInvasivesApi } from 'hooks/useInvasivesApi';\nimport React, { useContext, useEffect, useState, useCallback } from 'react';\n\ninterface IMetabaseChoices {\n  metabaseQueryId: string;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    textAlign: 'center',\n    color: theme.palette.text.secondary\n  },\n  metabaseRecordsChoice: {\n    padding: theme.spacing(2)\n  },\n  metabaseSearchField: {\n    width: 'fit-content',\n    minWidth: 200\n  },\n  metabaseFilter: {\n    flexDirection: 'column'\n  },\n  metabaseAddButton: {\n    width: '100%'\n  }\n}));\n\nexport const MetabaseSearch: React.FC<any> = (props) => {\n  const databaseContext = useContext(DatabaseContext);\n  const databaseChangesContext = useContext(DatabaseChangesContext);\n  const [metabaseChoices, setMetabaseChoices] = useState([]);\n  const [metabaseOptions, setMetabaseOptions] = useState([]);\n  const invasivesApi = useInvasivesApi();\n\n  const getMetabaseChoicesFromTrip = useCallback(async () => {\n    let docs = await databaseContext.database.find({\n      selector: {\n        _id: 'trip'\n      }\n    });\n\n    if (docs.docs.length) {\n      let tripDoc = docs.docs[0];\n      if (tripDoc.metabaseChoices) {\n        setMetabaseChoices([...tripDoc.metabaseChoices]);\n      }\n    }\n  }, [databaseContext.database]);\n\n  const getMetabaseQueryOptions = useCallback(async () => {\n    let docs = await databaseContext.database.find({\n      selector: {\n        _id: 'trip'\n      }\n    });\n\n    if (docs.docs.length) {\n      let tripDoc = docs.docs[0];\n\n      // update metabase query options (rate limited to once per minute so we don't break metabase)\n      if (\n        tripDoc.metabaseChoices &&\n        (!tripDoc.metabaseQueryOptionsLastChecked ||\n          moment().diff(tripDoc.metabaseQueryOptionsLastChecked, 'minutes') >= 1)\n      ) {\n        try {\n          let options: Array<object> = await invasivesApi.getMetabaseQueryOptions();\n          await databaseContext.database.upsert('trip', (doc) => {\n            return {\n              ...doc,\n              metabaseQueryOptionsLastChecked: moment().valueOf(),\n              metabaseQueryOptions: options\n            };\n          });\n          setMetabaseOptions(options);\n        } catch (error) {\n          if (tripDoc.metabaseQueryOptions) setMetabaseOptions(tripDoc.metabaseQueryOptions);\n        }\n      } else {\n        if (tripDoc.metabaseQueryOptions) setMetabaseOptions(tripDoc.metabaseQueryOptions);\n      }\n    }\n  }, [databaseContext.database]);\n\n  useEffect(() => {\n    const updateComponent = () => {\n      getMetabaseChoicesFromTrip();\n    };\n    updateComponent();\n  }, [databaseChangesContext, getMetabaseChoicesFromTrip]);\n\n  const saveChoices = async (newMetabaseChoices) => {\n    await databaseContext.database.upsert('trip', (tripDoc) => {\n      return { ...tripDoc, metabaseChoices: newMetabaseChoices };\n    });\n  };\n\n  const addMetabaseChoice = (newMetabase: IMetabaseChoices) => {\n    saveChoices([...metabaseChoices, newMetabase]);\n  };\n\n  const updateMetabaseChoice = (updatedMetabase: IMetabaseChoices, index: number) => {\n    const updatedMetabaseChoices = [...metabaseChoices];\n    updatedMetabaseChoices[index] = updatedMetabase;\n    saveChoices([...updatedMetabaseChoices]);\n  };\n\n  const deleteMetabaseChoice = (index: number) => {\n    const copy = [...metabaseChoices];\n    copy.splice(index, 1);\n    saveChoices(copy);\n  };\n\n  const classes = useStyles();\n\n  if (!metabaseOptions?.length) getMetabaseQueryOptions();\n\n  return (\n    <>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Grid className={classes.metabaseFilter}>\n          <List>\n            {metabaseChoices.map((metabaseChoice, index) => {\n              return (\n                <ListItem key={index}>\n                  <Paper className={classes.metabaseRecordsChoice}>\n                    <Grid container spacing={2} direction=\"row\">\n                      <Grid container item xs={8}>\n                        {metabaseOptions && metabaseOptions.length ? (\n                          <Select\n                            className={classes.metabaseSearchField}\n                            label=\"Metabase Query\"\n                            id=\"select\"\n                            value={metabaseChoice.metabaseQueryId}\n                            onClick={() => {\n                              getMetabaseQueryOptions();\n                            }}\n                            onChange={(e) => {\n                              updateMetabaseChoice(\n                                {\n                                  ...metabaseChoice,\n                                  metabaseQueryId: '' + e.target.value,\n                                  metabaseQueryName: metabaseOptions\n                                    .filter((option) => option.id === e.target.value)\n                                    .map((option) => option.name)\n                                },\n                                index\n                              );\n                            }}>\n                            {metabaseOptions.map((option) => (\n                              <MenuItem key={option.id} value={option.id}>\n                                {option.name}\n                              </MenuItem>\n                            ))}\n                          </Select>\n                        ) : (\n                          <TextField\n                            className={classes.metabaseSearchField}\n                            label=\"Metabase Query ID\"\n                            value={metabaseChoice.metabaseQueryId}\n                            onClick={() => {\n                              getMetabaseQueryOptions();\n                            }}\n                            onChange={(e) => {\n                              updateMetabaseChoice({ ...metabaseChoice, metabaseQueryId: e.target.value }, index);\n                            }}\n                          />\n                        )}\n                      </Grid>\n                      <Grid container item xs={4} justify=\"flex-end\">\n                        <Button\n                          variant=\"contained\"\n                          startIcon={<DeleteForever />}\n                          onClick={() => deleteMetabaseChoice(index)}>\n                          Remove\n                        </Button>\n                      </Grid>\n                    </Grid>\n                  </Paper>\n                </ListItem>\n              );\n            })}\n          </List>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.metabaseAddButton}\n            startIcon={<Add />}\n            onClick={() => {\n              addMetabaseChoice({\n                metabaseQueryId: ''\n              });\n            }}>\n            Add New\n          </Button>\n        </Grid>\n      </MuiPickersUtilsProvider>\n    </>\n  );\n};\n\nexport default MetabaseSearch;\n","import { DatabaseContext } from 'contexts/DatabaseContext';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { DropzoneArea } from 'material-ui-dropzone';\nimport { kml } from '@tmcw/togeojson';\n// node doesn't have xml parsing or a dom. use xmldom\nconst DOMParser = require('xmldom').DOMParser;\n\nexport const KMLUpload: React.FC<any> = (props) => {\n  const databaseContext = useContext(DatabaseContext);\n\n  // Raw file kept in useState var and converted to Geo before hitting db:\n  const [aFile, setAFile] = useState(null);\n\n  const saveKML = async (input: File) => {\n    const fileAsString = await input.text().then((xmlString) => {\n      return xmlString;\n    });\n    const DOMFromXML = new DOMParser().parseFromString(fileAsString);\n    const geoFromDOM = kml(DOMFromXML);\n    console.log('geo');\n\n    if (geoFromDOM) {\n      console.log('saving geo feat collection');\n      await databaseContext.database.upsert('trip', (tripDoc) => {\n        return { ...tripDoc, geometry: geoFromDOM.features };\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (aFile) {\n      saveKML(aFile);\n    }\n  }, [aFile]);\n\n  return (\n    <DropzoneArea\n      dropzoneText=\"Upload KML here\"\n      onChange={(e) => {\n        setAFile(e[0]);\n      }}\n    />\n  );\n};\n\nexport default KMLUpload;\n","import DateFnsUtils from '@date-io/date-fns';\nimport {\n  Box,\n  Button,\n  Grid,\n  InputLabel,\n  List,\n  ListItem,\n  makeStyles,\n  MenuItem,\n  Paper,\n  Select,\n  Switch\n} from '@material-ui/core';\nimport { Add, ContactlessOutlined, DeleteForever } from '@material-ui/icons';\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport { DatabaseChangesContext } from 'contexts/DatabaseChangesContext';\nimport { DatabaseContext } from 'contexts/DatabaseContext';\nimport React, { useContext, useEffect, useState } from 'react';\n\ninterface IPointOfInterestChoices {\n  pointOfInterestType: string;\n  includePhotos: boolean;\n  includeForms: boolean;\n  startDate: string;\n  endDate: string;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary\n  },\n  pointOfInterestChoice: {\n    padding: theme.spacing(2)\n  }\n}));\n\nexport const PointOfInterestDataFilter: React.FC<any> = (props) => {\n  const databaseContext = useContext(DatabaseContext);\n  const [pointOfInterestChoices, setPointOfInterestChoices] = useState([]);\n\n  const getPointOfInterestChoicesFromTrip = async () => {\n    console.log('trip id for point filter: ' + props.trip_ID);\n    let docs = await databaseContext.database.find({\n      selector: {\n        _id: props.trip_ID\n      }\n    });\n    if (docs.docs.length > 0) {\n      let tripDoc = docs.docs[0];\n      if (tripDoc.pointOfInterestChoices) {\n        setPointOfInterestChoices([...tripDoc.pointOfInterestChoices]);\n      }\n    }\n  };\n\n  //change this to only look for changes that are relevant\n  useEffect(() => {\n    const updateComponent = () => {\n      getPointOfInterestChoicesFromTrip();\n    };\n    updateComponent();\n  }, []);\n\n  const saveChoices = async (newPointOfInterestChoices) => {\n    await databaseContext.database.upsert(props.trip_ID, (tripDoc) => {\n      return { ...tripDoc, pointOfInterestChoices: newPointOfInterestChoices };\n    });\n    setPointOfInterestChoices([...newPointOfInterestChoices]);\n  };\n\n  const addPointOfInterestChoice = (newPointOfInterest: IPointOfInterestChoices) => {\n    saveChoices([...pointOfInterestChoices, newPointOfInterest]);\n  };\n\n  const updatePointOfInterestChoice = (updatedPointOfInterest: IPointOfInterestChoices, index: number) => {\n    let updatedPointOfInterestChoices = pointOfInterestChoices;\n    updatedPointOfInterestChoices[index] = updatedPointOfInterest;\n    saveChoices([...updatedPointOfInterestChoices]);\n  };\n\n  const deletePointOfInterestChoice = (index: number) => {\n    let copy = [...pointOfInterestChoices];\n    copy.splice(index, 1);\n    saveChoices(copy);\n  };\n\n  const classes = useStyles();\n\n  return (\n    <>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <List>\n          {pointOfInterestChoices.map((pointOfInterestChoice, index) => {\n            return (\n              <ListItem key={index}>\n                <Paper className={classes.pointOfInterestChoice}>\n                  <Grid container spacing={3}>\n                    <Grid item xs={4}>\n                      <div>\n                        <InputLabel id=\"demo-simple-select-label\">Point Of Interest Type</InputLabel>\n                        <Select\n                          labelId=\"demo-simple-select-label\"\n                          id=\"demo-simple-select\"\n                          value={pointOfInterestChoice.pointOfInterestType}\n                          onChange={(e) => {\n                            updatePointOfInterestChoice(\n                              { ...pointOfInterestChoice, pointOfInterestType: e.target.value },\n                              index\n                            );\n                          }}>\n                          <MenuItem value={''}>All</MenuItem>\n                          <MenuItem value={'IAPP Site'}>IAPP Site</MenuItem>\n                        </Select>\n                      </div>\n                    </Grid>\n                    {/*   <Grid item xs={4}>\n                      <InputLabel>Photos</InputLabel>\n                      <Switch\n                        color=\"primary\"\n                        checked={pointOfInterestChoice.includePhotos}\n                        onChange={() => {\n                          updatePointOfInterestChoice(\n                            { ...pointOfInterestChoice, includePhotos: !pointOfInterestChoice.includePhotos },\n                            index\n                          );\n                        }}\n                      />\n                      </Grid>*/}\n                    {/*  <Grid item xs={4}>\n                      <InputLabel>Forms</InputLabel>\n                      <Switch\n                        color=\"primary\"\n                        checked={pointOfInterestChoice.includeForms}\n                        onChange={() => {\n                          updatePointOfInterestChoice(\n                            { ...pointOfInterestChoice, includeForms: !pointOfInterestChoice.includeForms },\n                            index\n                          );\n                        }}\n                      />\n                      </Grid> */}\n                    <Grid item xs={6}>\n                      <KeyboardDatePicker\n                        autoOk\n                        variant=\"inline\"\n                        format=\"MM/dd/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-inline\"\n                        label=\"Earliest Date\"\n                        value={pointOfInterestChoice.startDate}\n                        onChange={(e) => {\n                          updatePointOfInterestChoice({ ...pointOfInterestChoice, startDate: e }, index);\n                        }}\n                        KeyboardButtonProps={{\n                          'aria-label': 'change date start'\n                        }}\n                      />\n                    </Grid>\n                    <Grid item xs={6}>\n                      <KeyboardDatePicker\n                        autoOk\n                        variant=\"inline\"\n                        format=\"MM/dd/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-inline\"\n                        label=\"Latest Date\"\n                        value={pointOfInterestChoice.endDate}\n                        onChange={(e) => {\n                          updatePointOfInterestChoice({ ...pointOfInterestChoice, endDate: e }, index);\n                        }}\n                        KeyboardButtonProps={{\n                          'aria-label': 'change date end'\n                        }}\n                      />\n                    </Grid>\n                    <Grid container item justify=\"flex-end\">\n                      <Button\n                        variant=\"contained\"\n                        startIcon={<DeleteForever />}\n                        onClick={() => deletePointOfInterestChoice(index)}>\n                        Remove\n                      </Button>\n                    </Grid>\n                  </Grid>\n                </Paper>\n              </ListItem>\n            );\n          })}\n        </List>\n        <Box>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<Add />}\n            onClick={() => {\n              addPointOfInterestChoice({\n                pointOfInterestType: '',\n                includePhotos: true,\n                includeForms: true,\n                startDate: null,\n                endDate: null\n              });\n            }}>\n            Add New\n          </Button>\n        </Box>\n      </MuiPickersUtilsProvider>\n    </>\n  );\n};\n\nexport default PointOfInterestDataFilter;\n","import { Button, makeStyles } from '@material-ui/core';\nimport Spinner from 'components/spinner/Spinner';\nimport { DocType } from 'constants/database';\nimport { DatabaseChangesContext } from 'contexts/DatabaseChangesContext';\nimport { DatabaseContext } from 'contexts/DatabaseContext';\nimport { useInvasivesApi } from 'hooks/useInvasivesApi';\nimport {\n  IActivitySearchCriteria,\n  IPointOfInterestSearchCriteria,\n  IMetabaseQuerySearchCriteria\n} from 'interfaces/useInvasivesApi-interfaces';\nimport React, { useContext, useEffect, useState, useCallback } from 'react';\nimport { notifySuccess, notifyError } from 'utils/NotificationUtils';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary\n  },\n  controlsGrid: {\n    flexDirection: 'row',\n    [theme.breakpoints.down('sm')]: {\n      flexDirection: 'column'\n    }\n  }\n}));\n\nexport const TripDataControls: React.FC<any> = (props) => {\n  useStyles();\n\n  const invasivesApi = useInvasivesApi();\n\n  const databaseContext = useContext(DatabaseContext);\n  const databaseChangesContext = useContext(DatabaseChangesContext);\n\n  const [trip, setTrip] = useState(null);\n  const [fetching, setFetching] = useState(false);\n\n  const bulkUpsert = async (upserts) => {\n    let allDocsFetch = await databaseContext.database.allDocs({ include_docs: true });\n    let allDocs = allDocsFetch?.rows ? allDocsFetch.rows : [];\n\n    const newUpserts = { ...upserts };\n\n    // go through all docs, flagging those already existing:\n    const modifiedDocs = allDocs\n      .filter((doc) => {\n        const id = doc.doc?._id;\n        newUpserts[id] = undefined; // remove found docs*/ // does this not block updates?\n        return upserts[id];\n      })\n      .map((doc) => {\n        return upserts[doc.id](doc.doc);\n      });\n\n    const newDocs = Object.keys(newUpserts)\n      .filter((id) => newUpserts[id] !== undefined)\n      .map((id) => upserts[id]());\n\n    const resultDocs = [...modifiedDocs, ...newDocs];\n    resultDocs.sort((a, b) => {\n      if (a.id < b.id) return -1;\n      if (a.id > b.id) return 1;\n      return 0;\n    });\n\n    await databaseContext.database.bulkDocs(resultDocs);\n\n    return Object.keys(upserts).length;\n  };\n\n  const getPhotos = async (row) => {\n    const photos = [];\n    if (row.media_keys && row.media_keys.length) {\n      try {\n        const mediaResults = await invasivesApi.getMedia(row.media_keys);\n\n        mediaResults.forEach((media) => {\n          photos.push({ filepath: media.file_name, dataUrl: media.encoded_file });\n        });\n      } catch {\n        notifyError(databaseContext, 'Could not fetch photos for ' + row._id);\n      }\n      return photos;\n    }\n    return [];\n  };\n\n  const getTrip = useCallback(async () => {\n    let docs = await databaseContext.database.find({\n      selector: {\n        _id: props.trip_ID,\n        docType: DocType.TRIP\n      }\n    });\n\n    if (!docs || !docs.docs || !docs.docs.length) return;\n\n    setTrip(docs.docs[0]);\n  }, [databaseContext.database]);\n\n  useEffect(() => {\n    const updateComponent = () => {\n      getTrip();\n    };\n\n    updateComponent();\n  }, [databaseChangesContext, getTrip]);\n\n  const fetchActivities = async () => {\n    if (!trip || !trip.activityChoices || !trip.activityChoices.length) {\n      return;\n    }\n\n    let numberActivitiesFetched = 0;\n\n    for (const setOfChoices of trip.activityChoices) {\n      const geometry = (trip.geometry && trip.geometry.length && trip.geometry[0]) || null;\n\n      const activitySearchCriteria: IActivitySearchCriteria = {\n        ...((setOfChoices.activityType && { activity_type: [setOfChoices.activityType] }) || []),\n        ...((setOfChoices.startDate && { date_range_start: setOfChoices.startDate }) || {}),\n        ...((setOfChoices.endDate && { date_range_end: setOfChoices.endDate }) || {}),\n        ...((geometry && { search_feature: geometry }) || {})\n      };\n\n      let response = await invasivesApi.getActivities(activitySearchCriteria);\n\n      let upserts = [];\n\n      for (const row of response.rows) {\n        let photos = [];\n        if (setOfChoices.includePhotos) photos = await getPhotos(row);\n\n        upserts = {\n          ...upserts,\n          [row.activity_id]: (existingDoc: any) => ({\n            ...existingDoc,\n            _id: row.activity_id,\n            docType: DocType.REFERENCE_ACTIVITY,\n            trip_IDs: existingDoc?.trip_IDs ? [...existingDoc.trip_IDs, props.trip_ID] : [props.trip_ID],\n            ...row,\n            formData: row.activity_payload.form_data,\n            activityType: row.activity_type,\n            activitySubtype: row.activity_subtype,\n            geometry: row.activity_payload.geometry,\n            photos: photos\n          })\n        };\n      }\n      try {\n        numberActivitiesFetched += await bulkUpsert(upserts);\n      } catch (error) {\n        notifyError(databaseContext, 'Error with inserting Activities into database: ' + error);\n      }\n    }\n\n    notifySuccess(databaseContext, 'Cached ' + numberActivitiesFetched + ' activities.');\n  };\n\n  const fetchPointsOfInterest = async () => {\n    if (!trip || !trip.pointOfInterestChoices || !trip.pointOfInterestChoices.length) {\n      return;\n    }\n\n    let numberPointsOfInterestFetched = 0;\n\n    for (const setOfChoices of trip.pointOfInterestChoices) {\n      const geometry = (trip.geometry && trip.geometry.length && trip.geometry[0]) || null;\n\n      const pointOfInterestSearchCriteria: IPointOfInterestSearchCriteria = {\n        ...((setOfChoices.pointOfInterestType && { point_of_interest_type: setOfChoices.pointOfInterestType }) || {}),\n        ...((setOfChoices.startDate && { date_range_start: setOfChoices.startDate }) || {}),\n        ...((setOfChoices.endDate && { date_range_end: setOfChoices.endDate }) || {}),\n        ...((geometry && { search_feature: geometry }) || {})\n      };\n\n      let response = await invasivesApi.getPointsOfInterest(pointOfInterestSearchCriteria);\n\n      let upserts = {};\n      for (const row of response) {\n        let photos = [];\n        if (setOfChoices.includePhotos) photos = await getPhotos(row);\n\n        upserts = {\n          ...upserts,\n          ['POI' + row.point_of_interest_id]: (existingDoc: any) => ({\n            ...existingDoc,\n            _id: 'POI' + row.point_of_interest_id,\n            docType: DocType.REFERENCE_POINT_OF_INTEREST,\n            trip_IDs: existingDoc?.trip_IDs ? [...existingDoc.trip_IDs, props.trip_ID] : [props.trip_ID],\n            ...row,\n            formData: row.point_of_interest_payload.form_data,\n            pointOfInterestType: row.point_of_interest_type,\n            pointOfInterestSubtype: row.point_of_interest_subtype,\n            geometry: [...row.point_of_interest_payload.geometry],\n            photos: photos\n          })\n        };\n      }\n      try {\n        numberPointsOfInterestFetched += await bulkUpsert(upserts);\n      } catch (error) {\n        notifyError(databaseContext, 'Error with inserting Points of Interest into database: ' + error);\n      }\n    }\n    notifySuccess(databaseContext, 'Cached ' + numberPointsOfInterestFetched + ' points of interest.');\n  };\n\n  const fetchMetabaseQueries = async () => {\n    if (!trip || !trip.metabaseChoices || !trip.metabaseChoices.length) {\n      return;\n    }\n\n    let countActivities = 0;\n    let countPois = 0;\n\n    for (const setOfChoices of trip.metabaseChoices) {\n      const geometry = (trip.geometry && trip.geometry.length && trip.geometry[0]) || null;\n\n      const querySearchCriteria: IMetabaseQuerySearchCriteria = {\n        ...((setOfChoices.metabaseQueryId && { metabaseQueryId: setOfChoices.metabaseQueryId }) || {}),\n        ...((geometry && { search_feature: geometry }) || {})\n      };\n\n      if (!setOfChoices.metabaseQueryId) {\n        notifyError(databaseContext, 'Metabase Query ID cannot be blank, please select a query');\n        return;\n      }\n\n      let response = await invasivesApi.getMetabaseQueryResults(querySearchCriteria);\n\n      await databaseContext.database.upsert(props.trip_ID, (tripDoc) => ({\n        ...tripDoc,\n        metabaseQueryNames: {\n          ...trip.metabaseQueryNames,\n          [setOfChoices.metabaseQueryId]: response.name\n        }\n      }));\n\n      let responseRows = [];\n      if (response?.activities?.length) responseRows = response.activities;\n      if (response?.points_of_interest?.length) responseRows = [responseRows, ...response.points_of_interest];\n\n      let upserts = {};\n      for (const row of responseRows) {\n        let photos = [];\n        if (setOfChoices.includePhotos) photos = await getPhotos(row);\n\n        if (row.activity_id) {\n          upserts = {\n            ...upserts,\n            [row.activity_id]: (existingDoc: any) => ({\n              ...existingDoc,\n              _id: row.activity_id,\n              docType: DocType.REFERENCE_ACTIVITY,\n              trip_IDs:\n                existingDoc && existingDoc.trip_IDs ? [...existingDoc.trip_IDs, props.trip_ID] : [props.trip_ID],\n              ...row,\n              formData: row.activity_payload.form_data,\n              activityType: row.activity_type,\n              activitySubtype: row.activity_subtype,\n              geometry: row.activity_payload.geometry,\n              photos\n            })\n          };\n          countActivities++;\n        }\n\n        if (row.point_of_interest_id) {\n          upserts = {\n            ...upserts,\n            ['POI' + row.point_of_interest_id]: (existingDoc: any) => ({\n              ...existingDoc,\n              _id: 'POI' + row.point_of_interest_id,\n              docType: DocType.REFERENCE_POINT_OF_INTEREST,\n              trip_IDs:\n                existingDoc && existingDoc.trip_IDs ? [...existingDoc.trip_IDs, props.trip_ID] : [props.trip_ID],\n              ...row,\n              formData: row.point_of_interest_payload.form_data,\n              pointOfInterestType: row.point_of_interest_type,\n              pointOfInterestSubtype: row.point_of_interest_subtype,\n              geometry: [...row.point_of_interest_payload.geometry],\n              photos\n            })\n          };\n          countPois++;\n        }\n      }\n      try {\n        await bulkUpsert(upserts);\n      } catch (error) {\n        notifyError(databaseContext, 'Error with inserting Metabase results into database: ' + error);\n      }\n    }\n\n    notifySuccess(\n      databaseContext,\n      'Cached ' +\n        (countActivities ? countActivities + ' activities' : '') +\n        (countActivities && countPois ? ' and ' : '') +\n        (countPois ? countPois + ' points of interest' : '') +\n        (countActivities || countPois ? ' from Metabase.' : '0 Metabase results.')\n    );\n  };\n\n  const deleteTripAndFetch = async () => {\n    //wipe activities associated to that trip here:\n    const deleteOldTrip = () => {};\n    //todo:\n    deleteOldTrip();\n\n    //fetch what is selected here:\n    await setFetching(true);\n    Promise.all([fetchActivities(), fetchPointsOfInterest(), fetchMetabaseQueries()])\n      .finally(() => setFetching(false))\n      .catch((error) => {\n        setFetching(false);\n        notifyError(databaseContext, 'Error when fetching from network: ' + error);\n      });\n  };\n\n  return (\n    <>\n      <Button variant=\"contained\" color=\"primary\" disabled={fetching} onClick={deleteTripAndFetch}>\n        {fetching ? <Spinner /> : 'Cache Trip For Offline'}\n      </Button>\n    </>\n  );\n};\n\nexport default TripDataControls;\n","import { Input, makeStyles } from '@material-ui/core';\nimport Spinner from 'components/spinner/Spinner';\nimport { DatabaseChangesContext } from 'contexts/DatabaseChangesContext';\nimport { DatabaseContext } from 'contexts/DatabaseContext';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useCallback } from 'react';\n\nconst useStyles = makeStyles((theme) => ({\n  status: {}\n}));\n\nexport interface ITripNamer {\n  trip_ID: string;\n}\n\nexport const TripNamer: React.FC<ITripNamer> = (props) => {\n  const databaseContext = useContext(DatabaseContext);\n  const [name, setName] = useState(null);\n  const [docs, setDocs] = useState(null);\n\n  const getNameFromTrip = useCallback(async () => {\n    let docs = await databaseContext.database.find({\n      selector: {\n        _id: props.trip_ID\n      }\n    });\n    if (docs.docs.length > 0) {\n      let tripDoc = docs.docs[0];\n      setDocs(tripDoc);\n      if (tripDoc.name != name) {\n        setName(tripDoc.name);\n      }\n    }\n  }, [databaseContext.database]);\n\n  const saveInput = async (newName) => {\n    await databaseContext.database.upsert(props.trip_ID, (tripDoc) => {\n      return { ...tripDoc, name: newName, persistenceStep: 'naming trip' };\n    });\n  };\n\n  // initial fetch\n  useEffect(() => {\n    getNameFromTrip();\n  }, [name]);\n\n  useStyles();\n\n  return (\n    <>\n      {docs ? (\n        <Input\n          defaultValue={name}\n          onBlur={(event) => {\n            saveInput(event.target.value);\n          }}\n          color=\"primary\"\n        />\n      ) : (\n        <Spinner />\n      )}\n    </>\n  );\n};\n\nexport default TripNamer;\n","import { DocType } from 'constants/database';\nimport { notifyError, notifySuccess } from 'utils/NotificationUtils';\n\nexport const confirmDeleteTrip = (trip_ID, tripName) => {\n  if (confirm('You sure you want to do this?')) { // eslint-disable-line no-restricted-globals\n    return true;\n  }\n  return false;\n};\n\nexport const deleteTripRecords = async (databaseContext, trip_ID) => {\n  try {\n    // get ids and trip_id array of all records of certain doctypes (having trip_id array)\n    if (!databaseContext) {\n    }\n    console.log('trip id to delete ' + trip_ID);\n    let docs = await databaseContext.database.find({\n      selector: {\n        $and: [\n          {\n            docType: {\n              $in: [DocType.REFERENCE_ACTIVITY, DocType.POINT_OF_INTEREST, DocType.REFERENCE_POINT_OF_INTEREST]\n            }\n          },\n          { trip_IDs: { $elemMatch: { $eq: trip_ID.toString() } } }\n        ]\n      },\n      use_index: 'tripIDIndex'\n    });\n    console.log(docs.docs);\n\n    let docsToDelete = [];\n    let docsToUpdate = [];\n\n    // sort into docs that have other trips and those we can delete\n    docs.docs.map((doc) => {\n      let isDocToDelete = true;\n      doc.trip_IDs.map((id) => {\n        if (id !== trip_ID.toString()) {\n          isDocToDelete = false;\n        }\n      });\n      if (isDocToDelete) {\n        docsToDelete.push({ ...doc, _deleted: true });\n      } else {\n        docsToUpdate.push(doc);\n      }\n    });\n\n    //bulk delete\n    databaseContext.database.bulkDocs(docsToDelete);\n\n    //wipe trip id off overlapping records\n    docsToUpdate.map((doc) => {\n      let newTripIDs = [];\n      doc.trip_IDs.map((id) => {\n        if (id !== trip_ID.toString()) {\n          newTripIDs.push(id.toString());\n        }\n      });\n      databaseContext.database.upsert(doc._id, (existingDoc) => {\n        return {\n          ...existingDoc,\n          trip_IDs: [...newTripIDs]\n        };\n      });\n    });\n\n    notifySuccess(\n      databaseContext,\n      'Wiped ' +\n        docsToDelete.length +\n        ' records from trip.  ' +\n        docsToUpdate.length +\n        ' were not removed because they belong to another trip'\n    );\n    // sort into records to update and those to delete\n    // update records\n    // delete records\n  } catch (error) {\n    notifyError(databaseContext, 'Ran into a problem deleting trip records:' + error);\n    console.dir(error);\n  }\n};\n","import {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Box,\n  Button,\n  Container,\n  Grid,\n  IconButton,\n  makeStyles,\n  Paper,\n  Tooltip,\n  Typography\n} from '@material-ui/core';\nimport { DeleteForever, ExpandMore, Rowing } from '@material-ui/icons';\nimport ActivityDataFilter from 'components/activities-search-controls/ActivitiesFilter';\nimport MetabaseSearch from 'components/search/MetabaseSearch';\nimport ManageDatabaseComponent from 'components/database/ManageDatabaseComponent';\nimport KMLUpload from 'components/map-buddy-components/KMLUpload';\nimport MapContainer from 'components/map/MapContainer';\nimport PointOfInterestDataFilter from 'components/point-of-interest-search/PointOfInterestFilter';\nimport TripDataControls from 'components/trip/TripDataControls';\nimport { DatabaseContext } from 'contexts/DatabaseContext';\nimport { Feature } from 'geojson';\nimport React, { useContext, useEffect, useMemo, useState } from 'react';\nimport { MapContextMenuData } from '../map/MapContextMenu';\nimport HelpIcon from '@material-ui/icons/Help';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport TripStepStatus, { ITripStepStatus, TripStatusCode } from 'components/trip/TripStepStatus';\nimport RecordTable from 'components/common/RecordTable';\nimport { DocType } from 'constants/database';\nimport { interactiveGeoInputData } from 'components/map/GeoMeta';\nimport TripNamer from 'components/trip/TripNamer';\nimport { DatabaseChangesContext } from 'contexts/DatabaseChangesContext';\nimport { useCallback } from 'react';\nimport Spinner from 'components/spinner/Spinner';\nimport { confirmDeleteTrip, deleteTripRecords } from './PlanPageHelpers';\n\ninterface IPlanPageProps {\n  classes?: any;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  accordionSummary: {\n    padding: theme.spacing(2),\n    //todo more spacing, above doesnt work\n    textAlign: 'center'\n  },\n  tripList: {\n    width: '100%'\n  },\n  tripAccordionGridItem: {\n    textAlign: 'left'\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary\n  },\n  map: {\n    height: '500px',\n    width: '100%',\n    zIndex: 0\n  },\n  layerPicker: {\n    height: '100%',\n    width: '100%'\n  },\n  activityRecordList: {\n    flexDirection: 'column'\n  },\n  pointOfInterestList: {\n    flexDirection: 'column'\n  },\n  activityRecordQueryParmsRow: {\n    width: '400px'\n  },\n  //TODO:  make colour of bar depend on how much is used (red = full/bad)\n  tripStorageUsageBar: {\n    height: '20px',\n    borderRadius: '20px'\n  },\n  totalStorageUsageBar: {\n    height: '20px',\n    borderRadius: '20px'\n  },\n  tripGrid: {\n    flexDirection: 'column',\n    [theme.breakpoints.down('sm')]: {\n      flexDirection: 'column'\n    }\n  },\n  tripAccordion: {\n    display: 'block'\n  }\n}));\n\nconst PlanPage: React.FC<IPlanPageProps> = (props) => {\n  const classes = useStyles();\n\n  const databaseContext = useContext(DatabaseContext);\n\n  const [geometry, setGeometry] = useState<Feature[]>([]);\n  const [interactiveGeometry, setInteractiveGeometry] = useState<interactiveGeoInputData[]>(null);\n  const [extent, setExtent] = useState(null);\n\n  const [workingTripID, setWorkingTripID] = useState(null);\n  const [newTripID, setNewTripID] = useState(null);\n  const [trips, setTrips] = useState([]);\n  const [tripsLoaded, setTripsLoaded] = useState(false);\n\n  const initialContextMenuState: MapContextMenuData = { isOpen: false, lat: 0, lng: 0 };\n  const [contextMenuState, setContextMenuState] = useState(initialContextMenuState);\n\n  /* commented out for sonar cloud, but this will be needed to close the context menu for this page:\n  const handleContextMenuClose = () => {\n    setContextMenuState({ ...contextMenuState, isOpen: false });\n  };\n  */\n\n  const getExtent = async () => {\n    let docs = await databaseContext.database.find({\n      selector: { docType: DocType.PLAN_PAGE_EXTENT },\n      use_index: 'docTypeIndex'\n    });\n    if (!docs || !docs.docs || !docs.docs.length) {\n      return;\n    }\n    if (!docs[0]) {\n      return;\n    }\n    if (docs[0].extent) {\n      setExtent(docs[0].extent);\n    }\n  };\n\n  const getTrips = async () => {\n    if (!databaseContext) {\n    }\n    // does not work:\n    let docs = await databaseContext.database.find({\n      selector: { docType: { $eq: DocType.TRIP } },\n      use_index: 'docTypeIndex'\n    });\n\n    if (docs?.docs?.length === 0) {\n      // to prevent endless loading spinner on 0 trips\n      console.log('got here');\n      setTripsLoaded(true);\n    }\n\n    let trips = [];\n    let geos = [];\n\n    docs?.docs?.map((doc) => {\n      trips.push({ trip_ID: doc.trip_ID, trip_name: doc.name, num_activities: 5, num_POI: 4 });\n      if (doc.geometry) {\n        geos.push({\n          recordDocID: doc._id,\n          recordDocType: doc.docType,\n          description: 'Uploaded spatial content:\\n ' + doc._id + '\\n',\n          geometry: doc.geometry,\n          color: 'orange',\n          onClickCallback: () => {},\n          popUpComponent: null\n        });\n      }\n    });\n\n    if (geos.length > 0) {\n      setInteractiveGeometry(geos);\n    }\n    setTrips(trips);\n  };\n\n  const helperGetMaxTripID = async () => {\n    if (!databaseContext) {\n      return;\n    }\n    let docs = await databaseContext.database.find({\n      selector: { trip_id: { $gte: null } },\n      sort: [{ trip_id: 'desc' }],\n      use_index: 'tripIDIndex',\n      limit: 1\n    });\n\n    if (!docs || !docs.docs || !docs.docs.length) {\n      return 0;\n    } else {\n      console.dir(docs.docs);\n      if (docs.docs[0].trip_id) {\n        return parseInt(docs.docs[0]._id);\n      } else {\n        return 0;\n      }\n    }\n  };\n\n  // initial fetch\n  useEffect(() => {\n    const initialLoad = async () => {\n      await getTrips();\n      await getExtent();\n      setTripsLoaded(true);\n    };\n    initialLoad();\n  }, [newTripID]);\n\n  // persist geometry changes\n  useEffect(() => {\n    if (!tripsLoaded) {\n      return;\n    }\n    if (!workingTripID) {\n      return;\n    }\n    if (geometry) {\n      databaseContext.database.upsert(workingTripID, (tripDoc) => {\n        return { ...tripDoc, geometry: geometry, persistenceStep: 'update geo' };\n      });\n    }\n  }, [geometry, tripsLoaded, databaseContext.database]);\n\n  // persist extent changes\n  useEffect(() => {\n    if (!tripsLoaded || !extent) {\n      return;\n    }\n    databaseContext.database.upsert('planPageExtent', (planPageExtentDoc) => {\n      return { ...planPageExtentDoc, docType: DocType.PLAN_PAGE_EXTENT, extent: extent };\n    });\n  }, [extent, tripsLoaded]);\n\n  const addTrip = async () => {\n    let newID = await helperGetMaxTripID();\n    newID += 1;\n    databaseContext.database.upsert(newID.toString(), (doc) => {\n      return {\n        ...doc,\n        trip_ID: newID.toString(),\n        trip_name: 'New Unnamed Trip',\n        num_activities: 0,\n        num_POI: 0,\n        docType: DocType.TRIP,\n        stepState: [\n          {}, //just here so indexes match up with step number\n          { status: TripStatusCode.initial, expanded: true },\n          { status: TripStatusCode.initial, expanded: false },\n          { status: TripStatusCode.initial, expanded: false },\n          { status: TripStatusCode.initial, expanded: false },\n          { status: TripStatusCode.initial, expanded: false },\n          { status: TripStatusCode.initial, expanded: false }\n        ]\n      };\n    });\n    setNewTripID(newID);\n  };\n\n  const SingleTrip: React.FC<any> = (props) => {\n    //todo: add trip_id to props and let trip manage db itself\n    const databaseContext = useContext(DatabaseContext);\n    const [stepState, setStepState] = useState(null);\n\n    const getStateFromTrip = useCallback(async () => {\n      if (!databaseContext.database) {\n        return;\n      }\n      let docs = await databaseContext.database.find({\n        selector: { docType: DocType.TRIP, trip_ID: props.trip_ID },\n        use_index: 'docTypeIndex'\n      });\n\n      if (docs.docs.length > 0) {\n        let tripDoc = docs.docs[0];\n        if (!tripDoc.stepState) {\n          return;\n        }\n        setStepState(tripDoc.stepState);\n      }\n    }, [databaseContext.database]);\n\n    const saveState = async (newState) => {\n      setStepState(newState);\n      await databaseContext.database.upsert(props.trip_ID, (tripDoc) => {\n        return { ...tripDoc, docType: DocType.TRIP, stepState: newState, persistenceStep: 'updating state' };\n      });\n    };\n\n    // initial fetch\n    useEffect(() => {\n      getStateFromTrip();\n      console.log('hook to get state');\n    }, [databaseContext]);\n\n    const helperCheckForGeo = () => {\n      if (geometry) {\n        return TripStatusCode.ready;\n      } else {\n        return stepState[1].status;\n      }\n    };\n\n    const helperCloseOtherAccordions = (expanded, stepNumber) => {\n      let newState: any = [...stepState];\n      for (let i = 1; i < stepState.length; i++) {\n        let expanded2 = i == stepNumber && expanded ? true : false;\n        newState[i] = { ...newState[i], expanded: expanded2 };\n      }\n      console.log('accordion helper');\n      saveState([...newState]);\n    };\n\n    //generic helper to mark step as done if there isn't a special purpose check\n    const helperStepDoneOrSkip = (stepNumber) => {\n      let newState: any = [...stepState];\n      for (let i = 1; i < stepState.length; i++) {\n        newState[i] = { ...newState[i], expanded: false };\n        if (i == stepNumber && i != 2) {\n          newState[i] = { ...newState[i], status: TripStatusCode.ready };\n        }\n      }\n      saveState([...newState]);\n    };\n\n    return useMemo(() => {\n      return (\n        <>\n          {stepState ? (\n            <Grid item md={12}>\n              <TripStep\n                title=\"Step 1: Name your trip\"\n                helpText=\"The 'spatial filter' to your search.  Put bounds around data you need to pack with you.\"\n                additionalText=\"other\"\n                expanded={stepState[1]?.expanded}\n                tripStepDetailsClassName={classes.activityRecordList}\n                stepStatus={stepState[1]?.status}\n                stepAccordionOnChange={(event, expanded) => {\n                  helperCloseOtherAccordions(expanded, 1);\n                }}\n                doneButtonCallBack={() => {\n                  helperStepDoneOrSkip(1);\n                }}>\n                <TripNamer trip_ID={props.trip_ID} />\n              </TripStep>\n              <TripStep\n                title=\"Step 2: Add a spatial boundary for your trip.\"\n                helpText=\"The 'spatial filter' to your search.  Put bounds around data you need to pack with you.\"\n                additionalText=\"other\"\n                expanded={stepState[2].expanded}\n                tripStepDetailsClassName={classes.activityRecordList}\n                stepStatus={helperCheckForGeo()}\n                stepAccordionOnChange={(event, expanded) => {\n                  helperCloseOtherAccordions(expanded, 2);\n                }}\n                doneButtonCallBack={() => {\n                  helperStepDoneOrSkip(2);\n                }}>\n                <Paper className={classes.paper}>\n                  <Typography variant=\"body1\">\n                    Draw a polygon or square on the map, or upload a KML containing 1 shape.\n                  </Typography>\n                  <KMLUpload />\n                </Paper>\n              </TripStep>\n              <TripStep\n                title=\"Step 3: Choose past field activity data.\"\n                helpText=\"This is where you can cache past activities (observations etc.) to the app.  If you want to search for records in a particular area, draw a polygon on the map.\"\n                additionalText=\"other\"\n                expanded={stepState[3].expanded}\n                tripStepDetailsClassName={classes.activityRecordList}\n                stepStatus={stepState[3].status}\n                stepAccordionOnChange={(event, expanded) => {\n                  helperCloseOtherAccordions(expanded, 3);\n                }}\n                doneButtonCallBack={() => {\n                  helperStepDoneOrSkip(3);\n                }}>\n                <ActivityDataFilter trip_ID={props.trip_ID} />\n              </TripStep>\n              <TripStep\n                title=\"Step 4: Choose data from other systems, (IAPP)\"\n                helpText=\"This is where you can cache IAPP sites, and later other points of interest.  If you want to search for records in a particular area, draw a polygon on the map.\"\n                additionalText=\"other\"\n                expanded={stepState[4].expanded}\n                tripStepDetailsClassName={classes.pointOfInterestList}\n                stepStatus={stepState[4].status}\n                stepAccordionOnChange={(event, expanded) => {\n                  helperCloseOtherAccordions(expanded, 4);\n                }}\n                doneButtonCallBack={() => {\n                  helperStepDoneOrSkip(4);\n                }}>\n                <PointOfInterestDataFilter trip_ID={props.trip_ID} />\n              </TripStep>\n              <TripStep\n                title=\"OPTIONAL: Get data from a Metabase Question\"\n                helpText=\"If you have a Metabase question that contains field activity ID's, you can load those records here.\"\n                additionalText=\"other\"\n                expanded={stepState[5].expanded}\n                tripStepDetailsClassName={classes.pointOfInterestList}\n                stepStatus={stepState[5].status}\n                stepAccordionOnChange={(event, expanded) => {\n                  helperCloseOtherAccordions(expanded, 5);\n                }}\n                doneButtonCallBack={() => {\n                  helperStepDoneOrSkip(5);\n                }}>\n                <MetabaseSearch />\n              </TripStep>\n              <TripStep\n                title=\"Last Step: Cache, Refresh, or Delete data for Trip \"\n                helpText=\"Cache the data and map data for the region you have selected, or refresh it, or delete.\"\n                additionalText=\"other\"\n                expanded={stepState[6].expanded}\n                tripStepDetailsClassName={classes.pointOfInterestList}\n                stepStatus={stepState[6].status}\n                stepAccordionOnChange={(event, expanded) => {\n                  helperCloseOtherAccordions(expanded, 6);\n                }}\n                doneButtonCallBack={() => {\n                  helperStepDoneOrSkip(6);\n                }}>\n                <TripDataControls trip_ID={props.trip_ID} />\n              </TripStep>\n            </Grid>\n          ) : (\n            <>\n              test\n              <Spinner />\n            </>\n          )}\n        </>\n      );\n    }, [JSON.stringify(stepState)]);\n  };\n\n  interface ITripStep {\n    expanded: boolean;\n    title: string;\n    helpText: string;\n    additionalText: string;\n    tripStepDetailsClassName: string;\n    stepStatus: TripStatusCode;\n    stepAccordionOnChange?: (event, expanded) => void;\n    doneButtonCallBack?: () => void;\n  }\n\n  const TripStep: React.FC<ITripStep> = (props) => {\n    return (\n      <Accordion defaultExpanded={props.expanded} expanded={props.expanded} onChange={props.stepAccordionOnChange}>\n        <AccordionSummary\n          className={classes.accordionSummary}\n          expandIcon={<ExpandMore fontSize=\"large\" />}\n          aria-controls=\"panel-geo-record-picker-content\"\n          id=\"panel-geo-record-picker-header\">\n          <Grid alignContent=\"flex-start\" justify=\"space-between\" container>\n            <Grid xs={2} className={classes.tripAccordionGridItem} item>\n              <Tooltip color=\"primary\" title={props.helpText} arrow>\n                <HelpIcon fontSize=\"large\" />\n              </Tooltip>\n            </Grid>\n            <Grid xs={6} item>\n              <Typography align=\"left\" variant=\"h5\">\n                {props.title}\n              </Typography>\n            </Grid>\n            <Grid xs={2} item>\n              <TripStepStatus statusCode={props.stepStatus} />\n            </Grid>\n          </Grid>\n        </AccordionSummary>\n        <AccordionDetails className={props.tripStepDetailsClassName}>\n          {props.children}\n          <Box m={2} alignSelf=\"center\">\n            <Button variant=\"contained\" color=\"primary\" onClick={props.doneButtonCallBack}>\n              I'm done here.\n            </Button>\n          </Box>\n        </AccordionDetails>\n      </Accordion>\n    );\n  };\n  const mapMemo = useMemo(() => {\n    return (\n      <Paper className={classes.paper}>\n        <MapContainer\n          {...props}\n          classes={classes}\n          showDrawControls={true}\n          mapId={'TODO_this_needs_to_be_a_globally_uniqe_id_per_map_instance'}\n          geometryState={{ geometry, setGeometry }}\n          interactiveGeometryState={{ interactiveGeometry, setInteractiveGeometry }}\n          extentState={{ extent, setExtent }}\n          contextMenuState={{ state: contextMenuState, setContextMenuState }} // whether someone clicked, and click x & y\n        />\n      </Paper>\n    );\n  }, [geometry, interactiveGeometry, tripsLoaded]);\n\n  const trashTrip = async (trip_ID, tripName) => {\n    if (confirmDeleteTrip(trip_ID, tripName)) {\n      await deleteTripRecords(databaseContext, trip_ID);\n    }\n    await databaseContext.database.get(trip_ID.toString()).then((doc) => {\n      return databaseContext.database.remove(doc);\n    });\n    setNewTripID(Math.random());\n  };\n\n  return (\n    <Container className={props.classes.container}>\n      {mapMemo}\n      <Button onClick={addTrip} color=\"primary\" variant=\"contained\">\n        Add Trip\n      </Button>\n      {!tripsLoaded && (\n        <>\n          {' '}\n          spinner <Spinner />\n        </>\n      )}\n      {tripsLoaded && (\n        <RecordTable\n          className={classes.tripList}\n          tableName={'My Trips'}\n          keyField=\"trip_ID\" // defaults to just use 'id'\n          //       startingOrder=\"survey_date\" // defaults to first table column\n          headers={[\n            // each id is the key it will look for in each data row object\n            {\n              id: 'trip_ID',\n              title: 'Trip ID'\n            },\n            {\n              id: 'trip_name',\n              title: 'Trip Name'\n            },\n            {\n              id: 'num_activities',\n              title: '# of Activities Cached'\n            },\n            {\n              id: 'num_poi',\n              title: '# of POI Cached'\n            },\n            {\n              id: 'buttons'\n              // no title, for a blank header col\n            }\n          ]}\n          rows={\n            // array of data objects to render\n            !trips?.length\n              ? []\n              : trips.map((row) => ({\n                  ...row,\n                  // custom map data before it goes to table:\n                  buttons: (\n                    row // can render a custom cell like this, to e.g. render custom buttons.  Will build these controls into the table too though\n                  ) => (\n                    <IconButton>\n                      <DeleteForever\n                        onClick={() => {\n                          trashTrip(row.trip_ID, row.trip_name);\n                        }}\n                      />\n                    </IconButton>\n                  )\n                }))\n          }\n          dropdown={(row) => {\n            return <SingleTrip trip_ID={row.trip_ID} />;\n          }}\n\n          // expandable: defaults true\n          // startExpanded: default true\n          // startingOrder: default asc\n          // startingRowsPerPage: default 10;\n          // rowsPerPageOptions: default false (turns off the [5,10,15] per page select thing)\n        />\n      )}\n    </Container>\n  );\n};\n\nexport default PlanPage;\n","import { CircularProgress, Container, makeStyles } from '@material-ui/core';\nimport ActivityComponent from 'components/activity/ActivityComponent';\nimport { DatabaseChangesContext } from 'contexts/DatabaseChangesContext';\nimport { DatabaseContext } from 'contexts/DatabaseContext';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Feature } from 'geojson';\nimport { IPhoto } from 'components/photo/PhotoContainer';\nimport { MapContextMenuData } from '../map/MapContextMenu';\n\nconst useStyles = makeStyles((theme) => ({\n  heading: {\n    fontSize: theme.typography.pxToRem(18),\n    fontWeight: theme.typography.fontWeightRegular\n  },\n  mapContainer: {\n    height: '600px'\n  },\n  map: {\n    height: '100%',\n    width: '100%',\n    zIndex: 0\n  },\n  formContainer: {},\n  photoContainer: {}\n}));\n\ninterface IReferencesActivityPage {\n  classes?: any;\n}\n\nconst ReferencesActivityPage: React.FC<IReferencesActivityPage> = (props) => {\n  const urlParams = useParams();\n\n  const classes = useStyles();\n\n  const databaseContext = useContext(DatabaseContext);\n  const databaseChangesContext = useContext(DatabaseChangesContext);\n\n  const [geometry, setGeometry] = useState<Feature[]>([]);\n  const [extent, setExtent] = useState(null);\n\n  const initialContextMenuState: MapContextMenuData = { isOpen: false, lat: 0, lng: 0 };\n  //const [contextMenuState, setContextMenuState] = useState({ isOpen: false });\n  const [contextMenuState, setContextMenuState] = useState(initialContextMenuState);\n\n  /* commented out for sonar cloud, but this will be needed to close the context menu for this page:\n  const handleContextMenuClose = () => {\n    setContextMenuState({ ...contextMenuState, isOpen: false });\n  };\n  */\n  const [doc, setDoc] = useState(null);\n\n  const [photos, setPhotos] = useState<IPhoto[]>([]);\n\n  useEffect(() => {\n    const getActivityData = async () => {\n      const activityResults = await databaseContext.database.find({ selector: { _id: urlParams['id'] } });\n\n      // TODO these are cached activities, so do we really have an extent to set? Or are we just zooming to where the geometry is?\n      setGeometry(activityResults.docs[0].geometry);\n      setPhotos(activityResults.docs[0].photos);\n      setDoc(activityResults.docs[0]);\n    };\n\n    getActivityData();\n  }, [databaseChangesContext, databaseContext.database, urlParams]);\n\n  if (!doc) {\n    return <CircularProgress />;\n  }\n\n  return (\n    <Container className={props.classes.container}>\n      <ActivityComponent\n        classes={classes}\n        activity={doc}\n        mapId={doc._id}\n        photoState={{ photos, setPhotos }}\n        showDrawControls={false}\n        geometryState={{ geometry, setGeometry }}\n        extentState={{ extent, setExtent }}\n        contextMenuState={{ state: contextMenuState, setContextMenuState }} // whether someone clicked, and click x & y\n      />\n    </Container>\n  );\n};\n\nexport default ReferencesActivityPage;\n","import { List, makeStyles, Paper, Theme, Typography, Button, Box, Container } from '@material-ui/core';\nimport { Check } from '@material-ui/icons';\nimport { ActivitySubtype, ActivityType } from 'constants/activities';\nimport { DocType } from 'constants/database';\nimport { DatabaseContext } from 'contexts/DatabaseContext';\nimport React, { useContext, useEffect, useState, useCallback, useMemo } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useInvasivesApi } from 'hooks/useInvasivesApi';\nimport { ICreateMetabaseQuery } from 'interfaces/useInvasivesApi-interfaces';\nimport { notifySuccess, notifyError } from 'utils/NotificationUtils';\nimport { addLinkedActivityToDB } from 'utils/addActivity';\nimport MapContainer, { getZIndex } from 'components/map/MapContainer';\nimport RecordTable from 'components/common/RecordTable';\nimport { Feature } from 'geojson';\nimport { MapContextMenuData } from 'features/home/map/MapContextMenu';\nimport booleanIntersects from '@turf/boolean-intersects';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  activitiesContent: {},\n  activityList: {},\n  activitiyListItem: {\n    display: 'flex',\n    flexDirection: 'row',\n    marginTop: '0.5rem',\n    marginBottom: '0.5rem',\n    border: '1px solid',\n    borderColor: theme.palette.grey[300],\n    borderRadius: '6px'\n  },\n  activityListItem_Grid: {\n    flexWrap: 'nowrap',\n    flexDirection: 'row',\n    [theme.breakpoints.down('sm')]: {\n      flexDirection: 'column'\n    }\n  },\n  activitiyListItem_Typography: {\n    [theme.breakpoints.down('sm')]: {\n      display: 'inline',\n      marginRight: '1rem'\n    }\n  },\n  formControl: {\n    minWidth: 180\n  },\n  map: {\n    height: 500,\n    width: '100%',\n    zIndex: 0\n  },\n  metabaseAddButton: {\n    marginLeft: 10,\n    marginRight: 10\n  }\n}));\n\n/**\n *\n * @param {ActivitySubtype} treatmentSubtype The treatment subtype for which to get the associated monitoring subtype\n */\nconst calculateMonitoringSubtypeByTreatmentSubtype = (treatmentSubtype: ActivitySubtype): ActivitySubtype => {\n  /*\n    Note: There is no explicit subtype for biological dispersal plant monitoring\n    If this needs to be present, it needs to be created and defined in API spec\n  */\n  let monitoringSubtype: ActivitySubtype;\n\n  if (treatmentSubtype.includes('ChemicalPlant')) {\n    monitoringSubtype = ActivitySubtype.Monitoring_ChemicalTerrestrialAquaticPlant;\n  } else if (treatmentSubtype.includes('MechanicalPlant')) {\n    monitoringSubtype = ActivitySubtype.Monitoring_MechanicalTerrestrialAquaticPlant;\n  } else if (treatmentSubtype.includes('BiologicalPlant')) {\n    monitoringSubtype = ActivitySubtype.Monitoring_BiologicalTerrestrialPlant;\n  } else {\n    monitoringSubtype = ActivitySubtype[`Monitoring_${treatmentSubtype.split('_')[2]}`];\n  }\n\n  return monitoringSubtype;\n};\n\nconst activityStandardMapping = (doc) => ({\n  ...doc,\n  ...doc?.formData?.activity_data,\n  ...doc?.formData?.activity_subtype_data,\n  activity_id: doc.activity_id, // NOTE: activity_subtype_data.activity_id is overwriting this incorrectly\n  jurisdiction_code: doc?.formData?.activity_data?.jurisdictions?.reduce(\n    (output, jurisdiction) => [...output, jurisdiction.jurisdiction_code, '(', jurisdiction.percent_covered + '%', ')'],\n    []\n  ),\n  created_timestamp: doc?.created_timestamp?.substring(0, 10),\n  latitude: parseFloat(doc?.formData?.activity_data?.latitude).toFixed(6),\n  longitude: parseFloat(doc?.formData?.activity_data?.longitude).toFixed(6)\n});\n\nconst getSelectedKeys = (rows, selected) =>\n  rows.filter((doc: any) => selected.includes(doc._id)).map((doc) => doc._id) || [];\n\nconst geoColors = {\n  Observation: '#0BD2F0',\n  Treatment: '#F99F04',\n  Monitoring: '#BCA0DC',\n  reference_point_of_interest: '#0BD2F0',\n  selected_record: '#9E1A1A'\n};\n\ninterface ICachedRecordsTable {\n  rows: Array<any>;\n  selected: Array<any>;\n  setSelected: any;\n  databaseContext?: any;\n}\n\nexport const ObservationsTable: React.FC<ICachedRecordsTable> = (props) => {\n  const history = useHistory();\n\n  const { selected, setSelected, rows } = props;\n  return useMemo(() => {\n    return (\n      <RecordTable\n        tableName=\"Observations\"\n        tableSchemaType={[\n          'Activity',\n          'Observation',\n          'Observation_PlantTerrestrial',\n          'Observation_PlantAquatic',\n          'ObservationPlantTerrestrialData',\n          'Jurisdictions'\n        ]}\n        startingOrderBy=\"activity_id\"\n        startingOrder=\"desc\"\n        enableSelection\n        selected={selected}\n        setSelected={setSelected}\n        headers={[\n          'activity_id',\n          {\n            id: 'activity_subtype',\n            valueMap: {\n              Activity_Observation_PlantTerrestrial: 'Terrestrial Plant',\n              Activity_Observation_PlantTerrestial: 'Terrestrial Plant', // TODO remove when our data isn't awful\n              Activity_Observation_PlantAquatic: 'Aquatic Plant'\n            }\n          },\n          {\n            id: 'created_timestamp',\n            title: 'Created Date'\n          },\n          'biogeoclimatic_zones',\n          {\n            id: 'elevation',\n            type: 'number'\n          },\n          {\n            id: 'flnro_districts',\n            title: 'FLNRO Districs'\n          },\n          'ownership',\n          'regional_districts',\n          'invasive_species_agency_code',\n          'jurisdiction_code',\n          {\n            id: 'latitude',\n            title: 'Latitude',\n            type: 'number'\n          },\n          {\n            id: 'longitude',\n            title: 'Longitude',\n            type: 'number'\n          },\n          {\n            id: 'reported_area',\n            title: 'Area (m\\u00B2)',\n            type: 'number'\n          },\n          'access_description',\n          'general_comment'\n        ]}\n        rows={rows}\n        actions={{\n          delete: {\n            enabled: false\n          },\n          create_treatment: {\n            key: 'create_treatment',\n            enabled: true,\n            action: (selectedRows) => {\n              const ids = selectedRows.map((row: any) => row['activity_id']);\n              history.push({\n                pathname: `/home/activity/treatment`,\n                search: '?observations=' + ids.join(','),\n                state: { observations: ids }\n              });\n            },\n            label: 'Create Treatment',\n            bulkAction: true,\n            rowAction: false,\n            displayInvalid: 'error',\n            invalidError: 'All selected activities must be of the same SubType to create a Treatment',\n            /*\n              Function to determine if all selected observation records are\n              of the same subtype. For example: Cannot create a treatment if you select a plant\n              and an animal observation, and most probably will not go treat a terrestrial\n              and aquatic observation in a single treatment as those are different areas\n            */\n            bulkCondition: (selectedRows) => selectedRows.every((a, _, [b]) => a.subtype === b.subtype)\n          }\n        }}\n      />\n    );\n  }, [rows?.length, selected?.length]);\n};\n\nexport const TreatmentsTable: React.FC<ICachedRecordsTable> = (props) => {\n  const history = useHistory();\n\n  const { selected, setSelected, rows, databaseContext } = props;\n  return useMemo(() => {\n    return (\n      <RecordTable\n        tableName=\"Treatments\"\n        tableSchemaType={[\n          'Activity',\n          'Treatment',\n          'Treatment_ChemicalPlant',\n          'Treatment_MechanicalPlant',\n          'Treatment_BiologicalPlant'\n        ]}\n        startingOrderBy=\"activity_id\"\n        startingOrder=\"desc\"\n        enableSelection\n        selected={selected}\n        setSelected={setSelected}\n        headers={[\n          'activity_id',\n          {\n            id: 'activity_subtype',\n            valueMap: {\n              Activity_Treatment_ChemicalPlant: 'Chemical Plant',\n              Activity_Treatment_MechanicalPlant: 'Mechanical Plant',\n              Activity_Treatment_BiologicalPlant: 'Biological Plant'\n            }\n          },\n          {\n            id: 'created_timestamp',\n            title: 'Created Date'\n          },\n          'invasive_plant_code',\n          'invasive_species_agency_code',\n          'chemical_method_code',\n          {\n            id: 'reported_area',\n            title: 'Area (m\\u00B2)'\n          },\n          {\n            id: 'latitude',\n            title: 'Latitude',\n            type: 'number'\n          },\n          {\n            id: 'longitude',\n            title: 'Longitude',\n            type: 'number'\n          },\n          'elevation'\n        ]}\n        rows={rows}\n        dropdown={(row) => (\n          <RecordTable\n            key={row._id}\n            startingOrderBy=\"activity_id\"\n            startingOrder=\"desc\"\n            tableSchemaType={[\n              'Activity',\n              'Treatment',\n              'Treatment_ChemicalPlant',\n              'Treatment_MechanicalPlant',\n              'Treatment_BiologicalPlant',\n              'Jurisdictions'\n            ]}\n            headers={[\n              'jurisdiction_code',\n              'biogeoclimatic_zones',\n              {\n                id: 'flnro_districts',\n                title: 'FLNRO Districts'\n              },\n              'ownership',\n              'regional_districts',\n              'access_description',\n              'general_comment'\n            ]}\n            rows={[row]}\n            pagination={false}\n          />\n        )}\n        actions={{\n          delete: {\n            enabled: false\n          },\n          create_monitoring: {\n            key: 'create_monitoring',\n            enabled: true,\n            label: 'Create Monitoring',\n            bulkAction: false,\n            rowAction: true,\n            displayInvalid: 'hidden',\n            rowCondition: (row) => row.activityType === 'Treatment',\n            action: async (selectedRows) => {\n              if (selectedRows.length !== 1)\n                // action is for creating a single monitoring from a given row\n                // NOTE: might want to extend this into a multi-row monitoring action later\n                return;\n              const activity = selectedRows[0];\n\n              const addedActivity = await addLinkedActivityToDB(\n                databaseContext,\n                ActivityType.Monitoring,\n                calculateMonitoringSubtypeByTreatmentSubtype(activity.activitySubtype),\n                activity\n              );\n              await databaseContext.database.upsert(DocType.APPSTATE, (appStateDoc: any) => {\n                return { ...appStateDoc, activeActivity: addedActivity._id };\n              });\n\n              history.push(`/home/activity`);\n            }\n          }\n        }}\n      />\n    );\n  }, [rows?.length, selected?.length]);\n};\n\nexport const MonitoringTable: React.FC<ICachedRecordsTable> = (props) => {\n  const { selected, setSelected, rows } = props;\n  return useMemo(() => {\n    return (\n      <RecordTable\n        tableName=\"Monitoring\"\n        tableSchemaType={[\n          'Activity',\n          'Monitoring',\n          'Monitoring_ChemicalTerrestrialAquaticPlant',\n          'Monitoring_MechanicalTerrestrialAquaticPlant',\n          'Monitoring_BiologicalTerrestrialPlant'\n        ]}\n        startingOrderBy=\"monitoring_id\"\n        startingOrder=\"desc\"\n        enableSelection\n        selected={selected}\n        setSelected={setSelected}\n        headers={[\n          'activity_id',\n          {\n            id: 'activity_subtype',\n            valueMap: {\n              Activity_Monitoring_ChemicalPlant: 'Chemical Plant',\n              Activity_Monitoring_MechanicalPlant: 'Mechanical Plant',\n              Activity_Monitoring_BiologicalPlant: 'Biological Plant'\n            }\n          },\n          {\n            id: 'created_timestamp',\n            title: 'Created Date'\n          },\n          'invasive_plant_code',\n          'invasive_species_agency_code',\n          {\n            id: 'reported_area',\n            title: 'Area (m\\u00B2)'\n          },\n          {\n            id: 'latitude',\n            title: 'Latitude',\n            type: 'number'\n          },\n          {\n            id: 'longitude',\n            title: 'Longitude',\n            type: 'number'\n          },\n          'elevation'\n        ]}\n        rows={rows}\n        actions={{\n          delete: {\n            enabled: false\n          }\n        }}\n      />\n    );\n  }, [rows?.length, selected?.length]);\n};\n\nexport const PointsOfInterestTable: React.FC<ICachedRecordsTable> = (props) => {\n  const { selected, setSelected, rows } = props;\n  return useMemo(() => {\n    return (\n      <RecordTable\n        tableName=\"Points of Interest\"\n        tableSchemaType={['Point_Of_Interest', 'IAPP_Site', 'Jurisdictions']}\n        startingOrderBy=\"site_id\"\n        startingOrder=\"desc\"\n        enableSelection\n        selected={selected}\n        setSelected={setSelected}\n        headers={[\n          {\n            id: 'site_id',\n            type: 'number'\n          },\n          {\n            id: 'created_date_on_device',\n            title: 'Created Date'\n          },\n          'jurisdiction_code',\n          'elevation',\n          'slope_code',\n          'aspect_code',\n          'soil_texture_code',\n          {\n            id: 'latitude',\n            title: 'Latitude',\n            type: 'number'\n          },\n          {\n            id: 'longitude',\n            title: 'Longitude',\n            type: 'number'\n          },\n          'access_description',\n          'general_comment'\n        ]}\n        rows={rows}\n        actions={{\n          delete: {\n            enabled: false\n          },\n          edit: {\n            enabled: false\n          }\n        }}\n      />\n    );\n  }, [rows?.length, selected?.length]);\n};\n\nconst CachedRecordsList: React.FC = (props) => {\n  const classes = useStyles();\n  const databaseContext = useContext(DatabaseContext);\n  const invasivesApi = useInvasivesApi();\n\n  const [geometry, setGeometry] = useState<Feature[]>([]);\n  const [interactiveGeometry, setInteractiveGeometry] = useState([]);\n  const [extent, setExtent] = useState(null);\n  const [stateDocs, setDocs] = useState<any[]>([]);\n  const docs = useMemo(() => stateDocs, [stateDocs?.length]);\n  const [loading, setLoading] = useState(true);\n  const [metabaseQuerySubmitted, setMetabaseQuerySubmitted] = useState(false);\n\n  const initialContextMenuState: MapContextMenuData = { isOpen: false, lat: 0, lng: 0 };\n  const [contextMenuState, setContextMenuState] = useState(initialContextMenuState);\n\n  /* Select or unselect a single doc */\n  const toggleDocSelected = useCallback((doc) => {\n    const toggleSelectedFunction = (key) => (prevSelected) => {\n      const wasPrevSelected = prevSelected.indexOf(key) !== -1;\n      const newSelected = wasPrevSelected ? prevSelected.filter((id) => id !== key) : [...prevSelected, key];\n      setInteractiveGeometry((prevGeos) => {\n        return prevGeos.map((geo) => {\n          if (geo._id === key) geo.color = wasPrevSelected ? geoColors[geo.recordType] : geoColors.selected_record;\n          return geo;\n        });\n      });\n      return newSelected;\n    };\n\n    if (doc.docType === 'reference_point_of_interest') setSelectedPOIs(toggleSelectedFunction(doc._id));\n    switch (doc.activityType) {\n      case 'Observation':\n        setSelectedObservations(toggleSelectedFunction(doc._id));\n        break;\n      case 'Treatment':\n        setSelectedTreatments(toggleSelectedFunction(doc._id));\n        break;\n      case 'Monitoring':\n        setSelectedMonitorings(toggleSelectedFunction(doc._id));\n        break;\n    }\n  }, []);\n\n  /*\n    Fetch activities from database and save them in state\n    Also, call a helper function to save map geometries\n  */\n  const updateRecordList = useCallback(async () => {\n    setLoading(true);\n    const result = await databaseContext.database.allDocs({ include_docs: true });\n    const newDocs = result?.rows\n      ?.map((doc) => doc.doc)\n      .filter(\n        (doc) => (doc.point_of_interest_id || doc.activity_id) && !doc.deleted_timestamp // reduncancy for safety\n      );\n    setDocs([...newDocs]);\n    const mapGeos = [];\n    newDocs.forEach((doc: any) => {\n      /*\n        What is displayed in the popup on click of a geo on the map\n      */\n      const ActivityPopup = (name: string) => {\n        return '<div>' + name + '</div>';\n      };\n      const description =\n        doc.docType === 'reference_point_of_interest'\n          ? `IAPP Point of Interest: ${doc.point_of_interest_id}`\n          : `${doc.activityType}: ${doc._id}}`;\n      mapGeos.push({\n        _id: doc._id,\n        recordDocID: doc._id,\n        recordType: doc.activityType || doc.docType,\n        recordSubtype: doc.activitySubtype,\n        geometry: doc.geometry,\n        color: geoColors[doc.activityType || doc.docType],\n        description: description,\n        popUpComponent: ActivityPopup,\n        zIndex: getZIndex(doc),\n        onClickCallback: () => {\n          toggleDocSelected(doc);\n        }\n      });\n    });\n    setInteractiveGeometry([...mapGeos]);\n    setLoading(false);\n  }, [toggleDocSelected]);\n\n  /*\n    On geometry change (user drawn), find out which activities are\n    selected on the map container. If geometry is deleted, reset all activities\n  */\n  useEffect(() => {\n    const docIdsWithinArea = [];\n    if (geometry?.length) {\n      interactiveGeometry.forEach((iGeo: any) => {\n        if (booleanIntersects(iGeo.geometry[0], geometry[0])) {\n          docIdsWithinArea.push(iGeo.recordDocID);\n        }\n      });\n      // Filter out records within a drawn geometry polygon on the map\n      const newDocs = docs.filter((doc: any) => docIdsWithinArea.some((docId: any) => docId === doc._id));\n      setDocs(newDocs);\n    } else {\n      updateRecordList();\n    }\n  }, [geometry?.length]);\n\n  const observations = useMemo(\n    () => docs.filter((doc: any) => doc.activityType === 'Observation').map(activityStandardMapping),\n    [docs]\n  );\n  const [selectedObservations, setSelectedObservations] = useState([]);\n\n  const treatments = useMemo(\n    () => docs.filter((doc: any) => doc.activityType === 'Treatment').map(activityStandardMapping),\n    [docs]\n  );\n  const [selectedTreatments, setSelectedTreatments] = useState([]);\n\n  const monitorings = useMemo(\n    () => docs.filter((doc: any) => doc.activityType === 'Monitoring').map(activityStandardMapping),\n    [docs]\n  );\n  const [selectedMonitorings, setSelectedMonitorings] = useState([]);\n\n  const pointsOfInterest = useMemo(() => {\n    return docs\n      .filter((doc: any) => doc.docType === 'reference_point_of_interest')\n      .map((doc) => ({\n        ...doc,\n        ...doc?.formData?.point_of_interest_data,\n        ...doc?.formData?.point_of_interest_type_data,\n        jurisdiction_code: doc?.formData?.surveys?.[0]?.jurisdictions?.reduce(\n          (output, jurisdiction) => [\n            ...output,\n            jurisdiction.jurisdiction_code,\n            '(',\n            (jurisdiction.percent_covered ? jurisdiction.percent_covered : 100) + '%',\n            ')'\n          ],\n          []\n        ),\n        latitude: parseFloat(doc?.point_of_interest_payload?.geometry[0]?.geometry?.coordinates[1]).toFixed(6),\n        longitude: parseFloat(doc?.point_of_interest_payload?.geometry[0]?.geometry?.coordinates[0]).toFixed(6)\n      }));\n  }, [docs]);\n  const [selectedPOIs, setSelectedPOIs] = useState([]);\n\n  const createMetabaseQuery = async (event, selectedActivities, selectedPoints) => {\n    await setMetabaseQuerySubmitted(true);\n    const queryCreate: ICreateMetabaseQuery = {\n      activity_ids: selectedActivities,\n      point_of_interest_ids: selectedPoints\n    };\n    try {\n      let response = await invasivesApi.createMetabaseQuery(queryCreate);\n      if (response?.activity_query_id && response?.activity_query_name)\n        notifySuccess(\n          databaseContext,\n          `Created a new Metabase Query, with name \"${response.activity_query_name}\" and ID ${response.activity_query_id}`\n        );\n      else throw response;\n    } catch (error) {\n      notifyError(\n        databaseContext,\n        'Unable to create new Metabase Query.  There may an issue with your connection to the Metabase API: ' + error\n      );\n      await setMetabaseQuerySubmitted(false);\n    }\n  };\n\n  useEffect(() => {\n    setMetabaseQuerySubmitted(false);\n  }, [selectedObservations.length, selectedTreatments.length, setSelectedMonitorings.length, selectedPOIs.length]);\n\n  const totalSelected =\n    selectedObservations.length + selectedTreatments.length + selectedMonitorings.length + selectedPOIs.length;\n\n  const setSelectedGeneralized = (setSelectedFunction) => (newSelected) => {\n    setSelectedFunction((prevSelected) => {\n      setInteractiveGeometry((prevGeos) =>\n        prevGeos.map((geo) => {\n          if (prevSelected.indexOf(geo._id) !== newSelected.indexOf(geo._id)) {\n            const isSelected = newSelected.indexOf(geo._id) !== -1;\n            geo.color = isSelected ? geoColors.selected_record : geoColors[geo.recordType];\n          }\n          return geo;\n        })\n      );\n      return newSelected;\n    });\n  };\n\n  return (\n    <Container className={classes.activitiesContent}>\n      <Box mb={3} display=\"flex\" justifyContent=\"space-between\">\n        <Typography variant=\"h4\">Cached Activities</Typography>\n        {docs.length > 0 && !loading && (\n          <Box display=\"flex\" justifyContent=\"space-between\">\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.metabaseAddButton}\n              disabled={!totalSelected || metabaseQuerySubmitted}\n              startIcon={totalSelected && metabaseQuerySubmitted ? <Check /> : undefined}\n              onClick={(event) =>\n                createMetabaseQuery(\n                  event,\n                  [...selectedObservations, ...selectedTreatments, ...selectedMonitorings],\n                  selectedPOIs\n                )\n              }>\n              Create Metabase Query\n            </Button>\n          </Box>\n        )}\n      </Box>\n      {docs.length > 0 && !loading && (\n        <Paper>\n          <MapContainer\n            classes={classes}\n            mapId=\"references_page_map_container\"\n            geometryState={{ geometry, setGeometry }}\n            interactiveGeometryState={{ interactiveGeometry, setInteractiveGeometry }}\n            extentState={{ extent, setExtent }}\n            showDrawControls={true}\n            contextMenuState={{ state: contextMenuState, setContextMenuState }}\n          />\n        </Paper>\n      )}\n      {loading && <Typography>Loading...</Typography>}\n      {!loading && !interactiveGeometry?.length && (\n        <Typography>\n          No cached records to display. Widen your selected area or fetch more on the Plan My Trip page.\n        </Typography>\n      )}\n      <br />\n      {interactiveGeometry.length > 0 && !loading && (\n        <List className={classes.activityList}>\n          <ObservationsTable\n            rows={observations}\n            selected={selectedObservations}\n            setSelected={setSelectedGeneralized(setSelectedObservations)}\n          />\n          <TreatmentsTable\n            rows={treatments}\n            selected={selectedTreatments}\n            setSelected={setSelectedGeneralized(setSelectedTreatments)}\n          />\n          <MonitoringTable\n            rows={monitorings}\n            selected={selectedMonitorings}\n            setSelected={setSelectedGeneralized(setSelectedMonitorings)}\n          />\n          <PointsOfInterestTable\n            rows={pointsOfInterest}\n            selected={selectedPOIs}\n            setSelected={setSelectedGeneralized(setSelectedPOIs)}\n            databaseContext={databaseContext}\n          />\n        </List>\n      )}\n    </Container>\n  );\n};\n\nexport default CachedRecordsList;\n","import { Container } from '@material-ui/core';\nimport CachedRecordsList from 'components/activities-list/CachedRecordsList';\nimport React from 'react';\n\ninterface IReferencesPagePage {\n  classes?: any;\n}\n\nconst ReferencesPage: React.FC<IReferencesPagePage> = (props) => {\n  return (\n    <Container className={props.classes.container}>\n      <CachedRecordsList />\n    </Container>\n  );\n};\n\nexport default ReferencesPage;\n","import { useLocation } from 'react-router';\nimport qs from 'qs';\n\n/**\n * Convenience wrapper for `useLocation` that parses `location.search` into an object of query string values.\n *\n * @return {*}\n */\nexport const useQuery = () => {\n  const location = useLocation();\n  return qs.parse(location.search.replace('?', '')) as any;\n};\n","import { ICreateOrUpdateActivity } from '../interfaces/useInvasivesApi-interfaces';\n\n/*\n  Function that retrieves an activity based on an activityId by making a call to the API\n*/\nexport async function getActivityByIdFromApi(invasivesApi: any, activityId: any) {\n  const response = await invasivesApi.getActivityById(activityId);\n\n  if (!response) {\n    // TODO error messaging\n    return;\n  }\n\n  return {\n    _id: response.activity_id,\n    activityId: response.activity_id,\n    dateCreated: response.created_timestamp,\n    activityType: response.activity_type,\n    activitySubtype: response.activity_subtype,\n    geometry: response.activity_payload.geometry,\n    formData: response.activity_payload.form_data,\n    photos:\n      (response.media &&\n        response.media.length &&\n        response.media.map((media: any) => ({\n          filepath: media.file_name,\n          dataUrl: media.encoded_file\n        }))) ||\n      []\n  };\n}\n\n/*\n  Function to retrieve an ICreateOrUpdateActivity activity object based on a given activity\n  and possibly custom formData\n*/\nexport function getICreateOrUpdateActivity(activity: any, formData?: any): ICreateOrUpdateActivity {\n  const activityDoc: ICreateOrUpdateActivity = {\n    activity_id: activity.activityId,\n    created_timestamp: activity.dateCreated,\n    activity_type: activity.activityType,\n    activity_subtype: activity.activitySubtype,\n    geometry: activity.geometry,\n    media: activity.photos.map((photo) => ({\n      file_name: photo.filepath,\n      encoded_file: photo.dataUrl\n    })),\n    form_data: formData || activity.formData\n  };\n\n  return activityDoc;\n}\n","import React, { useState, useEffect, useCallback, useContext } from 'react';\nimport { Accordion, CircularProgress, AccordionDetails, Box, Button, Container } from '@material-ui/core';\nimport { Save } from '@material-ui/icons';\nimport FormContainer from 'components/form/FormContainer';\nimport { generateActivityPayload } from 'utils/addActivity';\nimport { ActivityStatus, ActivityType, ActivitySubtype, FormValidationStatus } from 'constants/activities';\nimport { IActivity } from 'interfaces/activity-interfaces';\nimport { debounced } from 'utils/FunctionUtils';\nimport { useQuery } from 'hooks/useQuery';\nimport { getActivityByIdFromApi, getICreateOrUpdateActivity } from 'utils/getActivity';\nimport { useInvasivesApi } from 'hooks/useInvasivesApi';\nimport { notifySuccess, notifyError } from 'utils/NotificationUtils';\nimport { DatabaseContext } from 'contexts/DatabaseContext';\nimport {\n  populateHerbicideDilutionAndArea,\n  populateTransectLineAndPointData\n} from 'rjsf/business-rules/populateCalculatedFields';\nimport {\n  getCustomValidator,\n  getHerbicideApplicationRateValidator,\n  getJurisdictionPercentValidator\n} from 'rjsf/business-rules/customValidation';\n\ninterface IBulkEditActivitiesPage {\n  classes?: any;\n}\n\nconst BulkEditActivitiesPage: React.FC<IBulkEditActivitiesPage> = (props) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [activity, setActivity] = useState(null);\n  const invasivesApi = useInvasivesApi();\n  const databaseContext = useContext(DatabaseContext);\n  const queryParams = useQuery();\n\n  const [parentFormRef, setParentFormRef] = useState(null);\n\n  const activityIdsToEdit = queryParams.activities ? queryParams.activities.split(',') : [];\n\n  useEffect(() => {\n    /*\n      Identify the activity type and subtype from the activities selected for bulk edit\n      Generate an empty bulk edit version of the corresponding activity for editing purposes\n    */\n    const setupActivityDataToEdit = async () => {\n      const { activityType, activitySubtype } = await getActivityByIdFromApi(invasivesApi, activityIdsToEdit[0]);\n      const editActivityType = `${activityType}_BulkEdit` as ActivityType;\n      const editActivitySubtype = `${activitySubtype}_BulkEdit` as ActivitySubtype;\n      const doc: IActivity = generateActivityPayload({}, null, editActivityType, editActivitySubtype);\n\n      setActivity(doc);\n      setIsLoading(false);\n    };\n\n    setupActivityDataToEdit();\n  }, []);\n\n  /*\n    Function that runs if the form submit fails and has errors\n  */\n  const onFormSubmitError = () => {\n    notifyError(\n      databaseContext,\n      'Failed to edit activities. Please make sure your form contains no errors and try again.'\n    );\n  };\n\n  /**\n   * Save the form when it is submitted.\n   * Bulk edit the activities selected with the newly selected dropdown field values.\n   *\n   * @param {*} event the form submit event\n   */\n  const onFormSubmitSuccess = async (event: any) => {\n    await Promise.all(\n      activityIdsToEdit.map(async (activityId: any) => {\n        try {\n          const doc = await getActivityByIdFromApi(invasivesApi, activityId);\n\n          const updatedActivityFormData = {\n            ...doc.formData,\n            activity_data: { ...doc.formData.activity_data, ...event.formData.activity_data },\n            activity_type_data: { ...doc.formData.activity_type_data, ...event.formData.activity_type_data },\n            activity_subtype_data: { ...doc.formData.activity_subtype_data, ...event.formData.activity_subtype_data }\n          };\n\n          await invasivesApi.updateActivity(getICreateOrUpdateActivity(doc, updatedActivityFormData));\n          notifySuccess(databaseContext, `Successfully updated activity ${activityId}.`);\n        } catch (error) {\n          notifyError(databaseContext, `Failed to update activity ${activityId}.`);\n        }\n      })\n    );\n  };\n\n  /**\n   * Save the form whenever it changes.\n   *\n   * Note: debouncing will prevent this from running more than once per `100` milliseconds.\n   *\n   * @param {*} event the form change event\n   */\n  const onFormChange = useCallback(\n    debounced(100, (event: any) => {\n      let updatedActivitySubtypeData = populateHerbicideDilutionAndArea(event.formData.activity_subtype_data);\n      updatedActivitySubtypeData = populateTransectLineAndPointData(updatedActivitySubtypeData);\n\n      return setActivity({\n        ...activity,\n        formData: { ...event.formData, activity_subtype_data: updatedActivitySubtypeData },\n        status: ActivityStatus.EDITED,\n        dateUpdated: new Date(),\n        formStatus: FormValidationStatus.NOT_VALIDATED\n      });\n    }),\n    [activity]\n  );\n\n  if (isLoading) {\n    return <CircularProgress />;\n  }\n\n  return (\n    <Container className={props.classes.container}>\n      <Box mb={3}>\n        <Button variant=\"contained\" color=\"primary\" startIcon={<Save />} onClick={() => parentFormRef?.submit()}>\n          Bulk Edit Activities\n        </Button>\n      </Box>\n\n      <Accordion>\n        <AccordionDetails className={props.classes.formContainer}>\n          <FormContainer\n            activity={activity}\n            onFormChange={onFormChange}\n            onFormSubmitSuccess={onFormSubmitSuccess}\n            customValidation={getCustomValidator([\n              getHerbicideApplicationRateValidator(),\n              getJurisdictionPercentValidator()\n            ])}\n            setParentFormRef={setParentFormRef}\n            onFormSubmitError={onFormSubmitError}\n            hideCheckFormForErrors={true}\n          />\n        </AccordionDetails>\n      </Accordion>\n\n      <Box mt={3}>\n        <Button variant=\"contained\" color=\"primary\" startIcon={<Save />} onClick={() => parentFormRef?.submit()}>\n          Bulk Edit Activities\n        </Button>\n      </Box>\n    </Container>\n  );\n};\n\nexport default BulkEditActivitiesPage;\n","import { ActivityType, ActivitySubtype } from 'constants/activities';\nimport { PointOfInterestSubtype, PointOfInterestType } from 'constants/pointsOfInterest';\nimport { Feature } from 'geojson';\n\n/**\n * Activity search filter criteria.\n *\n * @export\n * @interface IActivitySearchCriteria\n */\nexport interface IActivitySearchCriteria {\n  /**\n   * The page of results to return. Starts at 0.\n   *\n   * Note: Most UI's start at page 1, but this filter starts at page 0, so adjust accordingly when converting between\n   * the two.\n   *\n   * @type {number}\n   * @memberof IActivitySearchCriteria\n   */\n  page?: number;\n  /**\n   * The number of results to return.\n   *@\n   * @type {number}\n   * @memberof IActivitySearchCriteria\n   */\n  limit?: number;\n  /**\n   * Column name to sort by.\n   *\n   * @type {string}\n   * @memberof IActivitySearchCriteria\n   */\n  sort_by?: string;\n  /**\n   * Direction to sort by.\n   *\n   * @type {SORT_DIRECTION}\n   * @memberof IActivitySearchCriteria\n   */\n  sort_direction?: SORT_DIRECTION;\n  /**\n   * Columns to return.\n   *\n   * @type {string[]}\n   * @memberof IActivitySearchCriteria\n   */\n  column_names?: string[];\n  /**\n   * Activity type filter.\n   *\n   * @type {string[]}\n   * @memberof IActivitySearchCriteria\n   */\n  activity_type?: string[];\n  /**\n   * Activity sub type filter.\n   *\n   * @type {string[]}\n   * @memberof IActivitySearchCriteria\n   */\n  activity_subtype?: string[];\n  /**\n   * Date start filter. Defaults time to start of day.\n   *\n   * @type {string} iso date string\n   * @memberof IActivitySearchCriteria\n   */\n  date_range_start?: string;\n  /**\n   * Date end filter. Defaults time to end of day.\n   *\n   * @type {string} iso date string\n   * @memberof IActivitySearchCriteria\n   */\n  date_range_end?: string;\n  /**\n   * Activity ids filter.\n   *\n   * @type {string[]}\n   * @memberof IActivitySearchCriteria\n   */\n  activity_ids?: string[];\n  /**\n   * GeoJSON feature (of type polygon) to search in.\n   *\n   * @type {Feature}\n   * @memberof IActivitySearchCriteria\n   */\n  search_feature?: Feature;\n}\n\n/**\n * Create or Update activity endpoint post body.\n *\n * @export\n * @interface ICreateOrUpdateActivity\n */\nexport interface ICreateOrUpdateActivity {\n  activity_id: string;\n  created_timestamp: string;\n  activity_type: ActivityType;\n  activity_subtype: ActivitySubtype;\n  geometry: Feature[];\n  media: IMedia[];\n  form_data: any;\n}\n\n/**\n * Media object.\n *\n * @export\n * @interface IMedia\n */\nexport interface IMedia {\n  media_date?: string;\n  description?: string;\n  file_name: string;\n  encoded_file: string;\n}\n\n/**\n * PointOfInterest search filter criteria.\n *\n * @export\n * @interface IPointOfInterestSearchCriteria\n */\nexport interface IPointOfInterestSearchCriteria {\n  /**\n   * The page of results to return. Starts at 0.\n   *\n   * @type {number}\n   * @memberof IPointOfInterestSearchCriteria\n   */\n  page?: number;\n  /**\n   * The number of results to return.\n   *@\n   * @type {number}\n   * @memberof IPointOfInterestSearchCriteria\n   */\n  limit?: number;\n  /**\n   * PointOfInterest type filter.\n   *\n   * @type {string}\n   * @memberof IPointOfInterestSearchCriteria\n   */\n  point_of_interest_type?: string;\n  /**\n   * PointOfInterest sub type filter.\n   *\n   * @type {string}\n   * @memberof IPointOfInterestSearchCriteria\n   */\n  point_of_interest_subtype?: string;\n  /**\n   * Date start filter. Defaults time to start of day.\n   *\n   * @type {Date}\n   * @memberof IPointOfInterestSearchCriteria\n   */\n  date_range_start?: Date;\n  /**\n   * Date end filter. Defaults time to end of day.\n   *\n   * @type {Date}\n   * @memberof IPointOfInterestSearchCriteria\n   */\n  date_range_end?: Date;\n  /**\n   * Point of Interest ids filter.\n   *\n   * @type {string[]}\n   * @memberof IPointOfInterestSearchCriteria\n   */\n  point_of_interest_ids?: string[];\n  /**\n   * GeoJSON feature (of type polygon) to search in.\n   *\n   * @type {Feature}\n   * @memberof IPointOfInterestSearchCriteria\n   */\n  search_feature?: Feature;\n}\n\n/**\n * MetabaseQuery search filter criteria.\n *\n * @export\n * @interface IMetabaseQuerySearchCriteria\n */\nexport interface IMetabaseQuerySearchCriteria {\n  /**\n   * The id of a corresponding Metabase Query to search for.\n   *\n   * @type {number}\n   * @memberof IMetabaseQuerySearchCriteria\n   */\n  metabaseQueryId?: number;\n  /**\n   * GeoJSON feature (of type polygon) to search in.\n   *\n   * @type {Feature}\n   * @memberof IMetabaseQuerySearchCriteria\n   */\n  search_feature?: Feature;\n}\n\n/**\n * Create Metabase Query post body\n *\n * @export\n * @interface ICreateMetabaseQuery\n */\nexport interface ICreateMetabaseQuery {\n  name?: string;\n  description?: string;\n  activity_ids?: string[];\n  point_of_interest_ids?: string[];\n}\n\n/**\n * Create point_of_interest endpoint post body.\n *\n * @export\n * @interface ICreatePointOfInterest\n */\nexport interface ICreatePointOfInterest {\n  point_of_interest_type: PointOfInterestType;\n  point_of_interest_subtype: PointOfInterestSubtype;\n  geometry: Feature[];\n  media: IMedia[];\n  form_data: any;\n}\n\n/**\n * Supported search sort directions.\n *\n * @export\n * @enum {number}\n */\nexport enum SORT_DIRECTION {\n  ASC = 'ASC',\n  DESC = 'DESC'\n}\n","import React from 'react';\nimport { Box, Step, StepLabel, Typography, Stepper } from '@material-ui/core';\n\ninterface IStepperComponentProps {\n  activeStep: number;\n  steps: any;\n  stepContent: string;\n}\n\nconst StepperComponent: React.FC<IStepperComponentProps> = (props) => {\n  const { activeStep, steps, stepContent } = props;\n\n  return (\n    <Box>\n      <Stepper activeStep={activeStep} orientation=\"horizontal\" style={{ backgroundColor: 'transparent' }}>\n        {steps.map((step) => (\n          <Step key={step}>\n            <StepLabel>\n              <Typography variant=\"h4\">{step}</Typography>\n            </StepLabel>\n          </Step>\n        ))}\n      </Stepper>\n\n      <Box mt={3}>\n        <Typography style={{ textAlign: 'center' }}>{stepContent}</Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport default StepperComponent;\n","import React, { useState, useEffect, useContext } from 'react';\nimport { Container, Box, MenuItem, Button, FormControl, InputLabel, Select, makeStyles } from '@material-ui/core';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport { useQuery } from 'hooks/useQuery';\nimport { ActivitySubtype, ActivityType } from 'constants/activities';\nimport { generateActivityPayload, addClonedActivityToDB, addLinkedActivityToDB } from 'utils/addActivity';\nimport { DatabaseContext } from 'contexts/DatabaseContext';\nimport ActivityPage from 'features/home/activity/ActivityPage';\nimport StepperComponent from 'components/activity/StepperComponent';\nimport { getActivityByIdFromApi } from 'utils/getActivity';\nimport { useInvasivesApi } from 'hooks/useInvasivesApi';\nimport moment from 'moment';\nimport { DocType } from 'constants/database';\nimport { useHistory } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n  heading: {\n    fontSize: theme.typography.pxToRem(18),\n    fontWeight: theme.typography.fontWeightRegular\n  },\n  mapContainer: {\n    height: 600\n  },\n  map: {\n    height: '100%',\n    width: '100%',\n    zIndex: 0\n  },\n  buttonMarginRight: {\n    marginRight: 20\n  }\n}));\n\ninterface ITreatmentCreationStepperPage {\n  classes?: any;\n}\n\n/*\n  Text for background info/steps to follow at each of the given workflow stages\n*/\nconst getStepContent = (step: number) => {\n  switch (step) {\n    case 0:\n      return 'Which treatment activity type would you like to create?';\n    case 1:\n      return 'Is this the first treatment of the year on the targeted invasive species?';\n    case 2:\n      return `Does the selected observation accurately represent the current size and shape\n              of the treatment area? If the area has expanded then please select No.`;\n    case 3:\n      return 'Please create an overarching observation.';\n    case 4:\n      return `Thank you for specifying information regarding your treatment activity.\n              You may proceed to creating your treatment now.`;\n  }\n};\n\nconst TreatmentCreationStepperPage: React.FC<ITreatmentCreationStepperPage> = (props) => {\n  const queryParams = useQuery();\n  const classes = useStyles();\n  const history = useHistory();\n  const invasivesApi = useInvasivesApi();\n  const databaseContext = useContext(DatabaseContext);\n\n  /*\n    This is temporarily defaulted to a plant treatment type because animal forms are not yet complete\n  */\n  const [treatmentSubtypeToCreate, setTreatmentSubtypeToCreate] = useState(ActivitySubtype.Treatment_ChemicalPlant);\n  const [activeStep, setActiveStep] = useState(0);\n  const [prevStep, setPrevStep] = useState(null);\n  const [observation, setObservation] = useState(null);\n  const [observationGeos, setObservationGeos] = useState([]);\n  const [observationSubtype, setObservationSubtype] = useState(null);\n  const [parentFormRef, setParentFormRef] = useState(null);\n  const [formHasErrors, setFormHasErrors] = useState(true);\n\n  // Define the steps of the workflow\n  const steps = [\n    'Specify Treatment Type',\n    'Specify Treatment Number',\n    'Confirm Treatment Area',\n    'Create Observation',\n    'Create Treatment'\n  ];\n\n  // Extract the selected observation ids\n  const selectedObservationIds = queryParams.observations ? queryParams.observations.split(',') : [];\n\n  /*\n    On initial render, get the activity data (primarily geometry information)\n    for each of the selected observations to display on map later\n\n    If only one observation is selected initially, set it as the active observation\n    because we enable users to not have to specify an overarching observation\n    when they have only selected one initially\n  */\n  useEffect(() => {\n    const getGeometriesOfSelectedObservations = async () => {\n      await Promise.all(\n        selectedObservationIds.map(async (oId: any) => {\n          const activity = await getActivityByIdFromApi(invasivesApi, oId);\n\n          if (selectedObservationIds.length === 1) {\n            setObservation(activity);\n          }\n\n          setObservationSubtype(activity.activitySubtype);\n          setObservationGeos((obsGeos: any) => obsGeos.concat(activity.geometry[activity.geometry.length - 1]));\n        })\n      );\n    };\n\n    getGeometriesOfSelectedObservations();\n  }, []);\n\n  /*\n    Anytime we change the active step of our workflow:\n      - If the previous step happens to now be the same as the active step, modify the previous step\n      - If the active step is step 3 and we don't have an observation record created for the user to\n        create as their overarching observation, generate it using the geometry info from the previously\n        selected observation records\n  */\n  useEffect(() => {\n    const createNewObservation = async () => {\n      const formData = {\n        activity_data: {\n          activity_date_time: moment(new Date()).format()\n        }\n      };\n\n      const activityPayload = generateActivityPayload(\n        formData,\n        observationGeos,\n        ActivityType.Observation,\n        observationSubtype\n      );\n\n      /*\n        Using the clone activity functionality to create a brand new activity\n        with geometry information prepopulated. Generate the payload above\n        and then just create a new activity\n        (even though it is not actually cloning an existing activity record)\n      */\n      const activity = await addClonedActivityToDB(databaseContext, activityPayload);\n\n      setObservation(activity);\n    };\n\n    if (activeStep === 3 && !observation) {\n      createNewObservation();\n    }\n\n    if (prevStep === activeStep) {\n      setPrevStep(activeStep - 1);\n    }\n  }, [activeStep]);\n\n  /*\n    When a treatment type is selected, store it in state for later use\n  */\n  const handleTreatmentSubtypeClick = async (event: any) => {\n    event.stopPropagation();\n\n    const dropdownValue = event.target.value === 0 ? ActivitySubtype.Treatment_ChemicalPlant : event.target.value;\n    setTreatmentSubtypeToCreate(dropdownValue);\n  };\n\n  /*\n    When we have completed the workflow and are ready to create the treatment record,\n    set the active activity to the treatment record we are going to be creating and navigate\n    to the treatment activity page\n  */\n  const setActiveActivityAndNavigate = async (doc: any) => {\n    await databaseContext.database.upsert(DocType.APPSTATE, (appStateDoc) => {\n      return { ...appStateDoc, activeActivity: doc._id };\n    });\n\n    history.push(`/home/activity`);\n  };\n\n  /*\n    Remove an activity from PouchDB, and also clear the local state of the observation activity\n    Typically used when user navigates away from the create observation step of the workflow\n    (in order to not create unused activity records)\n  */\n  const removeActivity = async (activity: PouchDB.Core.RemoveDocument) => {\n    const dbDoc = await databaseContext.database.get(activity._id);\n    await databaseContext.database.remove(dbDoc);\n\n    setObservation(null);\n  };\n\n  return (\n    <Container className={props.classes.container}>\n      <StepperComponent activeStep={activeStep} steps={steps} stepContent={getStepContent(activeStep)} />\n\n      <Box>\n        {activeStep === 0 && (\n          <Box justifyContent=\"center\" mt={5} display=\"flex\">\n            <FormControl variant=\"outlined\" className={classes.buttonMarginRight}>\n              <InputLabel>Create Treatment</InputLabel>\n              {observationSubtype?.includes('Plant') && (\n                <Select\n                  value={treatmentSubtypeToCreate}\n                  onClick={(e) => e.stopPropagation()}\n                  onChange={handleTreatmentSubtypeClick}\n                  label=\"Create Treatment\">\n                  <MenuItem value={ActivitySubtype.Treatment_ChemicalPlant} onClick={handleTreatmentSubtypeClick}>\n                    Chemical Plant\n                  </MenuItem>\n                  <MenuItem value={ActivitySubtype.Treatment_MechanicalPlant}>Mechanical Plant</MenuItem>\n                  <MenuItem value={ActivitySubtype.Treatment_BiologicalPlant}>Biological Plant</MenuItem>\n                </Select>\n              )}\n            </FormControl>\n            <Button\n              size=\"large\"\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => {\n                setPrevStep(activeStep);\n                setActiveStep(activeStep + 1);\n              }}>\n              Continue\n            </Button>\n          </Box>\n        )}\n\n        {activeStep === 1 && (\n          <Box mt={5} display=\"flex\" justifyContent=\"center\">\n            <Button\n              size=\"large\"\n              variant=\"contained\"\n              startIcon={<ArrowBackIcon />}\n              className={classes.buttonMarginRight}\n              onClick={() => setActiveStep(prevStep)}>\n              Back\n            </Button>\n            <Button\n              className={classes.buttonMarginRight}\n              size=\"large\"\n              variant=\"contained\"\n              onClick={() => {\n                setPrevStep(activeStep);\n                if (selectedObservationIds.length === 1) {\n                  setActiveStep(activeStep + 1);\n                } else {\n                  setActiveStep(activeStep + 2);\n                }\n              }}>\n              No\n            </Button>\n            <Button\n              size=\"large\"\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => {\n                setPrevStep(activeStep);\n                setActiveStep(activeStep + 2);\n              }}>\n              Yes\n            </Button>\n          </Box>\n        )}\n\n        {activeStep === 2 && (\n          <Box mt={5} display=\"flex\" justifyContent=\"center\">\n            <Button\n              size=\"large\"\n              variant=\"contained\"\n              startIcon={<ArrowBackIcon />}\n              className={classes.buttonMarginRight}\n              onClick={() => setActiveStep(prevStep)}>\n              Back\n            </Button>\n            <Button\n              className={classes.buttonMarginRight}\n              size=\"large\"\n              variant=\"contained\"\n              onClick={() => {\n                setPrevStep(activeStep);\n                setActiveStep(activeStep + 1);\n              }}>\n              No\n            </Button>\n            <Button\n              size=\"large\"\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => {\n                setPrevStep(activeStep);\n                setActiveStep(activeStep + 2);\n              }}>\n              Yes\n            </Button>\n          </Box>\n        )}\n\n        {activeStep === 3 && observation && (\n          <>\n            <ActivityPage\n              classes={classes}\n              activityId={observation._id}\n              setObservation={setObservation}\n              setFormHasErrors={setFormHasErrors}\n              setParentFormRef={setParentFormRef}\n            />\n            <Box mt={5} display=\"flex\" justifyContent=\"center\">\n              <Button\n                size=\"large\"\n                variant=\"contained\"\n                startIcon={<ArrowBackIcon />}\n                className={classes.buttonMarginRight}\n                onClick={() => {\n                  removeActivity(observation);\n                  setActiveStep(prevStep);\n                }}>\n                Back\n              </Button>\n              <Button\n                size=\"large\"\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => {\n                  if (formHasErrors) {\n                    parentFormRef?.submit();\n                  } else {\n                    setPrevStep(activeStep);\n                    setActiveStep(activeStep + 1);\n                  }\n                }}>\n                Continue\n              </Button>\n            </Box>\n          </>\n        )}\n\n        {activeStep === 4 && (\n          <Box mt={5} display=\"flex\" justifyContent=\"center\">\n            <Button\n              size=\"large\"\n              variant=\"contained\"\n              startIcon={<ArrowBackIcon />}\n              className={classes.buttonMarginRight}\n              onClick={() => setActiveStep(prevStep)}>\n              Back\n            </Button>\n            <Button\n              size=\"large\"\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={async () => {\n                const addedActivity = await addLinkedActivityToDB(\n                  databaseContext,\n                  ActivityType.Treatment,\n                  treatmentSubtypeToCreate,\n                  observation\n                );\n                setActiveActivityAndNavigate(addedActivity);\n              }}>\n              Create Treatment\n            </Button>\n          </Box>\n        )}\n      </Box>\n    </Container>\n  );\n};\n\nexport default TreatmentCreationStepperPage;\n","import React, { useState, useEffect, useContext } from 'react';\nimport { Container, Box, MenuItem, Button, FormControl, InputLabel, Select, makeStyles } from '@material-ui/core';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport { useQuery } from 'hooks/useQuery';\nimport { addLinkedActivityToDB } from 'utils/addActivity';\nimport { ActivityType, ActivitySubtype } from 'constants/activities';\nimport { DatabaseContext } from 'contexts/DatabaseContext';\nimport ActivityPage from 'features/home/activity/ActivityPage';\nimport StepperComponent from 'components/activity/StepperComponent';\nimport { DocType } from 'constants/database';\nimport { useHistory } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n  heading: {\n    fontSize: theme.typography.pxToRem(18),\n    fontWeight: theme.typography.fontWeightRegular\n  },\n  mapContainer: {\n    height: '600px'\n  },\n  map: {\n    height: '100%',\n    width: '100%',\n    zIndex: 0\n  }\n}));\n\ninterface IObservationCreationStepperPage {\n  classes?: any;\n}\n\n/*\n  Text for background info/steps to follow at each of the given workflow stages\n*/\nconst getStepContent = (step: number) => {\n  switch (step) {\n    case 0:\n      return 'Please create your observation.';\n    case 1:\n      return `Thank you for specifying information regarding your observation activity.\n              If you wish to you may create a treatment activity associated to this observation.`;\n  }\n};\n\nconst ObservationCreationStepperPage: React.FC<IObservationCreationStepperPage> = (props) => {\n  const classes = useStyles();\n  const queryParams = useQuery();\n  const history = useHistory();\n  const databaseContext = useContext(DatabaseContext);\n\n  /*\n    This is temporarily defaulted to a plant treatment type because animal forms are not yet complete\n  */\n  const [treatmentSubtypeToCreate, setTreatmentSubtypeToCreate] = useState(ActivitySubtype.Treatment_ChemicalPlant);\n  const [activeStep, setActiveStep] = useState(0);\n  const [observation, setObservation] = useState(null);\n  const [observationSubtype, setObservationSubtype] = useState(null);\n  const [parentFormRef, setParentFormRef] = useState(null);\n  const [formHasErrors, setFormHasErrors] = useState(true);\n\n  // Define the steps of the workflow\n  const steps = ['Create Observation', 'Create Optional Treatment'];\n\n  // Extract the selected observation id\n  const selectedObservationId = queryParams.observation;\n\n  /*\n    On intial render, get the observation record we are dealing with and store it in state\n  */\n  useEffect(() => {\n    const getObservation = async () => {\n      const activity = await databaseContext.database.get(selectedObservationId);\n\n      setObservationSubtype(activity.activitySubtype);\n      setObservation(activity);\n    };\n\n    if (!observation) {\n      getObservation();\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!formHasErrors) {\n      setActiveStep(activeStep + 1);\n    }\n  }, [formHasErrors]);\n\n  /*\n    When we have completed the workflow and wish to create the treatment record,\n    set the active activity to the treatment record we are going to be creating and navigate\n    to the treatment activity page\n  */\n  const setActiveActivityAndNavigate = async (doc: any) => {\n    await databaseContext.database.upsert(DocType.APPSTATE, (appStateDoc) => {\n      return { ...appStateDoc, activeActivity: doc._id };\n    });\n\n    history.push(`/home/activity`);\n  };\n\n  /*\n    When a treatment type is selected, store it in state for later use\n  */\n  const handleTreatmentSubtypeClick = async (event: any) => {\n    event.stopPropagation();\n\n    const dropdownValue = event.target.value === 0 ? ActivitySubtype.Treatment_ChemicalPlant : event.target.value;\n    setTreatmentSubtypeToCreate(dropdownValue);\n  };\n\n  return (\n    <Container className={props.classes.container}>\n      <StepperComponent activeStep={activeStep} steps={steps} stepContent={getStepContent(activeStep)} />\n\n      <Box>\n        {activeStep === 0 && observation && (\n          <>\n            <ActivityPage\n              classes={classes}\n              activityId={observation._id}\n              setObservation={setObservation}\n              setFormHasErrors={setFormHasErrors}\n              setParentFormRef={setParentFormRef}\n            />\n            <Box mt={5} display=\"flex\" justifyContent=\"center\">\n              <Button\n                size=\"large\"\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => {\n                  if (formHasErrors) {\n                    parentFormRef?.submit();\n                  } else {\n                    setActiveStep(activeStep + 1);\n                  }\n                }}>\n                Continue\n              </Button>\n            </Box>\n          </>\n        )}\n\n        {activeStep === 1 && (\n          <>\n            <Box mt={5} display=\"flex\" justifyContent=\"center\">\n              <FormControl variant=\"outlined\" style={{ marginRight: 20 }}>\n                <InputLabel>Create Treatment</InputLabel>\n                {observationSubtype?.includes('Plant') && (\n                  <Select\n                    value={treatmentSubtypeToCreate}\n                    onClick={(e) => e.stopPropagation()}\n                    onChange={handleTreatmentSubtypeClick}\n                    label=\"Create Treatment\">\n                    <MenuItem value={ActivitySubtype.Treatment_ChemicalPlant} onClick={handleTreatmentSubtypeClick}>\n                      Chemical Plant\n                    </MenuItem>\n                    <MenuItem value={ActivitySubtype.Treatment_MechanicalPlant}>Mechanical Plant</MenuItem>\n                    <MenuItem value={ActivitySubtype.Treatment_BiologicalPlant}>Biological Plant</MenuItem>\n                  </Select>\n                )}\n              </FormControl>\n            </Box>\n            <Box mt={5} display=\"flex\" justifyContent=\"center\">\n              <Button\n                size=\"large\"\n                variant=\"contained\"\n                startIcon={<ArrowBackIcon />}\n                style={{ marginRight: 20 }}\n                onClick={() => setActiveStep(activeStep - 1)}>\n                Back\n              </Button>\n              <Button\n                size=\"large\"\n                variant=\"contained\"\n                style={{ marginRight: 20 }}\n                onClick={() => history.push('/home/activities')}>\n                Skip\n              </Button>\n              <Button\n                size=\"large\"\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={async () => {\n                  const addedActivity = await addLinkedActivityToDB(\n                    databaseContext,\n                    ActivityType.Treatment,\n                    treatmentSubtypeToCreate,\n                    observation\n                  );\n                  setActiveActivityAndNavigate(addedActivity);\n                }}>\n                Create Associated Treatment\n              </Button>\n            </Box>\n          </>\n        )}\n      </Box>\n    </Container>\n  );\n};\n\nexport default ObservationCreationStepperPage;\n","import { Box, Button, CircularProgress, Container, makeStyles } from '@material-ui/core';\nimport { Save } from '@material-ui/icons';\nimport ActivityComponent from 'components/activity/ActivityComponent';\nimport { IPhoto } from 'components/photo/PhotoContainer';\nimport { ActivityStatus, FormValidationStatus } from 'constants/activities';\nimport { Feature } from 'geojson';\nimport { useInvasivesApi } from 'hooks/useInvasivesApi';\nimport React, { useCallback, useEffect, useState, useContext } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { debounced } from 'utils/FunctionUtils';\nimport { MapContextMenuData } from '../map/MapContextMenu';\nimport { notifySuccess, notifyError } from 'utils/NotificationUtils';\nimport { DatabaseContext } from 'contexts/DatabaseContext';\nimport {\n  populateHerbicideDilutionAndArea,\n  populateTransectLineAndPointData\n} from 'rjsf/business-rules/populateCalculatedFields';\nimport { calculateLatLng, calculateGeometryArea } from 'utils/geometryHelpers';\nimport {\n  getCustomValidator,\n  getAreaValidator,\n  getWindValidator,\n  getTemperatureValidator,\n  getHerbicideApplicationRateValidator,\n  getTransectOffsetDistanceValidator,\n  getJurisdictionPercentValidator,\n  getDuplicateInvasivePlantsValidator\n} from 'rjsf/business-rules/customValidation';\nimport { getActivityByIdFromApi, getICreateOrUpdateActivity } from 'utils/getActivity';\n\nconst useStyles = makeStyles((theme) => ({\n  heading: {\n    fontSize: theme.typography.pxToRem(18),\n    fontWeight: theme.typography.fontWeightRegular\n  },\n  mapContainer: {\n    height: '600px'\n  },\n  map: {\n    height: '100%',\n    width: '100%',\n    zIndex: 0\n  },\n  formContainer: {},\n  photoContainer: {}\n}));\n\ninterface ISearchActivityPage {\n  classes?: any;\n}\n\nconst SearchActivityPage: React.FC<ISearchActivityPage> = (props) => {\n  const urlParams = useParams();\n\n  const classes = useStyles();\n\n  const invasivesApi = useInvasivesApi();\n\n  const databaseContext = useContext(DatabaseContext);\n  const [isLoading, setIsLoading] = useState(true);\n  const [geometry, setGeometry] = useState<Feature[]>([]);\n  const [extent, setExtent] = useState(null);\n  const [contextMenuState, setContextMenuState] = useState<MapContextMenuData>({ isOpen: false, lat: 0, lng: 0 });\n  const [activity, setActivity] = useState(null);\n  const [photos, setPhotos] = useState<IPhoto[]>([]);\n  const [parentFormRef, setParentFormRef] = useState(null);\n\n  /**\n   * Save the geometry.\n   *\n   * @param {Feature} geoJSON The geometry in GeoJSON format\n   */\n  const saveGeometry = useCallback((geom: Feature[]) => {\n    setActivity((doc: any) => {\n      const { latitude, longitude } = calculateLatLng(geom) || {};\n\n      const formData = doc.formData;\n      const areaOfGeometry = calculateGeometryArea(geom);\n\n      const updatedFormData = {\n        ...formData,\n        activity_data: {\n          ...formData.activity_data,\n          latitude,\n          longitude,\n          reported_area: areaOfGeometry\n        }\n      };\n\n      return {\n        ...doc,\n        geometry: geom,\n        status: ActivityStatus.EDITED,\n        dateUpdated: new Date(),\n        formData: updatedFormData\n      };\n    });\n  }, []);\n\n  /**\n   * Save the photos.\n   *\n   * @param {IPhoto} photosArr An array of photo objects.\n   */\n  const savePhotos = useCallback((photosArr: IPhoto[]) => {\n    setActivity((doc: any) => {\n      return {\n        ...doc,\n        photos: photosArr,\n        dateUpdated: new Date()\n      };\n    });\n  }, []);\n\n  /*\n    Function that runs if the form submit fails and has errors\n  */\n  const onFormSubmitError = () => {\n    notifyError(\n      databaseContext,\n      'Failed to update activity. Please make sure your form contains no errors and try again.'\n    );\n  };\n\n  /**\n   * Save the form when it is submitted.\n   *\n   * Note: this runs after validation has run, and only if there were no errors.\n   *\n   * @param {*} event the form submit event\n   */\n  const onFormSubmitSuccess = async (event: any) => {\n    try {\n      await invasivesApi.updateActivity(getICreateOrUpdateActivity({ ...activity, formData: event.formData }));\n      notifySuccess(databaseContext, 'Successfully updated activity.');\n    } catch (error) {\n      notifyError(databaseContext, 'Failed to update activity.');\n    }\n  };\n\n  /**\n   * Save the form whenever it changes.\n   *\n   * Note: debouncing will prevent this from running more than once per `100` milliseconds.\n   *\n   * @param {*} event the form change event\n   */\n  const onFormChange = useCallback(\n    debounced(100, (event: any) => {\n      let updatedActivitySubtypeData = populateHerbicideDilutionAndArea(event.formData.activity_subtype_data);\n      updatedActivitySubtypeData = populateTransectLineAndPointData(updatedActivitySubtypeData);\n\n      return setActivity({\n        ...activity,\n        formData: { ...event.formData, activity_subtype_data: updatedActivitySubtypeData },\n        status: ActivityStatus.EDITED,\n        dateUpdated: new Date(),\n        formStatus: FormValidationStatus.NOT_VALIDATED\n      });\n    }),\n    [activity]\n  );\n\n  useEffect(() => {\n    const getActivityData = async () => {\n      const activityDoc = await getActivityByIdFromApi(invasivesApi, urlParams['id']);\n\n      // TODO these are search result activities (online only), so determine if we have an extent to set\n      setGeometry(activityDoc.geometry);\n      setPhotos(activityDoc.photos);\n      setActivity(activityDoc);\n\n      setIsLoading(false);\n    };\n\n    getActivityData();\n  }, []);\n\n  useEffect(() => {\n    if (isLoading) {\n      return;\n    }\n\n    saveGeometry(geometry);\n  }, [geometry, isLoading, saveGeometry]);\n\n  useEffect(() => {\n    if (isLoading) {\n      return;\n    }\n\n    savePhotos(photos);\n  }, [photos, isLoading, savePhotos]);\n\n  if (isLoading) {\n    return <CircularProgress />;\n  }\n\n  return (\n    <Container className={props.classes.container}>\n      <Box mb={3}>\n        <Button variant=\"contained\" color=\"primary\" startIcon={<Save />} onClick={() => parentFormRef?.submit()}>\n          Update Activity\n        </Button>\n      </Box>\n\n      <ActivityComponent\n        customValidation={getCustomValidator([\n          getAreaValidator(activity.activitySubtype),\n          getWindValidator(activity.activitySubtype),\n          getTemperatureValidator(activity.activitySubtype),\n          getDuplicateInvasivePlantsValidator(activity.activitySubtype),\n          getHerbicideApplicationRateValidator(),\n          getTransectOffsetDistanceValidator(),\n          getJurisdictionPercentValidator()\n        ])}\n        classes={classes}\n        activity={activity}\n        onFormChange={onFormChange}\n        onFormSubmitSuccess={onFormSubmitSuccess}\n        onFormSubmitError={onFormSubmitError}\n        photoState={{ photos, setPhotos }}\n        mapId={activity._id}\n        showDrawControls={false}\n        geometryState={{ geometry, setGeometry }}\n        extentState={{ extent, setExtent }}\n        contextMenuState={{ state: contextMenuState, setContextMenuState }}\n        setParentFormRef={setParentFormRef}\n        hideCheckFormForErrors={true}\n      />\n\n      <Box mt={3}>\n        <Button variant=\"contained\" color=\"primary\" startIcon={<Save />} onClick={() => parentFormRef?.submit()}>\n          Update Activity\n        </Button>\n      </Box>\n    </Container>\n  );\n};\n\nexport default SearchActivityPage;\n","import React, { useEffect, useState } from 'react';\nimport {\n  Container,\n  Box,\n  Typography,\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  Grid,\n  makeStyles,\n  Theme,\n  Divider,\n  Accordion,\n  AccordionDetails,\n  AccordionSummary\n} from '@material-ui/core';\nimport useKeycloakWrapper from 'hooks/useKeycloakWrapper';\nimport { useHistory } from 'react-router-dom';\nimport planTripGIF from '../../../gifs/Plan Page.gif';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  userInfoItemGrid: {\n    display: 'flex',\n    flexDirection: 'row',\n    [theme.breakpoints.down('sm')]: {\n      flexDirection: 'column'\n    }\n  },\n  cardListItemGrid: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    flexDirection: 'row',\n    [theme.breakpoints.down('sm')]: {\n      flexDirection: 'column'\n    }\n  },\n  cardWidth: {\n    '@media (min-device-width: 600px)': {\n      width: 600\n    },\n    marginBottom: '2em'\n  }\n}));\n\ninterface ILandingPage {\n  classes?: any;\n}\n\nconst LandingPage: React.FC<ILandingPage> = (props) => {\n  const keycloak = useKeycloakWrapper();\n  const classes = useStyles();\n  const history = useHistory();\n\n  const [userInfo, setUserInfo] = useState<any>(null);\n\n  useEffect(() => {\n    const loadUserInfo = async () => {\n      const user = await keycloak.obj?.loadUserInfo();\n      setUserInfo(user);\n    };\n\n    if (!window['cordova']) {\n      loadUserInfo();\n    }\n  }, [keycloak.obj]);\n\n  /*\n    Function to logout current user by wiping their keycloak access token\n  */\n  const logoutUser = () => {\n    keycloak.obj.logout();\n  };\n\n  /*\n    Generate reusable card component with info to guide users through the app\n  */\n  const getCardData = (heading: string, subheading: string, content: string, footerText: string, url: string) => {\n    return (\n      <Card className={classes.cardWidth}>\n        <CardContent>\n          <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n            {heading}\n          </Typography>\n          <Typography color=\"textSecondary\" gutterBottom>\n            {subheading}\n          </Typography>\n          <Typography variant=\"body2\" component=\"p\">\n            {content}\n            <Accordion>\n              <AccordionSummary>Expand for Demo</AccordionSummary>\n              <AccordionDetails>\n                <img src={planTripGIF} alt=\"loading...\" />\n              </AccordionDetails>\n            </Accordion>\n          </Typography>\n        </CardContent>\n        <CardActions>\n          <Button onClick={() => history.push(url)} size=\"small\">\n            {footerText}\n          </Button>\n        </CardActions>\n      </Card>\n    );\n  };\n\n  return (\n    <Container className={props.classes.container}>\n      <Box display=\"flex\" justifyContent=\"space-between\">\n        <Typography variant=\"h4\">Welcome to the InvasivesBC Application</Typography>\n        {userInfo && (\n          <Button variant=\"contained\" color=\"primary\" size=\"large\" onClick={logoutUser}>\n            Logout\n          </Button>\n        )}\n      </Box>\n\n      {userInfo && (\n        <Box mt={2}>\n          <Typography variant=\"h5\">User Information</Typography>\n          <br />\n          <Grid className={classes.userInfoItemGrid} container spacing={2}>\n            <Grid item md={2}>\n              <Box overflow=\"hidden\" textOverflow=\"ellipsis\">\n                <Typography>Name</Typography>\n                {userInfo.name}\n              </Box>\n            </Grid>\n            <Divider flexItem={true} orientation=\"vertical\" />\n            <Grid item md={2}>\n              <Box overflow=\"hidden\" textOverflow=\"ellipsis\">\n                <Typography>Email</Typography>\n                {userInfo.email}\n              </Box>\n            </Grid>\n            <Divider flexItem={true} orientation=\"vertical\" />\n            <Grid item md={2}>\n              <Box overflow=\"hidden\" textOverflow=\"ellipsis\">\n                <Typography>Username</Typography>\n                {userInfo.preferred_username}\n              </Box>\n            </Grid>\n          </Grid>\n        </Box>\n      )}\n\n      <Box mt={4}>\n        <Typography variant=\"h5\">What Would You Like To Do?</Typography>\n        <br />\n      </Box>\n\n      <Grid className={classes.cardListItemGrid}>\n        {getCardData(\n          'Plan a Trip/Fetch Cached Records',\n          'Points of Interest, Past Activity Records, Layers',\n          `Heading out into the field and wish to gather information regarding your\n           trip before going offline?`,\n          'Plan your trip now',\n          '/home/plan'\n        )}\n\n        {getCardData(\n          'Create a Local Activity',\n          'Observations, Transects, Biological Dispersals',\n          'In the field and wish to record an observation record or create a transect?',\n          'Create a local activity now',\n          '/home/activities'\n        )}\n      </Grid>\n\n      <Grid className={classes.cardListItemGrid}>\n        {getCardData(\n          'Search',\n          'Cached Observations, Treatments and Monitorings',\n          'Need to view previously created and cached activity records?',\n          'Search cached activities now',\n          '/home/search'\n        )}\n\n        {getCardData(\n          'Create Treatments and Monitorings',\n          'Treatments and Monitorings from Cached Activities',\n          `Need to create a treatment based off existing observation records,\n           or create a monitoring for an existing treatment?`,\n          'Create a treatment or monitoring now',\n          '/home/references'\n        )}\n      </Grid>\n\n      <Grid className={classes.cardListItemGrid}>\n        {getCardData(\n          'View Fetched Records on Map',\n          'IAPP Sites, Activities on Main Map',\n          'Want to see all the data you have fetched on a single map?',\n          'View the main map now',\n          '/home/map'\n        )}\n\n        {getCardData(\n          'Continue Creating an Activity',\n          'Pause and Resume Activity Creation',\n          'Had to take a break and come back to creating an activity?',\n          'Resume current activity creation now',\n          '/home/activity'\n        )}\n      </Grid>\n    </Container>\n  );\n};\n\nexport default LandingPage;\n","import {\n  Box,\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormHelperText,\n  FormLabel,\n  Grid,\n  TextField\n} from '@material-ui/core';\nimport React from 'react';\n\nexport interface ISearchFilterCriteria {\n  startDate?: string;\n  endDate?: string;\n  activityType?: string[];\n  speciesType?: string[];\n  habitatType?: string[];\n}\n\ninterface IFilterControlsContainer {\n  classes?: any;\n  isDisabled?: boolean;\n  searchFilterCriteriaState: {\n    searchFilterCriteria: ISearchFilterCriteria;\n    setSearchFilterCriteria: (searchFilterCriteria: ISearchFilterCriteria) => void;\n  };\n}\n\nconst FilterControlsContainer: React.FC<IFilterControlsContainer> = (props) => {\n  /**\n   * Handles changes to a filter that is an array of strings.\n   *\n   * @param {string} filterName name of the filter parameter\n   * @param {string} value value to add or remove from the filter array\n   * @param {boolean} checked true if the value should be added, false if it should be removed\n   */\n  const handleStringArrayFilterChange = (filterName: string, value: string, checked: boolean) => {\n    const index = props.searchFilterCriteriaState.searchFilterCriteria.activityType.indexOf(value);\n\n    let newSearchFilterCriteria = { ...props.searchFilterCriteriaState.searchFilterCriteria };\n\n    if (checked && index === -1) {\n      // add the value to the array\n      newSearchFilterCriteria[filterName].push(value);\n    } else if (!checked && index >= 0) {\n      // remove the value from the array\n      newSearchFilterCriteria[filterName].splice(index, 1);\n    }\n\n    props.searchFilterCriteriaState.setSearchFilterCriteria(newSearchFilterCriteria);\n  };\n\n  /**\n   * Handles changes to a filter that is a single string.\n   *\n   * @param {string} filterName name of the filter parameter\n   * @param {string} value value to set the filter to\n   */\n  const handleStringFilterChange = (filterName: string, value: string) => {\n    const newSearchFilterCriteria = { ...props.searchFilterCriteriaState.searchFilterCriteria, [filterName]: value };\n\n    props.searchFilterCriteriaState.setSearchFilterCriteria(newSearchFilterCriteria);\n  };\n\n  if (!props.searchFilterCriteriaState.searchFilterCriteria) {\n    return <></>;\n  }\n\n  return (\n    <>\n      <fieldset className={props.classes.fieldset}>\n        <Grid container spacing={4}>\n          <Grid item>\n            <FormControl>\n              <FormLabel component=\"legend\">Date Range</FormLabel>\n              <FormGroup row={true}>\n                <Box mr={3}>\n                  <TextField\n                    id=\"datepicker_start\"\n                    name=\"datepicker_start\"\n                    label=\"Start\"\n                    type=\"date\"\n                    value={props.searchFilterCriteriaState.searchFilterCriteria.startDate}\n                    margin=\"normal\"\n                    InputLabelProps={{\n                      shrink: true\n                    }}\n                    disabled={props.isDisabled}\n                    onChange={(event) => handleStringFilterChange('startDate', event.target.value)}\n                  />\n                </Box>\n                <Box>\n                  <TextField\n                    id=\"datepicker_end\"\n                    name=\"datepicker_end\"\n                    label=\"End\"\n                    type=\"date\"\n                    value={props.searchFilterCriteriaState.searchFilterCriteria.endDate}\n                    margin=\"normal\"\n                    InputLabelProps={{\n                      shrink: true\n                    }}\n                    disabled={props.isDisabled}\n                    onChange={(event) => handleStringFilterChange('endDate', event.target.value)}\n                  />\n                </Box>\n              </FormGroup>\n            </FormControl>\n          </Grid>\n        </Grid>\n      </fieldset>\n      <fieldset className={props.classes.fieldset}>\n        <Grid container spacing={4}>\n          <Grid item>\n            <FormControl component=\"fieldset\" disabled={props.isDisabled}>\n              <FormLabel component=\"legend\">Activity Type</FormLabel>\n              <FormGroup>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"checkbox_observation\"\n                      checked={props.searchFilterCriteriaState.searchFilterCriteria.activityType.includes(\n                        'Observation'\n                      )}\n                      onChange={(event) =>\n                        handleStringArrayFilterChange('activityType', 'Observation', event.target.checked)\n                      }\n                    />\n                  }\n                  label=\"Observation\"\n                />\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"checkbox_treatment\"\n                      checked={props.searchFilterCriteriaState.searchFilterCriteria.activityType.includes('Treatment')}\n                      onChange={(event) =>\n                        handleStringArrayFilterChange('activityType', 'Treatment', event.target.checked)\n                      }\n                    />\n                  }\n                  label=\"Treatment\"\n                />\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"checkbox_monitoring\"\n                      checked={props.searchFilterCriteriaState.searchFilterCriteria.activityType.includes('Monitoring')}\n                      onChange={(event) =>\n                        handleStringArrayFilterChange('activityType', 'Monitoring', event.target.checked)\n                      }\n                    />\n                  }\n                  label=\"Monitoring\"\n                />\n              </FormGroup>\n              <FormHelperText>Selecting none searches all</FormHelperText>\n            </FormControl>\n          </Grid>\n        </Grid>\n      </fieldset>\n    </>\n  );\n};\n\nexport default FilterControlsContainer;\n","export interface IPaginationSettings {\n  itemsPerPage?: number;\n  totalPages?: number;\n  currentPage?: number;\n  totalItems?: number;\n}\n\nexport const calculateTotalPages = (totalItems: number, itemsPerPage: number) => {\n  return Math.max(Math.ceil(totalItems / itemsPerPage), 1);\n};\n\n/**\n * Creates the pagination control label.\n *\n * @param {number} currentPage the current page. starts at 1.\n * @param {number} itemsPerPage how many records to display per page.\n * @param {number} totalItems number of total items that would be returned by the search, if there were no\n * itemsPerPage `limit` constraint.\n * @return {string} pagination control label\n */\nexport const calculatePaginationLabel = (currentPage: number, itemsPerPage: number, totalItems: number): string => {\n  if (!currentPage || !itemsPerPage || !totalItems) {\n    return '';\n  }\n\n  const low = Math.max((currentPage - 1) * itemsPerPage + 1, 1);\n  const high = Math.min(totalItems, currentPage * itemsPerPage);\n  return `Displaying ${low} - ${high} of ${totalItems} results`;\n};\n","import { FormControl, FormLabel, Grid, Select } from '@material-ui/core';\nimport { Pagination, ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\nimport { calculatePaginationLabel } from 'components/search/paginationUtils';\nimport React from 'react';\n\nexport interface IPaginationControlsContainer {\n  classes?: any;\n  currentPageState: { currentPage: number; setCurrentPage: (currentPage: number) => void };\n  itemsPerPageState: { itemsPerPage: number; setItemsPerPage: (itemsPerPage: number) => void };\n  totalItems: number;\n  totalPages: number;\n  sortByValues: { [key: string]: string };\n  sortByState: { sortBy: string; setSortBy: (sortBy: string) => void };\n  isDisabled?: boolean;\n}\n\nconst PaginationControlsContainer: React.FC<IPaginationControlsContainer> = (props) => {\n  const handleLimitChange = (value: number) => {\n    if (!value) {\n      return;\n    }\n\n    props.itemsPerPageState.setItemsPerPage(value);\n  };\n\n  const handlePaginationChange = (value: number) => {\n    if (!value) {\n      return;\n    }\n\n    props.currentPageState.setCurrentPage(value);\n  };\n\n  const handleSortByChange = (value: string) => {\n    if (!value) {\n      return;\n    }\n\n    props.sortByState.setSortBy(value);\n  };\n\n  if (!props.currentPageState.currentPage || !props.itemsPerPageState.itemsPerPage) {\n    return <></>;\n  }\n\n  return (\n    <fieldset className={props.classes.fieldset}>\n      <Grid container spacing={4} justify={'space-between'}>\n        <Grid item>\n          <FormControl component=\"fieldset\" className={props.classes.formControl} disabled={props.isDisabled}>\n            <FormLabel component=\"legend\" className={props.classes.formLabel}>\n              # of results to display\n            </FormLabel>\n            <ToggleButtonGroup\n              exclusive\n              value={props.itemsPerPageState.itemsPerPage}\n              onChange={(event: any, value: number) => handleLimitChange(value)}\n              aria-label=\"# of results to display\">\n              <ToggleButton value={10} disabled={props.isDisabled}>\n                10\n              </ToggleButton>\n              <ToggleButton value={25} disabled={props.isDisabled}>\n                25\n              </ToggleButton>\n              <ToggleButton value={50} disabled={props.isDisabled}>\n                50\n              </ToggleButton>\n              <ToggleButton value={100} disabled={props.isDisabled}>\n                100\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </FormControl>\n        </Grid>\n        <Grid item>\n          <FormControl className={props.classes.formControl} disabled={props.isDisabled}>\n            <FormLabel component=\"legend\" className={props.classes.formLabel}>\n              Sort By\n            </FormLabel>\n            <Select\n              native\n              value={props.sortByState.sortBy}\n              onChange={(event: any) => handleSortByChange(event.target.value)}\n              inputProps={{\n                name: 'sortBy',\n                id: 'sortBy'\n              }}>\n              {Object.entries(props.sortByValues).map((entry) => (\n                <option value={entry[0]} key={entry[0]}>\n                  {entry[1]}\n                </option>\n              ))}\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item>\n          <FormControl component=\"fieldset\" className={props.classes.formControl} disabled={props.isDisabled}>\n            <FormLabel component=\"legend\" className={props.classes.formLabel}>\n              {calculatePaginationLabel(\n                props.currentPageState.currentPage,\n                props.itemsPerPageState.itemsPerPage,\n                props.totalItems\n              )}\n            </FormLabel>\n            <Pagination\n              count={props.totalPages}\n              defaultPage={1}\n              page={props.currentPageState.currentPage}\n              showFirstButton={true}\n              showLastButton={true}\n              disabled={props.isDisabled}\n              onChange={(event: any, value: number) => handlePaginationChange(value)}\n            />\n          </FormControl>\n        </Grid>\n      </Grid>\n    </fieldset>\n  );\n};\n\nexport default PaginationControlsContainer;\n","import { Box, Divider, Grid, Typography } from '@material-ui/core';\nimport React, { useState, useEffect } from 'react';\nimport { useInvasivesApi } from 'hooks/useInvasivesApi';\n\ninterface IActivityListItem {\n  activity: any;\n  classes: any;\n}\n\nconst ActivityListItem: React.FC<IActivityListItem> = (props) => {\n  const { activity, classes } = props;\n\n  const invasivesApi = useInvasivesApi();\n  const [species, setSpecies] = useState(null);\n\n  useEffect(() => {\n    getSpeciesFromActivity();\n  }, []);\n\n  /*\n    Function to get the species for a given activity and set it in state\n    for usage and display in the activities grid\n  */\n  const getSpeciesFromActivity = async () => {\n    /*\n      Temporarily only enabled for plant terrestrial observation subtype\n    */\n    if (activity.activitySubtype !== 'Activity_Observation_PlantTerrestrial') {\n      return;\n    }\n\n    const speciesCode = activity.formData?.activity_subtype_data?.invasive_plant_code;\n\n    if (speciesCode) {\n      const codeResults = await invasivesApi.getSpeciesDetails([speciesCode]);\n\n      setSpecies(codeResults?.[0]?.code_description);\n    }\n  };\n\n  return (\n    <>\n      <Grid item md={2}>\n        <Box overflow=\"hidden\" textOverflow=\"ellipsis\" title={activity.activityType}>\n          <Typography className={classes.activitiyListItem_Typography}>Type</Typography>\n          {activity.activityType}\n        </Box>\n      </Grid>\n      <Divider flexItem={true} orientation=\"vertical\" />\n      <Grid item md={2}>\n        <Box overflow=\"hidden\" textOverflow=\"ellipsis\" title={activity.activitySubtype.split('_')[2]}>\n          <Typography className={classes.activitiyListItem_Typography}>Subtype</Typography>\n          {activity.activitySubtype.split('_')[2]}\n        </Box>\n      </Grid>\n      <Divider flexItem={true} orientation=\"vertical\" />\n      <Grid item md={3}>\n        <Box overflow=\"hidden\" textOverflow=\"ellipsis\" title={species}>\n          {species && (\n            <>\n              <Typography className={classes.activitiyListItem_Typography}>Species</Typography>\n              {species}\n            </>\n          )}\n        </Box>\n      </Grid>\n    </>\n  );\n};\n\nexport default ActivityListItem;\n","import {\n  Box,\n  Checkbox,\n  Divider,\n  Grid,\n  List,\n  ListItem,\n  ListItemIcon,\n  makeStyles,\n  Paper,\n  SvgIcon,\n  Theme,\n  Typography\n} from '@material-ui/core';\nimport { ActivityTypeIcon, ActivitySubtype } from 'constants/activities';\nimport { MediumDateFormat } from 'constants/misc';\nimport moment from 'moment';\nimport React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport ActivityListItem from './ActivityListItem';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  activitiyListItem: {\n    display: 'flex',\n    flexDirection: 'row',\n    marginTop: '0.5rem',\n    marginBottom: '0.5rem',\n    border: '1px solid',\n    borderColor: theme.palette.grey[300],\n    borderRadius: '6px'\n  },\n  activityListItem_Grid: {\n    flexDirection: 'row',\n    [theme.breakpoints.down('sm')]: {\n      flexDirection: 'column'\n    }\n  },\n  activitiyListItem_Typography: {\n    [theme.breakpoints.down('sm')]: {\n      display: 'inline',\n      marginRight: '1rem'\n    }\n  },\n  multiSelect: {\n    flexBasis: 0\n  }\n}));\n\ninterface ISearchActivityListItem {\n  activity: any;\n}\n\nconst SearchActivityListItem: React.FC<ISearchActivityListItem> = (props) => {\n  const classes = useStyles();\n\n  return (\n    <Grid className={classes.activityListItem_Grid} container spacing={2}>\n      <Divider flexItem={true} orientation=\"vertical\" />\n      <Grid item md={1}>\n        <Box overflow=\"hidden\" textOverflow=\"ellipsis\" title={props.activity._id}>\n          <Typography className={classes.activitiyListItem_Typography}>ID</Typography>\n          {props.activity._id}\n        </Box>\n      </Grid>\n      <Divider flexItem={true} orientation=\"vertical\" />\n      <ActivityListItem activity={props.activity} classes={classes} />\n      <Divider flexItem={true} orientation=\"vertical\" />\n      <Grid item md={3}>\n        <Typography className={classes.activitiyListItem_Typography}>Date</Typography>\n        {moment(props.activity.dateReceived).format(MediumDateFormat)}\n      </Grid>\n    </Grid>\n  );\n};\n\ninterface ISearchActivitiesList {\n  activities: any[];\n  edits?: any[];\n  setEdits?: any;\n}\n\nconst SearchActivitiesList: React.FC<ISearchActivitiesList> = (props) => {\n  const classes = useStyles();\n  const history = useHistory();\n  const { edits, setEdits } = props;\n\n  const navigateToSearchActivityPage = async (doc: any) => {\n    history.push(`/home/search/activity/${doc._id}`);\n  };\n\n  return (\n    <List>\n      {props.activities.map((activity) => {\n        const isChecked = edits.filter((edit) => edit.id === activity._id).length > 0;\n\n        // Temporarily limit bulk editing:\n        const allowedBulkEditSubtypes = [\n          ActivitySubtype.Observation_PlantTerrestrial,\n          ActivitySubtype.Treatment_ChemicalPlant,\n          ActivitySubtype.Treatment_MechanicalPlant,\n          ActivitySubtype.Treatment_BiologicalPlant\n        ];\n        const bulkEditIsDisabled = !allowedBulkEditSubtypes.includes(activity.activitySubtype);\n\n        return (\n          <Paper key={activity._id}>\n            <ListItem\n              button\n              className={classes.activitiyListItem}\n              onClick={() => navigateToSearchActivityPage(activity)}>\n              <Grid className={classes.multiSelect}>\n                <Checkbox\n                  checked={isChecked}\n                  disabled={bulkEditIsDisabled}\n                  style={bulkEditIsDisabled ? { visibility: 'hidden' } : {}}\n                  onChange={() =>\n                    setEdits(\n                      isChecked\n                        ? edits.filter((edit) => edit.id !== activity._id)\n                        : [\n                            {\n                              id: activity._id,\n                              subtype: activity.activitySubtype\n                            },\n                            ...edits\n                          ]\n                    )\n                  }\n                  onClick={(event) => event.stopPropagation()}\n                />\n              </Grid>\n              <ListItemIcon>\n                <SvgIcon fontSize=\"large\" component={ActivityTypeIcon[activity.activityType]} />\n              </ListItemIcon>\n              <SearchActivityListItem activity={activity} />\n            </ListItem>\n          </Paper>\n        );\n      })}\n    </List>\n  );\n};\n\nexport default SearchActivitiesList;\n","import { Box, Button, makeStyles, Theme, Typography } from '@material-ui/core';\nimport SearchActivitiesList from 'components/activities-list/SearchActivitiesList';\nimport { ISearchActivity } from 'features/home/search/SearchPage';\nimport { useInvasivesApi } from 'hooks/useInvasivesApi';\nimport React, { useState, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { notifyError } from 'utils/NotificationUtils';\nimport { DatabaseContext } from 'contexts/DatabaseContext';\n\ninterface ISearchResultsList {\n  classes?: any;\n  totalItems: number;\n  results?: ISearchActivity[];\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  resultsBar: {\n    justifyContent: 'space-between',\n    display: 'flex',\n    alignItems: 'center'\n  },\n  bulkButton: {\n    marginLeft: 10\n  }\n}));\n\nconst SearchResultsList: React.FC<ISearchResultsList> = (props) => {\n  const [edits, setEdits] = useState<any[]>([]);\n  const history = useHistory();\n  const classes = useStyles();\n  const invasivesApi = useInvasivesApi();\n  const databaseContext = useContext(DatabaseContext);\n\n  const navigateToEditPage = (editsList: any) => {\n    if (new Set(editsList.map((edit) => edit.subtype)).size > 1) {\n      notifyError(databaseContext, 'Sorry, all activites must be the same Subtype in order to Bulk Edit.');\n      return;\n    }\n    const ids = editsList.map((edit) => edit.id);\n    if (ids.length > 1) {\n      history.push({\n        pathname: `/home/search/bulkedit`,\n        search: '?activities=' + ids.join(','),\n        state: { activityIdsToEdit: ids }\n      });\n    } else {\n      history.push(`/home/search/activity/${ids[0]}`);\n    }\n  };\n\n  return (\n    <Box>\n      <Box className={classes.resultsBar}>\n        <Typography variant=\"h5\">{`${props.totalItems} Matching Results Found`}</Typography>\n        <Box className={classes.resultsBar}>\n          <Typography variant=\"h5\">{edits.length ? edits.length + ' Selected' : ''}</Typography>\n          <Button\n            className={classes.bulkButton}\n            disabled={edits.length === 0}\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              navigateToEditPage(edits);\n            }}>\n            Edit\n          </Button>\n          <Button\n            className={classes.bulkButton}\n            disabled={edits.length === 0}\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              invasivesApi.deleteActivities(edits.map((edit) => edit.id));\n              setEdits([]);\n              history.go(0);\n            }}>\n            Delete\n          </Button>\n        </Box>\n      </Box>\n      <SearchActivitiesList activities={props.results} edits={edits} setEdits={setEdits} />\n    </Box>\n  );\n};\n\nexport default SearchResultsList;\n","import {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Box,\n  Button,\n  Container,\n  makeStyles,\n  Paper,\n  Theme,\n  Typography\n} from '@material-ui/core';\nimport { ExpandMore } from '@material-ui/icons';\nimport FilterControlsContainer, { ISearchFilterCriteria } from 'components/search/FilterControlsContainer';\nimport PaginationControlsContainer from 'components/search/PaginationControlsContainer';\nimport { calculateTotalPages } from 'components/search/paginationUtils';\nimport SearchResultsList from 'components/search/SearchResultsList';\nimport { useInvasivesApi } from 'hooks/useInvasivesApi';\nimport { useQuery } from 'hooks/useQuery';\nimport { IActivitySearchCriteria, SORT_DIRECTION } from 'interfaces/useInvasivesApi-interfaces';\nimport moment from 'moment';\nimport qs from 'qs';\nimport React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  fieldset: {\n    border: 'none',\n    marginBottom: '1rem'\n  }\n}));\n\nexport interface ISearchActivity {\n  _id: string;\n  activityType: string;\n  activitySubtype: string;\n  dateReceived: string;\n}\n\nexport interface ISearchPagePage {\n  classes?: any;\n}\n\nconst SearchPage: React.FC<ISearchPagePage> = (props) => {\n  const classes = useStyles();\n\n  const history = useHistory();\n\n  const queryParams = useQuery();\n\n  const invasivesApi = useInvasivesApi();\n\n  const [searchFilterCriteria, setSearchFilterCriteria] = useState<ISearchFilterCriteria>({\n    startDate: queryParams.startDate || '',\n    endDate: queryParams.endDate || '',\n    activityType: queryParams.activityType || [],\n    speciesType: queryParams.speciesType || [],\n    habitatType: queryParams.habitatType || []\n  });\n\n  const [currentPage, setCurrentPage] = useState(Number(queryParams.currentPage) || 1);\n  const [itemsPerPage, setItemsPerPage] = useState(Number(queryParams.itemsPerPage) || 25);\n  const [totalItems, setTotalItems] = useState(0);\n  const [totalPages, setTotalPages] = useState(1);\n\n  const [sortBy, setSortBy] = useState(queryParams.sortBy || '-received_timestamp');\n\n  const [searchResults, setSearchResults] = useState<ISearchActivity[]>([]);\n\n  const [isDisabled, setIsDisabled] = useState(false);\n\n  const sortByValues = {\n    // Note: prefixed with `+` or `-` to represent `ASC` or `DESC` respectively\n    '-received_timestamp': 'Date (newest at top)',\n    '+activity_type': 'Type (a-z)',\n    '+activity_subtype': 'Subtype (a-z)'\n  };\n\n  /**\n   * Call the API to fetch records based on the current filter criteria and pagination settings.\n   */\n  const handleSearch = async () => {\n    setIsDisabled(true);\n\n    // Save the `searchFilterCriteria` to the url\n    history.push({ search: qs.stringify({ ...queryParams, ...searchFilterCriteria }) });\n\n    const startDate = moment(searchFilterCriteria.startDate, 'YYYY-MM-DD');\n    const startDateFilter: object =\n      (startDate && startDate.isValid() && { date_range_start: startDate.startOf('day').toISOString() }) || {};\n\n    const endDate = moment(searchFilterCriteria.endDate, 'YYYY-MM-DD');\n    const endDateFilter: object =\n      (endDate && endDate.isValid() && { date_range_end: endDate.endOf('day').toISOString() }) || {};\n\n    const activityTypeFilter: object =\n      (searchFilterCriteria.activityType &&\n        searchFilterCriteria.activityType.length && { activity_type: searchFilterCriteria.activityType }) ||\n      {};\n\n    const sortColumn = sortBy.substring(1);\n    const sortDirection = sortBy.substring(0, 1);\n\n    const activitySearchCriteria: IActivitySearchCriteria = {\n      page: currentPage - 1, // The api starts at page 0, while the UI starts at page 1.\n      limit: itemsPerPage,\n      sort_by: sortColumn,\n      sort_direction: (sortDirection === '-' && SORT_DIRECTION.DESC) || SORT_DIRECTION.ASC,\n      column_names: [\n        'activity_id',\n        'activity_type',\n        'activity_subtype',\n        'created_timestamp',\n        'received_timestamp',\n        'activity_payload'\n      ],\n      ...startDateFilter,\n      ...endDateFilter,\n      ...activityTypeFilter // NICK TODO WIP - Update backend search to accept array of type, etc. Move it all into the URL????\n    };\n\n    try {\n      const response = await invasivesApi.getActivities(activitySearchCriteria); // NICK TODO WIP - Need a simpler api that just fetches basic information as well as counts, and not photos, etc.\n\n      if (!response || !response.rows) {\n        // TODO error messaging\n      }\n\n      const activities = response.rows.map((activity) => {\n        return {\n          _id: activity.activity_id,\n          activityId: activity.activity_id,\n          activityType: activity.activity_type,\n          activitySubtype: activity.activity_subtype,\n          dateCreated: activity.created_timestamp,\n          dateReceived: activity.received_timestamp,\n          formData: activity.activity_payload.form_data\n        };\n      });\n\n      const count = Number(response.count);\n\n      setSearchResults(activities);\n      setTotalItems(count);\n      setTotalPages(calculateTotalPages(count, itemsPerPage));\n    } catch {\n      // TODO error messaging\n    }\n\n    setIsDisabled(false);\n  };\n\n  useEffect(() => {\n    // Save the new `itemsPerPage` to the url\n    history.push({ search: qs.stringify({ ...queryParams, itemsPerPage: itemsPerPage }) });\n\n    if (currentPage !== 1) {\n      // The current page needs to be reset on `itemsPerPage` change\n      // In this case, do not trigger the search, as the useEffect on [currentPage] will trigger the search\n      setCurrentPage(1);\n      return;\n    }\n\n    handleSearch();\n  }, [itemsPerPage]);\n\n  useEffect(() => {\n    // Save the new `currentPage` to the url\n    history.push({ search: qs.stringify({ ...queryParams, currentPage: currentPage }) });\n\n    handleSearch();\n  }, [currentPage]);\n\n  useEffect(() => {\n    // Save the new `sortBy` to the url\n    history.push({ search: qs.stringify({ ...queryParams, sortBy: sortBy }) });\n\n    handleSearch();\n  }, [sortBy]);\n\n  return (\n    <Container className={props.classes.container}>\n      <Box mb={3}>\n        <Typography variant=\"h4\">Search InvasivesBC Records</Typography>\n      </Box>\n      <Box mb={2}>\n        <form className={props.classes.form}>\n          <Accordion defaultExpanded={true}>\n            <AccordionSummary\n              expandIcon={<ExpandMore />}\n              aria-controls=\"search-filter-controls\"\n              id=\"search-filter-controls\">\n              <Typography variant=\"h5\">Filters</Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <Box flexDirection=\"column\">\n                <Box>\n                  <FilterControlsContainer\n                    classes={classes}\n                    searchFilterCriteriaState={{ searchFilterCriteria, setSearchFilterCriteria }}\n                    isDisabled={isDisabled}\n                  />\n                </Box>\n                <Box p={2}>\n                  <Button variant=\"contained\" color=\"primary\" onClick={handleSearch} disabled={isDisabled}>\n                    Search\n                  </Button>\n                </Box>\n              </Box>\n            </AccordionDetails>\n          </Accordion>\n        </form>\n      </Box>\n      <Paper>\n        <Box p={2}>\n          <Box>\n            <PaginationControlsContainer\n              classes={classes}\n              currentPageState={{ currentPage, setCurrentPage }}\n              itemsPerPageState={{ itemsPerPage, setItemsPerPage }}\n              totalItems={totalItems}\n              totalPages={totalPages}\n              sortByValues={sortByValues}\n              sortByState={{ sortBy, setSortBy }}\n              isDisabled={isDisabled}\n            />\n          </Box>\n          <Box>\n            <SearchResultsList classes={classes} totalItems={totalItems} results={searchResults} />\n          </Box>\n        </Box>\n      </Paper>\n    </Container>\n  );\n};\n\nexport default SearchPage;\n","import React from 'react';\nimport { Route, RouteProps } from 'react-router-dom';\n\nexport type IAppRouteProps = RouteProps & {\n  component: React.ComponentType<any>;\n  layout?: React.ComponentType<any>;\n  title: string;\n  keycloak?: any;\n  keycloakConfig?: any;\n  isMobileNoNetwork?: boolean;\n};\n\nconst AppRoute: React.FC<IAppRouteProps> = ({\n  component: Component,\n  layout,\n  title,\n  keycloak,\n  keycloakConfig,\n  isMobileNoNetwork,\n  ...rest\n}) => {\n  const Layout = layout === undefined ? (props: any) => <>{props.children}</> : layout;\n\n  document.title = title;\n\n  return (\n    <Route\n      {...rest}\n      render={(props) => (\n        <Layout keycloak={keycloak} keycloakConfig={keycloakConfig} isMobileNoNetwork={isMobileNoNetwork}>\n          <Component {...props} />\n        </Layout>\n      )}\n    />\n  );\n};\n\nexport default AppRoute;\n","import useKeycloakWrapper from 'hooks/useKeycloakWrapper';\nimport React from 'react';\nimport { Redirect, Route, RouteProps } from 'react-router-dom';\n\ninterface IPrivateRouteProps extends RouteProps {\n  component: React.ComponentType<any>;\n  layout: React.ComponentType<any>;\n  roles: string[];\n  title: string;\n  componentProps?: any;\n}\n\n/**\n * A PrivateRoute only allows a user who is authenticated and has the appropriate role(s).\n *\n * @param {*} props properties {component, layout, ...rest}\n * @return {*}\n */\nconst PrivateRoute: React.FC<IPrivateRouteProps> = (props) => {\n  const keycloak = useKeycloakWrapper();\n\n  let { component: Component, layout: Layout, ...rest } = props;\n\n  document.title = props.title;\n\n  return (\n    <Route\n      {...rest}\n      render={(renderProps) => {\n        if (\n          (!keycloak.obj?.authenticated || !rest.roles || !keycloak.hasRole(rest.roles)) &&\n          !props.componentProps?.isMobileNoNetwork\n        ) {\n          return <Redirect to={{ pathname: '/forbidden', state: { referer: renderProps.location } }} />;\n        } else {\n          return (\n            <Layout>\n              <Component {...renderProps} {...rest.componentProps} />\n            </Layout>\n          );\n        }\n      }}\n    />\n  );\n};\n\nexport default PrivateRoute;\n","import { ALL_ROLES } from 'constants/roles';\nimport ActivitiesPage from 'features/home/activities/ActivitiesPage';\nimport ActivityPage from 'features/home/activity/ActivityPage';\nimport HomeLayout from 'features/home/HomeLayout';\nimport MapPage from 'features/home/map/MapPage';\nimport PlanPage from 'features/home/plan/PlanPage';\nimport ReferencesActivityPage from 'features/home/references/ReferencesActivityPage';\nimport ReferencesPage from 'features/home/references/ReferencesPage';\nimport BulkEditActivitiesPage from 'features/home/search/BulkEditActivitiesPage';\nimport TreatmentCreationStepperPage from 'features/home/activity/TreatmentCreationStepperPage';\nimport ObservationCreationStepperPage from 'features/home/activity/ObservationCreationStepperPage';\nimport SearchActivityPage from 'features/home/search/SearchActivityPage';\nimport LandingPage from 'features/home/landing/LandingPage';\nimport SearchPage from 'features/home/search/SearchPage';\nimport React from 'react';\nimport { Redirect, Switch } from 'react-router';\nimport AppRoute from 'utils/AppRoute';\nimport PrivateRoute from 'utils/PrivateRoute';\n\ninterface IHomeRouterProps {\n  classes: any;\n}\n\nconst HomeRouter: React.FC<IHomeRouterProps> = (props) => {\n  const getTitle = (page: string) => {\n    return `InvasivesBC - ${page}`;\n  };\n\n  return (\n    <Switch>\n      <Redirect exact from=\"/home\" to=\"/home/landing\" />\n      <PrivateRoute\n        exact\n        layout={HomeLayout}\n        path=\"/home/search\"\n        title={getTitle('Search')}\n        roles={ALL_ROLES}\n        component={SearchPage}\n        componentProps={props}\n      />\n      <PrivateRoute\n        layout={HomeLayout}\n        path=\"/home/search/activity/:id?\"\n        title={getTitle('Edit')}\n        roles={ALL_ROLES}\n        component={SearchActivityPage}\n        componentProps={props}\n      />\n      <PrivateRoute\n        exact\n        layout={HomeLayout}\n        path=\"/home/search/bulkedit\"\n        title={getTitle('Bulk Edit')}\n        roles={ALL_ROLES}\n        component={BulkEditActivitiesPage}\n        componentProps={props}\n      />\n      <PrivateRoute\n        exact\n        layout={HomeLayout}\n        path=\"/home/activity/observation\"\n        title={getTitle('Create Observation')}\n        roles={ALL_ROLES}\n        component={ObservationCreationStepperPage}\n        componentProps={props}\n      />\n      <PrivateRoute\n        exact\n        layout={HomeLayout}\n        path=\"/home/activity/treatment\"\n        title={getTitle('Create Treatment')}\n        roles={ALL_ROLES}\n        component={TreatmentCreationStepperPage}\n        componentProps={props}\n      />\n      <PrivateRoute\n        exact\n        layout={HomeLayout}\n        path=\"/home/plan\"\n        title={getTitle('Plan')}\n        roles={ALL_ROLES}\n        component={PlanPage}\n        componentProps={props}\n      />\n      <PrivateRoute\n        exact\n        layout={HomeLayout}\n        path=\"/home/references\"\n        title={getTitle('Reference')}\n        roles={ALL_ROLES}\n        component={ReferencesPage}\n        componentProps={props}\n      />\n      <PrivateRoute\n        layout={HomeLayout}\n        path=\"/home/references/activity/:id?\"\n        title={getTitle('Activity')}\n        roles={ALL_ROLES}\n        component={ReferencesActivityPage}\n        componentProps={props}\n      />\n      <PrivateRoute\n        exact\n        layout={HomeLayout}\n        path=\"/home/activities\"\n        title={getTitle('Activities')}\n        roles={ALL_ROLES}\n        component={ActivitiesPage}\n        componentProps={props}\n      />\n      <PrivateRoute\n        exact\n        layout={HomeLayout}\n        path=\"/home/map\"\n        title={getTitle('Map')}\n        roles={ALL_ROLES}\n        component={MapPage}\n        componentProps={props}\n      />\n      <PrivateRoute\n        exact\n        layout={HomeLayout}\n        path=\"/home/activity\"\n        title={getTitle('Activity')}\n        roles={ALL_ROLES}\n        component={ActivityPage}\n        componentProps={props}\n      />\n      <PrivateRoute\n        exact\n        layout={HomeLayout}\n        path=\"/home/landing\"\n        title={getTitle('Welcome')}\n        roles={ALL_ROLES}\n        component={LandingPage}\n        componentProps={props}\n      />\n      {/*  Catch any unknown routes, and re-direct to the not found page */}\n      <AppRoute title=\"*\" path=\"/home/*\" component={() => <Redirect to=\"/page-not-found\" />} />\n    </Switch>\n  );\n};\n\nexport default HomeRouter;\n","import * as React from 'react';\nimport useKeycloakWrapper from 'hooks/useKeycloakWrapper';\nimport { useInvasivesApi } from 'hooks/useInvasivesApi';\n\nexport interface IAuthState {\n  ready?: boolean;\n}\n\nexport const AuthStateContext = React.createContext<IAuthState>({\n  ready: false\n});\n\nexport const AuthStateContextProvider: React.FC = (props) => {\n  const keycloak = useKeycloakWrapper();\n  const invasivesApi = useInvasivesApi();\n\n  const [userInfo, setUserInfo] = React.useState<any>(null);\n\n  React.useEffect(() => {\n    const loadUserInfo = async () => {\n      const user = await keycloak.obj?.loadUserInfo();\n      setUserInfo(user);\n    };\n\n    loadUserInfo();\n  }, [keycloak.obj]);\n\n  React.useEffect(() => {\n    const getApiSpec = async () => {\n      await invasivesApi.getCachedApiSpec();\n    };\n\n    getApiSpec();\n  }, []);\n\n  return (\n    <AuthStateContext.Provider value={{ ready: keycloak.obj?.authenticated && !!userInfo }}>\n      {props.children}\n    </AuthStateContext.Provider>\n  );\n};\n","import { Box, CssBaseline, makeStyles, Theme } from '@material-ui/core';\nimport React from 'react';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  mainContent: {\n    flex: 1,\n    width: 'inherit',\n    height: 'inherit',\n    overflow: 'auto'\n  },\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4)\n  }\n}));\n\ninterface IPublicLayoutProps {\n  keycloak?: any;\n  keycloakConfig?: any;\n  isMobileNoNetwork?: boolean;\n}\n\nconst PublicLayout: React.FC<IPublicLayoutProps> = (props) => {\n  const classes = useStyles();\n  const { isMobileNoNetwork } = props;\n\n  return (\n    <Box mb={2} height=\"inherit\" width=\"inherit\" display=\"flex\" flexDirection=\"column\">\n      <CssBaseline />\n      <main className={classes.mainContent}>\n        {React.Children.map(props.children, (child: any) => {\n          return React.cloneElement(child, { classes: classes, isMobileNoNetwork: isMobileNoNetwork });\n        })}\n      </main>\n    </Box>\n  );\n};\n\nexport default PublicLayout;\n","import { KeycloakEventHandler } from '@react-keycloak/web';\nimport { KeycloakInstance } from 'keycloak-js';\n\nconst getKeycloakEventHandler = (keycloak: KeycloakInstance) => {\n  const keycloakEventHandler: KeycloakEventHandler = (event, error) => {\n    switch (event) {\n      case 'onReady':\n        console.log('keycloak onReady');\n        break;\n      case 'onAuthSuccess':\n        console.log('keycloak onAuthSuccess');\n        break;\n      case 'onAuthError':\n        console.log('keycloak onAuthError', error);\n        break;\n      case 'onAuthLogout':\n        console.log('keycloak onAuthLogout');\n        break;\n      case 'onAuthRefreshError':\n        console.log('keycloak onAuthRefreshError', error);\n        break;\n      case 'onAuthRefreshSuccess':\n        console.log('keycloak onAuthRefreshSuccess');\n        break;\n      case 'onInitError':\n        console.log('keycloak onInitError', error);\n        break;\n      case 'onTokenExpired':\n        console.log('keycloak onTokenExpired', error);\n        break;\n      default:\n        console.debug(`keycloak event: ${event} error ${error}`);\n    }\n  };\n  return keycloakEventHandler;\n};\n\nexport default getKeycloakEventHandler;\n","import { CircularProgress } from '@material-ui/core';\nimport React from 'react';\nimport { KeycloakProvider } from '@react-keycloak/web';\nimport { AuthStateContext, AuthStateContextProvider } from 'contexts/authStateContext';\nimport PublicLayout from './PublicLayout';\nimport getKeycloakEventHandler from '../utils/KeycloakEventHandler';\n\ninterface IAuthLayoutProps {\n  keycloak: any;\n  keycloakConfig: any;\n}\n\nconst AuthLayout: React.FC<IAuthLayoutProps> = (props) => {\n  return (\n    <KeycloakProvider\n      keycloak={props.keycloak}\n      initConfig={props.keycloakConfig}\n      LoadingComponent={<CircularProgress />}\n      onEvent={getKeycloakEventHandler(props.keycloak)}>\n      <AuthStateContextProvider>\n        <AuthStateContext.Consumer>\n          {(context) => {\n            if (!context.ready) {\n              return <CircularProgress />;\n            }\n\n            return <PublicLayout>{props.children}</PublicLayout>;\n          }}\n        </AuthStateContext.Consumer>\n      </AuthStateContextProvider>\n    </KeycloakProvider>\n  );\n};\n\nexport default AuthLayout;\n","import { Box, Button, Container, makeStyles, Typography } from '@material-ui/core';\nimport { ArrowBack, Warning } from '@material-ui/icons';\nimport React from 'react';\nimport { useHistory } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n  warningIcon: {\n    verticalAlign: 'middle',\n    fontSize: '3rem',\n    marginRight: '1rem'\n  },\n  emailLink: {\n    color: theme.palette.primary.main,\n    textDecoration: 'none'\n  }\n}));\n\nconst AccessDenied = () => {\n  const classes = useStyles();\n\n  const history = useHistory();\n\n  const navigateToHome = () => {\n    history.push('/home');\n  };\n\n  const emailSubject = encodeURIComponent('InvasivesBC Access Request');\n  const emailBody = encodeURIComponent(\n    `I wish to be granted access to the InvasivesBC application, find\n    below my IDIR or BCeID username.`\n  );\n  const emailHref = `mailto:michael.shasko@gov.bc.ca?subject=${emailSubject}&body=${emailBody}`;\n  return (\n    <Container>\n      <Box my={6}>\n        <Box mb={3}>\n          <Typography variant=\"h1\">\n            <Warning className={classes.warningIcon} />\n            Email for access\n          </Typography>\n        </Box>\n        <Box mb={4}>\n          <Typography variant=\"h4\">\n            You must request access by email to view this application. Please provide your IDIR/BCeID username in the\n            email body.\n          </Typography>\n        </Box>\n        <Box mb={4}>\n          <Typography variant=\"body1\" component=\"span\">\n            <Box>Send an email requesting access to:</Box>\n            <Box mb={2} className={classes.emailLink}>\n              michael.shasko@gov.bc.ca\n            </Box>\n            <Box mb={2}>or</Box>\n            <Box>\n              <a className={classes.emailLink} href={emailHref}>\n                Click Here\n              </a>\n            </Box>\n          </Typography>\n        </Box>\n        <Box mb={3}>\n          <Typography variant=\"body1\">\n            Authorization is a one time process, after which your IDIR/BCeID will be enabled for future logins.\n          </Typography>\n          <Typography variant=\"body1\">\n            If this is your first time logging into the InvasivesBC application, you will need to send an email to the\n            above address to complete your authorization and gain access to the site.\n          </Typography>\n        </Box>\n        <Box>\n          <Button variant=\"text\" color=\"primary\" startIcon={<ArrowBack />} onClick={navigateToHome}>\n            <Typography variant=\"body1\">Go back to the home page</Typography>\n          </Button>\n        </Box>\n      </Box>\n    </Container>\n  );\n};\n\nexport default AccessDenied;\n","import { Box, Button, Container, makeStyles, Typography } from '@material-ui/core';\nimport { ArrowBack, Warning } from '@material-ui/icons';\nimport React from 'react';\nimport { useHistory } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n  warningIcon: {\n    verticalAlign: 'middle',\n    fontSize: '3rem',\n    marginRight: '1rem'\n  }\n}));\n\nexport const NotFoundPage = () => {\n  const classes = useStyles();\n\n  const history = useHistory();\n\n  const navigateToHome = () => {\n    history.push('/home');\n  };\n\n  return (\n    <Container>\n      <Box my={6}>\n        <Box mb={3}>\n          <Typography variant=\"h1\">\n            <Warning className={classes.warningIcon} />\n            Page not found\n          </Typography>\n        </Box>\n        <Box>\n          <Button variant=\"text\" color=\"primary\" startIcon={<ArrowBack />} onClick={navigateToHome}>\n            <Typography variant=\"body1\">Go back to the home page</Typography>\n          </Button>\n        </Box>\n      </Box>\n    </Container>\n  );\n};\n","import { Capacitor } from '@capacitor/core';\nimport { CircularProgress } from '@material-ui/core';\nimport { NetworkContext } from 'contexts/NetworkContext';\nimport HomeRouter from 'features/home/HomeRouter';\nimport AuthLayout from 'layouts/AuthLayout';\nimport PublicLayout from 'layouts/PublicLayout';\nimport AccessDenied from 'pages/misc/AccessDenied';\nimport { NotFoundPage } from 'pages/misc/NotFoundPage';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Redirect, Switch } from 'react-router-dom';\nimport AppRoute from 'utils/AppRoute';\n\ninterface IAppRouterProps {\n  deviceInfo: any;\n  keycloak: any;\n  keycloakConfig: any;\n}\n\nconst AppRouter: React.FC<IAppRouterProps> = (props) => {\n  const networkContext = useContext(NetworkContext);\n\n  const [layout, setLayout] = useState<React.FC<any>>(null);\n  const [isMobileNoNetwork, setIsMobileNoNetwork] = useState(false);\n\n  const getTitle = (page: string) => {\n    return `InvasivesBC - ${page}`;\n  };\n\n  useEffect(() => {\n    // If on mobile and have no internet connection, then bypass keycloak\n    if (Capacitor.getPlatform() == 'ios' && !networkContext?.connected) {\n      setLayout(() => PublicLayout);\n      setIsMobileNoNetwork(true);\n    } else {\n      setLayout(() => AuthLayout);\n    }\n  }, [networkContext]);\n\n  if (!layout) {\n    return <CircularProgress />;\n  }\n\n  return (\n    <Switch>\n      <Redirect exact from=\"/\" to=\"/home\" />\n      <AppRoute path=\"/forbidden\" title={getTitle('Forbidden')} component={AccessDenied} layout={PublicLayout} />\n      <AppRoute path=\"/page-not-found\" title={getTitle('Not Found')} component={NotFoundPage} layout={PublicLayout} />\n      <AppRoute\n        path=\"/home\"\n        title={getTitle('Home')}\n        component={HomeRouter}\n        layout={layout}\n        keycloak={props.keycloak}\n        keycloakConfig={props.keycloakConfig}\n        isMobileNoNetwork={isMobileNoNetwork}\n      />\n      <AppRoute title=\"*\" path=\"*\" component={() => <Redirect to=\"/page-not-found\" />} />\n    </Switch>\n  );\n};\n\nexport default AppRouter;\n","import { DeviceInfo } from '@capacitor/core';\nimport { IonReactRouter } from '@ionic/react-router';\nimport { Box, CircularProgress, ThemeProvider } from '@material-ui/core';\n// Strange looking `type {}` import below, see: https://github.com/microsoft/TypeScript/issues/36812\nimport type {} from '@material-ui/lab/themeAugmentation'; // this allows `@material-ui/lab` components to be themed\nimport { DatabaseChangesContextProvider } from 'contexts/DatabaseChangesContext';\nimport { DatabaseContext, DatabaseContextProvider, IDatabaseContext } from 'contexts/DatabaseContext';\nimport { NetworkContextProvider } from 'contexts/NetworkContext';\nimport Keycloak, { KeycloakConfig, KeycloakInstance } from 'keycloak-js';\nimport React from 'react';\nimport appTheme from 'themes/appTheme';\nimport AppRouter from './AppRouter';\n\ninterface IAppProps {\n  deviceInfo: DeviceInfo;\n}\n\nconst App: React.FC<IAppProps> = (props) => {\n  const keycloakInstanceConfig: KeycloakConfig = {\n    realm: 'dfmlcg7z',\n    url: 'https://dev.oidc.gov.bc.ca/auth/',\n    clientId: 'invasives-bc'\n  };\n\n  //@ts-ignore\n  const keycloak: KeycloakInstance = new Keycloak(keycloakInstanceConfig);\n\n  let keycloakConfig = null;\n\n  if (window['cordova']) {\n    keycloakConfig = {\n      flow: 'hybrid',\n      redirectUri: 'http://127.0.0.1',\n      checkLoginIframe: false,\n      onLoad: 'login-required'\n    };\n  } else {\n    keycloakConfig = { onLoad: 'login-required', checkLoginIframe: false };\n  }\n\n  const appRouterProps = {\n    deviceInfo: props.deviceInfo,\n    keycloak,\n    keycloakConfig\n  };\n\n  return (\n    <Box height=\"100vh\" width=\"100vw\" display=\"flex\" overflow=\"hidden\">\n      <ThemeProvider theme={appTheme}>\n        <IonReactRouter>\n          <NetworkContextProvider>\n            <DatabaseContextProvider>\n              <DatabaseContext.Consumer>\n                {(databaseContext: IDatabaseContext) => {\n                  if (!databaseContext.database) {\n                    // database not ready, delay loading app\n                    return <CircularProgress />;\n                  }\n                  return (\n                    <DatabaseChangesContextProvider>\n                      <AppRouter {...appRouterProps} />\n                    </DatabaseChangesContextProvider>\n                  );\n                }}\n              </DatabaseContext.Consumer>\n            </DatabaseContextProvider>\n          </NetworkContextProvider>\n        </IonReactRouter>\n      </ThemeProvider>\n    </Box>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Plugins } from '@capacitor/core';\nimport { defineCustomElements } from '@ionic/pwa-elements/loader';\nimport { default as React } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'App';\nimport * as serviceWorker from 'serviceWorker';\n\nconst { Device } = Plugins;\n\n// Call the element loader after the platform has been bootstrapped\ndefineCustomElements(window);\n\nconst startApp = (info) => {\n  ReactDOM.render(<App deviceInfo={info} />, document.getElementById('root'));\n\n  // If you want your app to work offline and load faster, you can change\n  // unregister() to register() below. Note this comes with some pitfalls.\n  // Learn more about service workers: https://bit.ly/CRA-PWA\n  serviceWorker.unregister();\n};\n\nif (window['cordova']) {\n  // start app on mobile\n  // must wait for 'deviceready' before starting\n  document.addEventListener(\n    'deviceready',\n    async () => {\n      const info = await Device.getInfo(); // TODO move this into a context provider\n      startApp(info);\n    },\n    false\n  );\n} else {\n  // start app on web\n  startApp(null);\n}\n"],"sourceRoot":""}