import { all, call, delay, put, select, takeEvery, takeLatest } from 'redux-saga/effects';
import Keycloak from 'keycloak-js';
import {
  ACTIVITY_UPDATE_GEO_REQUEST,
ACTIVITY_UPDATE_GEO_SUCCESS,
ACTIVITY_UPDATE_GEO_FAILURE,
ACTIVITY_UPDATE_AUTOFILL_REQUEST,
ACTIVITY_UPDATE_AUTOFILL_SUCCESS,
ACTIVITY_UPDATE_AUTOFILL_FAILURE,
ACTIVITY_UPDATE_PHOTO_REQUEST,
ACTIVITY_UPDATE_PHOTO_SUCCESS,
ACTIVITY_UPDATE_PHOTO_FAILURE,
ACTIVITY_LINK_RECORD_REQUEST,
ACTIVITY_LINK_RECORD_SUCCESS,
ACTIVITY_LINK_RECORD_FAILURE,
ACTIVITY_PERSIST_REQUEST,
ACTIVITY_PERSIST_SUCCESS,
ACTIVITY_PERSIST_FAILURE,
ACTIVITY_SAVE_REQUEST,
ACTIVITY_SAVE_SUCCESS,
ACTIVITY_SAVE_FAILURE,
ACTIVITY_SUBMIT_REQUEST,
ACTIVITY_SUBMIT_SUCCESS,
ACTIVITY_SUBMIT_FAILURE,
ACTIVITY_DELETE_REQUEST,
ACTIVITY_DELETE_SUCCESS,
ACTIVITY_DELETE_FAILURE,
ACTIVITY_GET_INITIAL_STATE_REQUEST,
ACTIVITY_GET_INITIAL_STATE_FAILURE,
ACTIVITY_GET_INITIAL_STATE_SUCCESS
} from '../actions';
import { AppConfig } from '../config';
import { selectConfiguration } from '../reducers/configuration';
import { useDataAccess } from 'hooks/useDataAccess';

function* handle_ACTIVITY_GET_INITIAL_STATE_REQUEST(action) {
  try {
    
    const dataAccess = useDataAccess();
    const activity = yield call(dataAccess.getActivityById, action.payload.activityID) 

    yield put({ type: ACTIVITY_GET_INITIAL_STATE_SUCCESS, payload: { activity: activity} });
  } catch (e) {
    console.error(e);
    yield put({ type: ACTIVITY_GET_INITIAL_STATE_FAILURE });
  }
}

function* activityPageSaga() {
  yield all([
    takeEvery(ACTIVITY_GET_INITIAL_STATE_REQUEST , handle_ACTIVITY_GET_INITIAL_STATE_REQUEST),
    takeEvery(ACTIVITY_UPDATE_GEO_REQUEST , ()=> console.log('ACTIVITY_UPDATE_GEO_REQUEST')),
    takeEvery(ACTIVITY_UPDATE_AUTOFILL_REQUEST , ()=> console.log('ACTIVITY_UPDATE_AUTOFILL_REQUEST')),
    takeEvery(ACTIVITY_UPDATE_PHOTO_REQUEST , ()=> console.log('ACTIVITY_UPDATE_PHOTO_REQUEST')),
    takeEvery(ACTIVITY_LINK_RECORD_REQUEST , ()=> console.log('ACTIVITY_LINK_RECORD_REQUEST')),
    takeEvery(ACTIVITY_PERSIST_REQUEST , ()=> console.log('ACTIVITY_PERSIST_REQUEST')),
    takeEvery(ACTIVITY_SAVE_REQUEST , ()=> console.log('ACTIVITY_SAVE_REQUEST')),
    takeEvery(ACTIVITY_SUBMIT_REQUEST , ()=> console.log('ACTIVITY_SUBMIT_REQUEST')),
    takeEvery(ACTIVITY_DELETE_REQUEST , ()=> console.log('ACTIVITY_DELETE_REQUEST')),
  ]);
}

export default activityPageSaga;
