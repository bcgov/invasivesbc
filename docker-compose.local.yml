services:
  ########################
  #   Postgis DB
  ########################
  db:
    image: postgis/postgis:16-3.5-alpine
    container_name: ${PROJECT_NAME}-${TAG}-db
    ports:
      - ${DB_PORT}:${DB_PORT}
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_DATABASE}
      - PORT=${DB_PORT}
      - TZ=America/Vancouver
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready', '-U', '${DB_USER}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    networks:
      - local-network
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./database/.docker/db/entrypoint:/docker-entrypoint-initdb.d

  ########################
  #   Knex Migrator
  ########################
  db_setup:
    image: ${PROJECT_NAME}-${TAG}-postgres-setup-img
    container_name: ${PROJECT_NAME}-${TAG}-db-setup
    build:
      context: ./database
      dockerfile: ./.docker/db/Dockerfile.setup
    environment:
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - ENVIRONMENT=local
      - REACT_APP_REAL_NODE_ENV=local
      - NODE_ENV=local
      - SKIP_POSTGRES9_COMPATIBILITY=true
    networks:
      - local-network
    links:
      - db
    restart: on-failure
    depends_on:
      db:
        condition: service_healthy
  ########################
  #   API
  ########################
  api:
    image: ${PROJECT_NAME}-${TAG}-api-img
    container_name: ${PROJECT_NAME}-${TAG}-api
    build:
      context: ./
      dockerfile: ./api/.docker/api/Dockerfile
    ports:
      - ${API_PORT}:${API_PORT}
    environment:
      API_HOST: ${API_HOST:-localhost}
      API_PORT: ${API_PORT:-3002}
      DB_HOST: ${DB_HOST}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      DB_PORT: ${DB_PORT:-5432}
      DB_DATABASE: ${DB_DATABASE}
      APP_CERTIFICATE_URL: ${APP_CERTIFICATE_URL}
      APP_CERTIFICATE_URL_TEST: ${APP_CERTIFICATE_URL_TEST}
      OBJECT_STORE_URL: ${OBJECT_STORE_URL}
      OBJECT_STORE_ACCESS_KEY_ID: ${OBJECT_STORE_ACCESS_KEY_ID}
      OBJECT_STORE_SECRET_KEY_ID: ${OBJECT_STORE_SECRET_KEY_ID}
      OBJECT_STORE_BUCKET_NAME: ${OBJECT_STORE_BUCKET_NAME}
      ENVIRONMENT: local
      NODE_ENV: local
    networks:
      - local-network
    links:
      - db
    depends_on:
      db:
        condition: service_healthy
    develop:
      watch:
        - action: sync
          path: ./api
          target: /opt/app-root/api
          ignore:
            - ./api/node_modules/
        - action: rebuild
          path: ./sharedapi
          target: /opt/app-root/sharedAPI
          ignore:
            - ./sharedapi/node_modules/
  ########################
  #   Frontend
  ########################
  # Build the nginx web-server docker image
  frontend:
    container_name: invasives-frontend
    build:
      context: ./
      dockerfile: ./app/.docker/Dockerfile
    ports:
      - 3000:3000
    environment:
      REACT_APP_API_HOST: ${REACT_APP_API_HOST:-http://${API_HOST:-localhost}:${API_PORT:-3002}}
      SSO_CLIENT_ID: ${SSO_CLIENT_ID}
      SSO_REALM: standard
      SSO_URL: ${SSO_URL:-https://dev.loginproxy.gov.bc.ca/auth/}
      REDIRECT_URI: ${REDIRECT_URI:-http://localhost:3000/home/landing}
      PUBLIC_MAP_URL: ${PUBLIC_MAP_URL}
      IAPP_GEOJSON_URL: ${IAPP_GEOJSON_URL}
      SILENT_CHECK_URI: ${SILENT_CHECK_URI}
    healthcheck:
      test: curl--fail http://localhost:3000 || exit 1
      interval: 20s
      timeout: 30s
      retries: 5
      start_period: 30s
    develop:
      watch:
        - action: sync
          path: .git
          target: /opt/app-root/.git
        - action: sync
          path: ./app
          target: /opt/app-root/app
          ignore:
            - ./app/node_modules/
        - action: rebuild
          path: ./sharedapi
          target: /opt/app-root/sharedAPI
          ignore:
            - ./sharedapi/node_modules/
    depends_on:
      db:
        condition: service_healthy
      # api:
      #   condition: service_healthy
    networks:
      - local-network

  ########################
  #   PGAdmin
  ########################
  pgadmin:
    container_name: invasives-pgadmin
    image: dpage/pgadmin4
    ports:
      - 5050:80
    environment:
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_DEFAULT_EMAIL: admin@invasives.com
    networks:
      - local-network

########################
#   Networks
########################
networks:
  local-network:
    driver: bridge

########################
#   Volumes
########################
volumes:
  postgres:
    name: ${PROJECT_NAME}-${TAG}-vol-postgres
  npmcache_app:
    name: ${PROJECT_NAME}-${TAG}-vol-npmcache-app
