services:
  db:
    image: postgis/postgis:16-3.5-alpine
    container_name: ${PROJECT_NAME}-${TAG}-db
    ports:
      - ${DB_PORT}:${DB_PORT}
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_DATABASE}
      - PORT=${DB_PORT}
      - TZ=America/Vancouver
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready', '-U', '${DB_USER}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    networks:
      - local-network
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./database/.docker/db/entrypoint:/docker-entrypoint-initdb.d

  ## Run the database migrations and seeding
  db_setup:
    image: ${PROJECT_NAME}-${TAG}-postgres-setup-img
    container_name: ${PROJECT_NAME}-${TAG}-db-setup
    build:
      context: ./database
      dockerfile: ./.docker/db/Dockerfile.setup
    environment:
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - ENVIRONMENT=local
      - REACT_APP_REAL_NODE_ENV=local
      - NODE_ENV=local
      - SKIP_POSTGRES9_COMPATIBILITY=true
    networks:
      - local-network
    links:
      - db
    restart: on-failure
    depends_on:
      db:
        condition: service_healthy
      # Doesn't actually depend on api_dependency, but we need a way to delay this from running so the database is fully
      # started before the setup runs. Possible better solutions:
      # https://stackoverflow.com/questions/35069027/docker-wait-for-postgresql-to-be-running

  ## Build the api docker image
  api:
    image: ${PROJECT_NAME}-${TAG}-api-img
    container_name: ${PROJECT_NAME}-${TAG}-api
    build:
      context: ./
      dockerfile: ./api/.docker/api/Dockerfile
    ports:
      - ${API_PORT}:${API_PORT}
    environment:
      - API_HOST=${API_HOST}
      - API_PORT=${API_PORT}
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - APP_CERTIFICATE_URL=${APP_CERTIFICATE_URL}
      - APP_CERTIFICATE_URL_TEST=${APP_CERTIFICATE_URL_TEST}
      - ENVIRONMENT=local
      - NODE_ENV=local
      - OBJECT_STORE_URL=${OBJECT_STORE_URL}
      - OBJECT_STORE_ACCESS_KEY_ID=${OBJECT_STORE_ACCESS_KEY_ID}
      - OBJECT_STORE_SECRET_KEY_ID=${OBJECT_STORE_SECRET_KEY_ID}
      - OBJECT_STORE_BUCKET_NAME=${OBJECT_STORE_BUCKET_NAME}
    networks:
      - local-network
    links:
      - db
    depends_on:
      db:
        condition: service_healthy
    develop:
      watch:
        - action: sync
          path: ./api
          target: /opt/app-root/api
          ignore:
            - .api/node_modules/
        - action: rebuild
          path: ./sharedapi
          target: /opt/app-root/sharedAPI
          ignore:
            - ./sharedapi/node_modules/

  # Build the nginx web-server docker image
  nginx:
    image: ${PROJECT_NAME}-${TAG}-nginx-img
    container_name: ${PROJECT_NAME}-${TAG}-nginx
    build:
      context: ./.docker/nginx
      dockerfile: Dockerfile
    restart: always
    ports:
      - 80:80
    depends_on:
      - db
      - api
    networks:
      - local-network
  pgadmin:
    container_name: invasives-pgadmin
    image: dpage/pgadmin4
    ports:
      - 5050:80
    environment:
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_DEFAULT_EMAIL: admin@invasives.com
    networks:
      - local-network

networks:
  local-network:
    driver: bridge

volumes:
  postgres:
    name: ${PROJECT_NAME}-${TAG}-vol-postgres
  npmcache_app:
    name: ${PROJECT_NAME}-${TAG}-vol-npmcache-app
